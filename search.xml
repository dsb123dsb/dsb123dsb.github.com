<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[lint-staged和husky在pre-commit阶段做代码检查]]></title>
      <url>https://dsb123dsb.github.io/2018/05/26/lint-staged%E5%92%8Chusky%E5%9C%A8pre-commit%E9%98%B6%E6%AE%B5%E5%81%9A%E4%BB%A3%E7%A0%81%E6%A3%80%E6%9F%A5/</url>
      <content type="html"><![CDATA[<blockquote>
<p>纸上得来终终觉浅，绝知此事要躬行</p>
</blockquote>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前几天给项目代码加eslint，并且使用lint-staged和husky在pre-commit阶段做代码检查，也踩了个坑，这里对这两个npm包作简要介绍。</p>
<h1 id="为什么使用"><a href="#为什么使用" class="headerlink" title="为什么使用"></a>为什么使用</h1><p>通常项目中我们通过<code>eslint</code>和<code>stylelint</code>这些lint工具来检查代码的规范与否，保证良好的代码规范，从而在多人协作中保障项目质量和可维护性。正常我们会在提交代码前手动执行语法检查，而<code>lint-staged</code>和<code>husky</code>而让这一过程自动化，在git的pre-commit阶段来检测你的代码，如果存在语法错误会中断commit。</p>
<a id="more"></a>
<h1 id="husky"><a href="#husky" class="headerlink" title="husky"></a>husky</h1><p><a href="https://github.com/typicode/husky" target="_blank" rel="external">husky</a>可以让git hooks的使用变得更简单方便。运行<code>npm install husky@next --save-dev</code>安装最新版本，它会在我们项目根目录下面的<code>.git/hooks</code>文件夹下面创建<code>pre-commit</code>、<code>pre-push</code>等hooks。这些hooks可以让我们直接在<code>package.json</code>的<code>script</code>里运行我们想要在某个hook阶段执行的命令。</p>
<p>版本0.14之后配置有所改变，之前不知道npm安装使用@next会安装最新开发版本，一直安装稳定版本却使用心得配置，也算踩的坑吧，具体配置：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">// package.json， 最新版本</div><div class="line">&#123;</div><div class="line">  <span class="attr">"husky"</span>: &#123;</div><div class="line">    <span class="attr">"hooks"</span>: &#123;</div><div class="line">      <span class="attr">"pre-commit"</span>: <span class="string">"npm test"</span>,</div><div class="line">      <span class="attr">"pre-push"</span>: <span class="string">"npm test"</span>,</div><div class="line">      <span class="attr">"..."</span>: <span class="string">"..."</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">// package.json 版本0.14之前</div><div class="line">&#123;  <span class="attr">"scripts"</span>: &#123;    </div><div class="line">	<span class="attr">"precommit"</span>: <span class="string">"npm test"</span>,  </div><div class="line">    <span class="attr">"prepush"</span>: <span class="string">"npm test"</span>,  </div><div class="line">    <span class="attr">"..."</span>: <span class="string">"..."</span>  </div><div class="line"> &#125;&#125;</div></pre></td></tr></table></figure>
<p>而仅使用husky在提交代码时会检查所有文件，我们肯定不希望这样，仅仅检查git add .的文件才是我们期望的。</p>
<h1 id="lint-staged"><a href="#lint-staged" class="headerlink" title="lint-staged"></a>lint-staged</h1><p><a href="https://github.com/okonet/lint-staged" target="_blank" rel="external">lint-staged</a>可以在git staged阶段的文件上执行linters，简单点来说就是当我们运行<code>eslint</code>或<code>stylelint</code>的命令时，只会检查我们通过<code>git add</code>添加到暂存区的文件，可以避免我们每次检查都把整个项目的代码都检查一遍。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// package.json</div><div class="line">"lint-staged": &#123;</div><div class="line">    "*.js": ["eslint --fix", "git add"]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 工程化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[北漂初感]]></title>
      <url>https://dsb123dsb.github.io/2018/04/15/%E5%8C%97%E6%BC%82%E5%88%9D%E6%84%9F/</url>
      <content type="html"><![CDATA[<blockquote>
<p>纸上得来终觉浅，绝知此事要躬行</p>
</blockquote>
<p>转眼来北京四天了，过了第一个周末，也渐渐重新适应北方的气候，变成了原来自己眼里有些傻傻的戴口罩的匆匆行人，作为北方出生的汉纸在南方呆了几年竞变得不适应自己土生土长的北方土地，内心难免产生些许情绪。行走在北京校园的街头，看着遍地的杨树，在这个最好的季节，仿佛梦回幼时的家乡，原来我的内心深处一直对故乡的一切有着深深的眷恋，一点点相似的物事便已暴露，几年江南烟雨的温柔婉约也不能将之改变。</p>
<p>工作上第一次进入这么大的前端组，充满兴奋和忐忑，周五分享会想也了解到组内的一些业务和技术情况，有些业务技术虽然很老，但也看到组内积极想新技术转变的决心和努力，希望自己能够在这个过程获得成长和作出贡献。这里的也充满挑战，linux开发流程，偏后端知识的学习（ngnix，java），vue，微信小程序等等，有挑战才有进步，加油，期待两年后的自己。</p>
]]></content>
      
        <categories>
            
            <category> 生活随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 北漂 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[原生WebGL小试牛刀]]></title>
      <url>https://dsb123dsb.github.io/2018/01/09/%E5%8E%9F%E7%94%9FWebGL%E5%B0%8F%E8%AF%95%E7%89%9B%E5%88%80/</url>
      <content type="html"><![CDATA[<blockquote>
<p>纸上得来终觉浅，绝知此事要躬行</p>
</blockquote>
<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>​    最近学习WebGL，各个知识点讲解比较分散，自己把整理了下知识点，并综合起来写了简单demo，学习中也感觉到3D图形制作知识的繁杂，当时看懂了其实并未太懂，只有不断学习消化。友情提醒，由于本地测试要访问文件图片，所以要使用命令<code>open -a &quot;Google Chrome&quot; --args --allow-file-access-from-files</code>。本文仅是个人总结，先介绍初始化着色器、纹理、阴影，后续细节会继续整理增加，先看下demo。</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fnallq6sa7g30bf07074m.gif" alt=""></p>
<a id="more"></a>
<h1 id="我们开始吧"><a href="#我们开始吧" class="headerlink" title="我们开始吧"></a>我们开始吧</h1><h2 id="初始化着色器程序"><a href="#初始化着色器程序" class="headerlink" title="初始化着色器程序"></a>初始化着色器程序</h2><p>​    书中开始一直使用<code>initShaders()</code>函数，隐藏了创建着色器和程序对象的细节，其中着色器对象管理一个顶点着色器或者一个片元着色器，程序对象管理着色器对象的容器，具体包括下面七个步骤：</p>
<ol>
<li><p><code>gl.createShader(type)</code>创建着色器对象，根据传入的参数</p>
</li>
<li><p><code>gl.shaderSource(shader, source)</code> 指定着色器对象的代码GLSL ES源代码</p>
</li>
<li><p><code>gl.compileShader(shader)</code>向着色器传入源代码后，还需要进行编译才能使用（二进制可执行格式）,调用gl.getShaderParameter(shader, pname)函数来检查着色器状态。</p>
</li>
<li><p><code>gl.createProgram()</code>创建程序对象</p>
</li>
<li><p><code>gl.attachShader(progtam,shader)</code>为程序对象分配着色器对象</p>
</li>
<li><p><code>gl.linkProgram(program</code>)为程序对象分配着色器对象后，还需要将（顶点和片元）着色器连接起来，调用<code>gl.getProgramParameters(program,pname)</code>检查是否连接成功，调用<code>gl.getProgramInfoLog()</code>获取连接出错信息</p>
</li>
<li><p><code>gl.useProgram()</code>告知WebGL系统所使用的程序对象，可以在绘制前准备多个程序对象，然后在绘制时根据需要切换程序对象。</p>
<p>然后根据这七个步骤分成了封装成了三个流程即最前面提到的<code>initShaders()</code>函数，内部调用<code>createProgram()</code>,它内部又会调用<code>loaderShader()</code>    ，后者负责创建一个编译好的着色器对象。</p>
</li>
</ol>
<p>##纹理一二须知</p>
<p>​    首先知道纹理映射：texture mapping,即将一张图像映射到一个几何图形的表面 。具体步骤：</p>
<ul>
<li>准备好映射到几何图形的纹理图像（需要先加载好图像）</li>
<li><p>为几何图形配置纹理映射方式（利用图形的顶点确定屏幕上哪部分被纹理图像覆盖，使用纹理坐标texture coordinate（纹理坐标很通用，坐标值与图像自身的尺寸无关）确定纹理图像的哪部分将覆盖到几何图形上）。</p>
<p>​通过纹理图像的纹理坐标与几何形体顶点坐标的映射关系确定怎样将纹理图像贴上去。WebGL中无法直接操作纹理对象，必须将纹理对象绑定到纹理单元上，间接操作。顶点之间的片元的纹理坐标会在光栅化的过程中内插出来。纹理单元机制可以同时使用多个纹理，默认下至少支持8个纹理</p>
</li>
</ul>
<p>##渲染到纹理</p>
<p>​    渲染到纹理是把渲染结果作为纹理使用，动态的生成图像，不是像服务器请求加载图像（在纹理图像被贴上图像被贴上图形之前还可以对其做一些额外处理，比如动态模糊或景深效果）。</p>
<p>​    通常WebGL在颜色缓冲区中进行绘制，在开启隐藏面消除功能时还会用到深度缓冲区，总之绘制结果存储在颜色缓冲区中。而帧缓冲区对象(framebuffer object)可以用来替代颜色缓冲区或深度缓冲区，可以先对帧缓冲区中的内容进行一些处理再显示或者直接用其中的内容作为纹理图像，被称为<strong>离屏绘制</strong>(offscreen drawing)。一个帧缓冲区有三个关联对象：颜色关联对象(color attachment)、深度关联区(depth attachment)和模板关联区(stencil attachment)，分别用来替换颜色缓冲区、深度缓冲区、模板缓冲区。每个关联对象又有两种类型：纹理对象和渲染缓冲区，具体步骤如下：</p>
<ul>
<li>创建帧缓冲区：<code>framebuffer = gl.createFramebuffer()</code>，创建之后还需要将其颜色关联对象指定为一个纹理对象，将其深度关联对象指定为一个渲染缓冲区对象</li>
<li>创建纹理对象并设置其尺寸和参数：<code>texture=gl.createTexture()，gl.bindTexture(gl.TEXTURE_2D,texture), gl.textImage2D(gl.TEXTURE_2D,0,gl.RGBA,OFFSCREEN_WIDTH,OFFSCREEN_HEIGHT,0,gl.RGBA,gl.UNSIGNED_BYTE,null)</code>存储纹理高宽，最后一个参数设为null可以新建一块空白区域, <code>gl.textParameteri(gl.TEXTURE_MIN_FILTER,gl.LINEAR)</code>;</li>
<li>创建渲染缓冲区对象: <code>depthBuffer = gl.createRenderbuffer()</code></li>
<li>绑定渲染缓冲区并设置其尺寸：<code>gl.bindRenderbuffer(gl.RENDERBUFFER, depthBuffer); gl.renderbufferStorage(gl.RENDER, gl.DEPTH_COMPONENT16, OFFSCREEn_WIDTH, OFFSCREEN_HEIGHT);</code> 深度关联对象的渲染缓冲区，其宽度和高度必须与作为颜色关联对象的纹理缓冲区一致。</li>
<li>将纹理对象关联到帧缓冲区：<code>gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer)</code>绑定帧缓冲区。<code>gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D,texture,0)</code>关联</li>
<li><p>将渲染缓冲区对象关联到帧缓冲区: <code>gl.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.DEPTH_ATTAACHMENT, gl.RENDERBUFFER, depthBuffer)</code></p>
</li>
<li><p>检查帧缓冲区的配置： <code>gl.checkFramebufferStatus(gl.FRAMEBUFFER)</code>（返回<code>gl.FRAMEBUFFER_COMPLETE</code>表示正确配置）</p>
</li>
<li>在帧缓冲区进行绘图：首先切换目标未帧缓冲区对象fbo，并在其颜色关联对象既在纹理对象上绘制立方体，然后切换绘制目标到canvas在颜色缓冲区绘制矩形同时把上一步在纹理对象中绘制的图像贴到矩形表面。</li>
</ul>
<h2 id="绘制阴影"><a href="#绘制阴影" class="headerlink" title="绘制阴影"></a>绘制阴影</h2><p>绘制过程可以简要概述为：一对着色器用来计算光源到物体的距离，另一对着色器根据一中计算出的距离。使用一张纹理图像把一中结果传入二中，这张纹理图像就被称为阴影贴图（shadow map），而通过阴影贴图实现阴影的方法就是阴影映射（shadow mapping），具体分为两步：</p>
<ol>
<li>将视点移到光源位置处，并运行第一个着色器，这是那些“要被绘制”的片元都是被照射到的，我们并不实际绘制片元，而是将其z值写入阴影贴图。</li>
<li>将视点移回原来位置，运行第二对着色器绘制场景，此时需要计算每个片元在光源坐标系中的坐标，并与阴影贴图中记录的值比较，如果前者大于后者，则说明在阴影中，使用较暗的颜色绘制。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 编程实战 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> WebGL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[参加D2论坛的一二收获想法]]></title>
      <url>https://dsb123dsb.github.io/2017/12/17/%E5%8F%82%E5%8A%A0D2%E8%AE%BA%E5%9D%9B%E7%9A%84%E4%B8%80%E4%BA%8C%E6%94%B6%E8%8E%B7%E6%83%B3%E6%B3%95/</url>
      <content type="html"><![CDATA[<blockquote>
<p>纸上得来终觉浅，绝知此事要躬行</p>
</blockquote>
<p>今年第二次参加D2，相比去年新入行听的们懵懵懂懂，经过一年洗礼，今年听的能有些体会也有选择性的听了一些主题。</p>
<p>前几天参加GDD，谷歌发了Android Things，所以对于<strong>IoT</strong>比较感兴趣，而且也算前端的一个新的方向吧，上午去的比较迟，到的时候已经讲了一部分，讲师对于应用的实现分别用js和java、python都实现了，不过也谈到存在效率问题，实际落地使用的java，动态语言仅仅内部比赛idea时开发，不得不说很遗憾，不论如何重在尝试，希望自己也写个demo出来。</p>
<a id="more"></a>
<p>高性能react同构方案：在SPA时代，同构能够很好弥补客户端渲染不足，提升用户体验，讲师分享了beidou框架，也讲了同构常见的内存泄漏的排查和解决提出cpuProfile，它们自己开发的一个工具。具体性能优化部分就是不断修改代码：插件》prodcution 》缓存》node8》升级react16，应该还有方法记不住了。最后数据很惊人；还提到<strong>智能降级</strong>很感兴趣，查了下就是当流量暴增，接近或超过阈值时，会直接导致服务的RT快速上升。可以实时监测CPU和内存的使用率，超过一定的比例自动降级为客户端渲染，降低服务端压力，CPU和内存恢复常态时，自动切回服务端渲染。最后讲师提到的方法论很有启迪意义：上面提到的优化性能策略很多迟早都会过时，比如react16 ssr重构后，之前的组件级别缓存逻辑不再有效，真正的方法就是我们可以在代码层面定位到底应用慢在那个地方，从而针对性的改进（具体工具方法有点记不清了，回去在看下视频）。</p>
<p>很佩服贺师俊老师的，对于技术的纯粹追求和刨根问题的态度在演讲中表现的淋淋尽致，从Fastify的JSON解析优化快在哪里，到性能的基准测试，console.time由于抢占式多任务系统的测不准，64HZ级数导致的精度15ms，自己有些之前虽然略有了解不过并没有像今天贺老这般带着深入根源。</p>
<p>还有腾讯小伙伴分享的PWA，因为之前在GDD听了很多这方面东西，所以了解较多，但是也有一些新的体会，比如具体缓存设置和service worker的一些细节，但是自己也体验了PWA，感觉体验确实非常好；不过感觉PWA和微信小程序是对立的哈，哈哈</p>
<p>后面对于一些主题也很感兴趣，比如前端监控和http2，不过由于有事只能先走，后面有空去看回放视频吧。</p>
<p>虽然这次被小伙伴放鸽子，自己一个人去，但是看到前端有这么磨多优秀的前辈，也给予我无限前进动力，加油！！！</p>
]]></content>
      
        <categories>
            
            <category> 生活随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> D2 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[css揭秘中的一些技巧]]></title>
      <url>https://dsb123dsb.github.io/2017/11/17/css%E6%8F%AD%E7%A7%98%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<blockquote>
<p>纸上得来终觉浅，绝知此事要躬行</p>
</blockquote>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>看完css揭秘，对表现和结构分离的理解更加深刻，之前写样式只求能做出来，对于结构有多复杂，代码有多冗余，并没有太多考虑，或者心有余而力不足，之前也没有真正认真进阶学习过css，读完此书，css magical不虚此名。</p>
<h1 id="偷师技巧一二"><a href="#偷师技巧一二" class="headerlink" title="偷师技巧一二"></a>偷师技巧一二</h1><p>个人总结了下，让css变得如魔法一般的有以下几个：</p>
<ol>
<li><p>巧用渐变</p>
</li>
<li><p>善用阴影</p>
</li>
<li><p>令人激动的动画和过渡的一些部位常人熟知的属性：<code>animation-play-state;animation-direction;steps()</code></p>
<a id="more"></a>
</li>
</ol>
<h3 id="毛玻璃效果"><a href="#毛玻璃效果" class="headerlink" title="毛玻璃效果"></a>毛玻璃效果</h3><p><strong>要点</strong>：父元素背景，子元素模糊（半透明处理，溢出隐藏，伪元素模糊放filter:blur()在子元素下面，负边距处理边缘）</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Frosted glass effect</span></div><div class="line"><span class="comment"> */</span></div><div class="line"></div><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">	<span class="attribute">min-height</span>: <span class="number">100vh</span>;</div><div class="line">	<span class="attribute">box-sizing</span>: border-box;</div><div class="line">	<span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">	<span class="attribute">padding-top</span>: <span class="built_in">calc</span>(50vh - 6em);</div><div class="line">	<span class="attribute">font</span>: <span class="number">150%</span>/<span class="number">1.6</span> Baskerville, Palatino, serif;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">body</span>, <span class="selector-tag">main</span><span class="selector-pseudo">::before</span> &#123;</div><div class="line">	<span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">"http://csssecrets.io/images/tiger.jpg"</span>) <span class="number">0</span> / cover fixed;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">main</span> &#123;</div><div class="line">	<span class="attribute">position</span>: relative;</div><div class="line">	<span class="attribute">margin</span>: <span class="number">0</span> auto;</div><div class="line">	<span class="attribute">padding</span>: <span class="number">1em</span>;</div><div class="line">	<span class="attribute">max-width</span>: <span class="number">23em</span>;</div><div class="line">	<span class="attribute">background</span>: <span class="built_in">hsla</span>(0,0%,100%,.25) border-box;</div><div class="line">	<span class="attribute">overflow</span>: hidden;</div><div class="line">	<span class="attribute">border-radius</span>: .<span class="number">3em</span>;</div><div class="line">	<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1px</span> <span class="built_in">hsla</span>(0,0%,100%,.3) inset,</div><div class="line">	            <span class="number">0</span> .<span class="number">5em</span> <span class="number">1em</span> <span class="built_in">rgba</span>(0, 0, 0, 0.6);</div><div class="line">	<span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">1px</span> <span class="built_in">hsla</span>(0,0%,100%,.3);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">main</span><span class="selector-pseudo">::before</span> &#123;</div><div class="line">	<span class="attribute">content</span>: <span class="string">''</span>;</div><div class="line">	<span class="attribute">position</span>: absolute;</div><div class="line">	<span class="attribute">top</span>: <span class="number">0</span>; <span class="attribute">right</span>: <span class="number">0</span>; <span class="attribute">bottom</span>: <span class="number">0</span>; <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">	<span class="attribute">margin</span>: -<span class="number">30px</span>;</div><div class="line">	<span class="attribute">z-index</span>: -<span class="number">1</span>;</div><div class="line">	<span class="attribute">-webkit-filter</span>: <span class="built_in">blur</span>(20px);</div><div class="line">	<span class="attribute">filter</span>: <span class="built_in">blur</span>(20px);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">blockquote</span> &#123; <span class="attribute">font-style</span>: italic &#125;</div><div class="line"><span class="selector-tag">blockquote</span> <span class="selector-tag">cite</span> &#123; <span class="attribute">font-style</span>: normal; &#125;</div></pre></td></tr></table></figure>
<h3 id="文本行的斑马纹效果"><a href="#文本行的斑马纹效果" class="headerlink" title="文本行的斑马纹效果"></a>文本行的斑马纹效果</h3><p>斑马纹可以帮助把人们视线保持在长条水平空间内，众所周知表格的斑马纹可使用伪类选择器<code>tr:nth-child(even)</code>实现，文本行的可以使用渐变背景实现</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">padding</span><span class="selector-pseudo">:.5em</span>;</div><div class="line"><span class="selector-tag">line-height</span><span class="selector-pseudo">:1.5em</span>;</div><div class="line"><span class="selector-tag">background</span><span class="selector-pseudo">:beige</span>;</div><div class="line"><span class="selector-tag">background-size</span><span class="selector-pseudo">:auto</span> 3<span class="selector-tag">em</span>;</div><div class="line"><span class="selector-tag">background-origin</span><span class="selector-pseudo">:content-box</span>;<span class="comment">/*背景相对content-box定位，从而保持和文本对齐*/</span></div><div class="line"><span class="selector-tag">background-image</span><span class="selector-pseudo">:linear-gradient(rgba(0</span>,0,0,<span class="selector-class">.2</span>) 50%, <span class="selector-tag">transparent</span> 0);<span class="comment">/*渐变第二个角标中0表示和前面角标的值相同*/</span></div></pre></td></tr></table></figure>
<h3 id="自适应内部元素"><a href="#自适应内部元素" class="headerlink" title="自适应内部元素"></a>自适应内部元素</h3><p>如果不给内部元素制定一个height，他就会自动适应内容高度，而块级元素通常独占一行，如果我们希望它也这样 <code>max-width:min-content；</code></p>
<h3 id="满幅背景"><a href="#满幅背景" class="headerlink" title="满幅背景"></a>满幅背景</h3><p>很多时候我们希望背景满幅，内容定宽</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;!<span class="selector-tag">--1</span><span class="selector-class">.0--</span>&gt;</div><div class="line"><span class="selector-tag">footer</span> &#123;</div><div class="line"><span class="attribute">background</span>: <span class="number">#333</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.wrapper</span> &#123;</div><div class="line"><span class="attribute">max-width</span>: <span class="number">900px</span>;</div><div class="line"><span class="attribute">margin</span>: <span class="number">1em</span> auto;</div><div class="line">&#125;</div><div class="line">&lt;!<span class="selector-tag">--2</span><span class="selector-class">.0--</span>&gt;</div><div class="line"><span class="selector-tag">footer</span> &#123;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">1em</span>;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">1em</span> <span class="built_in">calc</span>(50% - 450px);</div><div class="line">    <span class="attribute">background</span>: <span class="number">#333</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2.0中减少了内层多余的一层结构样式</p>
<h3 id="sticky-footer"><a href="#sticky-footer" class="headerlink" title="sticky-footer"></a>sticky-footer</h3><p>这是一种常见的布局，之前我们会使用计算高度<code>min-height:calc(100vh-footer)</code>,但是每当我们改变页脚尺寸或者折行时就会出现问题；更好的方法是使用flex布局，非footer部分设置<code>flex:1;</code>即可</p>
<h3 id="逐帧动画"><a href="#逐帧动画" class="headerlink" title="逐帧动画"></a>逐帧动画</h3><p><code>animation:loader 1s inifinite steps(8)</code>硬切为8部分，仅用css制作动图（动图切成多帧合并在一幅图上）</p>
<h3 id="闪烁效果"><a href="#闪烁效果" class="headerlink" title="闪烁效果"></a>闪烁效果</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*1.平滑闪烁*/</span></div><div class="line">@<span class="keyword">keyframes</span> blink-smooth &#123;<span class="selector-tag">to</span> &#123;<span class="attribute">color</span>:transparent;&#125;&#125;</div><div class="line"><span class="selector-class">.highlight</span> &#123;</div><div class="line">    <span class="attribute">animation</span>:.<span class="number">5s</span> blink-smooth <span class="number">6</span> alternate;<span class="comment">/*alternate为animation-direction*/</span></div><div class="line">&#125;</div><div class="line"><span class="comment">/*2.普通闪烁*/</span></div><div class="line">@<span class="keyword">keyframes</span> blink &#123;50% &#123;<span class="attribute">color</span>:transparent;&#125;&#125;</div><div class="line"><span class="selector-class">.highlight</span> &#123;</div><div class="line">    <span class="attribute">animation</span>:<span class="number">1s</span> blink <span class="number">3</span> <span class="built_in">steps</span>(1);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="状态平稳动画"><a href="#状态平稳动画" class="headerlink" title="状态平稳动画"></a>状态平稳动画</h3><p>有一些动画，比如交互性的：鼠标hover时动画，离开终止，我们希望动画暂停而不是突兀切回初始状态，可使用<code>animation-play-state:pause/running;</code>控制</p>
<h3 id="打字效果"><a href="#打字效果" class="headerlink" title="打字效果"></a>打字效果</h3><p>利用动画逐渐增加文本宽度</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">keyframes</span> typing &#123;</div><div class="line">    <span class="selector-tag">from</span> &#123; <span class="attribute">width</span>: <span class="number">0</span> &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">keyframes</span> caret &#123;</div><div class="line">    50% &#123; <span class="attribute">border-color</span>: transparent; &#125;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">h1</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">15ch</span>; <span class="comment">/* 文本的宽度 可能有兼容问题，可设置固定来优雅回退*/</span></div><div class="line">    <span class="attribute">overflow</span>: hidden;</div><div class="line">    <span class="attribute">white-space</span>: nowrap;</div><div class="line">    <span class="attribute">border-right</span>: .<span class="number">05em</span> solid;</div><div class="line">    <span class="attribute">animation</span>: typing <span class="number">6s</span> <span class="built_in">steps</span>(15),</div><div class="line">    caret <span class="number">1s</span> <span class="built_in">steps</span>(1) infinite;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//js</span></div><div class="line">$$(<span class="string">'h1'</span>).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">h1</span>) </span>&#123;</div><div class="line"><span class="keyword">var</span> len = h1.textContent.length, s = h1.style;</div><div class="line">s.width = len + <span class="string">'ch'</span>;</div><div class="line">s.animationTimingFunction = <span class="string">"steps("</span>+len+<span class="string">"),steps(1)"</span>;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello awesome css<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h1><p>对css越来越感兴趣，前端的三把利器真是样样都要行，之前很厌烦来回调样式，说到底还是没有好好学习，功夫到了很多样式往往几行代码就能产生魔法般的效果，fighting！！！！！</p>
]]></content>
      
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[http2.0小结]]></title>
      <url>https://dsb123dsb.github.io/2017/10/28/http2-0%E5%B0%8F%E7%BB%93/</url>
      <content type="html"><![CDATA[<blockquote>
<p>纸上得来终觉浅，觉知此事要躬行</p>
</blockquote>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>如今，http1.1是互联网中的主要协议，随着web技术的飞速发展，http1.1已经无法满足用户对性能的要求，此后谷歌推出SPDY,意在解决http1.1中广为人知的性能问题，其在被行业采用并证明能够大幅提升性能后，已经具备了成为一个标准的条件。</p>
<p>Http2.0是http协议自1999年http1.1发布后的首个更新，主要基于SPDY协议，於2015年正式发表。</p>
<h1 id="http2-0变化"><a href="#http2-0变化" class="headerlink" title="http2.0变化"></a>http2.0变化</h1><h2 id="二进制分帧"><a href="#二进制分帧" class="headerlink" title="二进制分帧"></a>二进制分帧</h2><p>帧：http2.0数据通信的最小单位。</p>
<p>消息（message）：指http2.0中逻辑上的http消息。例如请求和响应，消息由一个或多个帧组成。</p>
<p>流：存在于连接中的一个虚拟通道。流可以承载双向消息，每个流都有一个唯一的证书ID。</p>
<p>http2.0采用二进制格式传输数据，而非http1x的文本格式，二进制协议解析起来更高效。</p>
<p>Http1.x的请求和响应报文，都是起始行，首部和整体正文（可选）组成，各部分之间以文本换行符分隔。http2.0将请求和响应数据分割为更小的帧，并且它们采用二进制编码。</p>
<p>http2.0中，同域名下所有通信都在单个连接上完成（多路复用中介绍），这个连接可以承载任意数量数量的双向数据流。每个数据流都以消息的形式发送，而消息又由一个或多个帧组成。多个帧之间可以乱序发送，因为根据帧首部的流标识可以重新组装。</p>
<a id="more"></a>
<h2 id="多路复用"><a href="#多路复用" class="headerlink" title="多路复用"></a>多路复用</h2><p>多路复用，代替原来的序列和阻塞机制。所有的请求都是通过==一个TCP==连接并发完成。</p>
<p>http1.x中，如果想并发多个请求，必须使用多个tcp连接，并且浏览器为了控制资源，还会对单个域名有6-8个数限制，如下图，红色圈出来的请求就因域名链接数超过限制，而被挂起等待了一段时间：</p>
<p><img src="http://blog.upyun.com/wp-content/uploads/2017/03/%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8.png" alt=""></p>
<p>在http2.0中，有了二进制分帧后，就不再依赖TCP连接去实现多流并行了：</p>
<ul>
<li>同域名下所用通信都在单个连接上完成</li>
<li>单个连接可以承载任意数量的双向数据流</li>
<li>数据流以消息的形式发送，而消息又由一个或多个帧组成，多个帧可以乱序发送，因为根据帧首部的流标识可以重新组装</li>
</ul>
<p>这一特性，性能会有极大提升，因为：</p>
<ul>
<li>同个域名下只需要占用一个TCP连接，消除了因多个TCP连接而带来的延时和内存消耗</li>
<li>单个连接上可以并行交错请求和响应，之间互不干扰</li>
<li>在http2.0中，每个请求都可以带一个31bit的优先值，0表示最高优先级，数值越大优先级越低。有了这个优先值，客户端和服务器就可以在处理不同的流时采取不同的策略，以最优的方式发送流、消息和帧</li>
</ul>
<h2 id="服务器推送"><a href="#服务器推送" class="headerlink" title="服务器推送"></a>服务器推送</h2><p>服务端可以在发送页面html时主动推送其它资源，而不用等到浏览器解析到相应位置，发起请求再响应。例如服务端可以主动把js和css文件推送给客户端，而不需要客户端解析html在请求发送这些请求。服务端可以主动送，客户端也有权利选择接收与否，如果服务端推送的资源已经被浏览器缓存过，浏览器可以通过RST_STREAM帧来拒收。主动推送也遵守同源策略，服务端不会随便推送第三方资源给客户端。</p>
<h2 id="头部压缩"><a href="#头部压缩" class="headerlink" title="头部压缩"></a>头部压缩</h2><p>Http1.1请求的大小变得越来越大，有时甚至会大于TCP窗口的初始大小，因为它们需要等待带着ACK的响应回来以后才能继续发送。http2.0对消息头部采用HACK（专门为http2头部设计的压缩格式）进行压缩传输，能够节省消息头占用的网络流量。而http1.x每次请求，都会携带大量冗余头部信息，浪费很多带宽资源，如果算cookie，增加的负荷会达到上千字节，为了减少开销并且提升性能，http2.0会压缩首部元数据。</p>
<ul>
<li>http2.0在客户端和服务端使用“首部表”来跟踪和存储之前发送的键-值对，对于相同的数据，不再通过每次请求和响应发送</li>
<li>首部表在http2.0的连接存续期内始终存在，由客户端和服务端共同渐进的更新</li>
<li>每个新的首部键-值对要么被追加到当前表尾部，要么替换表中之前的值</li>
</ul>
<p>于是，http2.0连接的两端都知道已经发送了那些首部，这些首部的值是什么，从而针对之前的数据至编码发送这些差异的数据。在通信期间几乎不会改变的键值对只需要发送一次即可，这就大大提高了数据的载荷。</p>
<p>头部压缩需要客户端和服务端做好以下工作：</p>
<ul>
<li>维护一份相同的静态字典（Static Table），包含常见的头部名称，以及特别常见的头部名称和值的组合</li>
<li>维护一份相同的动态字典（Dynamic Table），可以动态的添加内容</li>
<li>支持基于静态哈夫曼编码（Huffman Coding）</li>
</ul>
<p>静态字典的作用有两个：</p>
<ol>
<li>对于完全匹配的头部键值对，可以直接使用一个字符表示</li>
<li>对于头部名称可以匹配的键值对，可以将名称使用一个字符表示</li>
</ol>
<p>哈夫曼编码的核心理念就是使用最少的位数表示最多的信息，HTTP2.0中这份哈夫曼编码表是根据一个大样本的HTTP报头的统计数据生成，经常出现的字符会用较短的二进制数标识，出现频率较低的字符用较长的二进制数标识，这样就保证了综合来看报头信息占用了较少的空间，进一步压缩了报头信息。</p>
<p>在服务端接收到压缩过的报头信息后，会先进行哈夫曼编码解码，得到报首信息后，再结合维护的静态字典和动态字典信息得出完整的报首信息，随后进行请求的处理和响应。在需要更新动态字典信息时，对字典进行更新。</p>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>向HTTP2.0的迁移不可能瞬间完成，无论服务器端还是客户端都需要进行必要的更新升级才能使用。好消息是，大多数现代浏览器都内置有高效的后台升级机制，对大多数既有用户来说，这些浏览器可以很快的支持HTTP2.0，不会带来很大困扰。然而，服务器端和中间设备的升级、更新就不是那么容易，是一个长期的过程，而且很费力、费钱。</p>
<p>HTTP1.X至少还会存续十年以上，大多数服务器和客户端在此期间必须同时支持1.x和2.0标准。于是，支持HTTP2.0的客户端在发起新请求之前，必须能发现服务器及中间设备是否支持HTTP2.0协议。</p>
]]></content>
      
        <categories>
            
            <category> 基础杂谈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> http2.0 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>https://dsb123dsb.github.io/2017/10/03/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.<br><a id="more"></a></p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        <categories>
            
            <category> 搭建bog </category>
            
        </categories>
        
        
        <tags>
            
            <tag> initial </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[redux和flux学习]]></title>
      <url>https://dsb123dsb.github.io/2017/09/30/redux%E5%92%8Cflux%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<blockquote>
<p>纸上得来终觉浅，绝知此事要躬行</p>
</blockquote>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>工作虽然一直用react，但是都是现学现用，花了点时间通读《深入react技术栈》，学习笔记略作整理</p>
<p>传统MVC缺点，在项目越来越大，逻辑越来越复杂时，数据流动变的越来越混乱。<br><img src="https://i.imgur.com/oIfBMk2.png" alt=""><br><a id="more"></a></p>
<h1 id="Flux-的解决方案"><a href="#Flux-的解决方案" class="headerlink" title="Flux 的解决方案"></a>Flux 的解决方案</h1><p>Flux 的核心思想就是数据和逻辑永远单向流动。<br><strong>flux数据模型</strong><br><img src="https://i.imgur.com/HtXn7dm.png" alt=""></p>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>一个 Flux 应用由 3 大部分组成——dispatcher、store 和 view，其中 </p>
<ol>
<li>dispatcher 负责分发事件；</li>
<li>store 负责保存数据，同时响应事件并更新数据；</li>
<li>view 负责订阅 store 中的数据，并使用这些数据<br>渲染相应的页面</li>
</ol>
<p><img src="https://i.imgur.com/1IFv9jz.png" alt=""></p>
<h2 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h2><ol>
<li>Flux 的中心化控制。让所有的请求与改变都只能通过 action 发出，统一由 dispatcher 来分配。<ul>
<li>View 可以保持高度简洁，它不需要关心太多的逻辑，只需要关心传入的数据；</li>
<li>中心化还控制了所有数据，发生问题时可以方便查询。比起 MVC 架构下数据或逻<br>辑的改动可能来自多个完全不同的源头，Flux 架构追查问题的复杂度和困难度显然要小得多。</li>
</ul>
</li>
<li>Flux 把 action 做了统一归纳，提高了系统抽象程度。不论 action 是由用户触发的，从服务端发起的，还是应用本身的行为，对于我们而言，它都只是一个动作而已。与 MVC 架构下<br>不同的触发方式管理混乱相比，Flux 要优雅许多。<h2 id="flux不足"><a href="#flux不足" class="headerlink" title="flux不足"></a>flux不足</h2></li>
<li>Flux 的冗余代码太多，Flux 源码中几乎只有 dispatcher的实现，但是在每个应用中都需要手动创建一个 dispatcher 的示例</li>
<li>Flux 给开发者提供的还是它的思想。Flux 在很大程度上是一种很松散的设计约定，不同的开发者对 Flux 都会有自己的理解<h1 id="redux"><a href="#redux" class="headerlink" title="redux"></a>redux</h1><h2 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h2>Redux 参考了 Flux 的设计，但是对 Flux 许多冗余的部分（如 dispatcher）做了<br>简化，同时将 Elm 语言中函数式编程的思想融合其中。<br><img src="https://i.imgur.com/OzoHXun.png" alt=""><h2 id="Redux-三大原则"><a href="#Redux-三大原则" class="headerlink" title="Redux 三大原则"></a>Redux 三大原则</h2></li>
<li>单一数据源。 <ul>
<li>整个应用状态都保存在一个对象中，可以提取出整个应用的状态进行持久化（比如实现一个针对整个应用的即时保存功能）</li>
<li>也为服务端渲染提供了可能。</li>
</ul>
</li>
<li>状态是只读的。<ul>
<li>在 Redux 中不会定义一个 store，而是定义一个 reducer，它的功能是根据当前触发的 action 对当前应用的状态（state）进行迭代，这里并没有直接修改应用的状态，而是返回了一份全新的状态。</li>
<li>Redux 提供的 createStore 方法会根据reducer 生成 store。</li>
<li>最后，我们可以利用 store. dispatch方法来达到修改状态的目的。</li>
</ul>
</li>
<li>状态修改均由纯函数完成。<ul>
<li>这是Redux 与Flux 在表现上的最大不同。在 Flux 中，在actionCreator 里调用<br>AppDispatcher.dispatch 方法来触发 action，不仅有冗余的代码，而且因为直接修改了 store 中的数据，导致无法保存每次数据变化前后的状态。</li>
<li>在 Redux 里，通过定义 reducer 来确定状态的修改，而每一个 reducer 都是纯函数，这意味着它没有副作用，即接受一定的输入，必定会得到一定的输出。<h1 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h1>这里仅对redux和flux的基本知识进行了总结，redux在大型应用的实现后续学习有了深刻体会在做总结</li>
</ul>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 基础杂谈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> react </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[携程两个月工作小结]]></title>
      <url>https://dsb123dsb.github.io/2017/09/06/%E6%90%BA%E7%A8%8B%E4%B8%A4%E4%B8%AA%E6%9C%88%E5%B7%A5%E4%BD%9C%E5%B0%8F%E7%BB%93/</url>
      <content type="html"><![CDATA[<blockquote>
<p>纸上得来终觉浅，绝知此事要躬行</p>
</blockquote>
<p>时间过的很快 ，需要放慢脚步来丈量，两个月收获很多，也失去不少</p>
<h1 id="工作与收获"><a href="#工作与收获" class="headerlink" title="工作与收获"></a>工作与收获</h1><h2 id="软文大赛"><a href="#软文大赛" class="headerlink" title="软文大赛"></a>软文大赛</h2><p>简单的H5页面展示，之前没学过react，利用这个项目，熟悉了react技术栈，能够使用react进行简单页面开发、代码简化。期间也学习了很多技术，大图片快速加载、图片预占位、scss简化代码等</p>
<h2 id="开通首页兼容性修复"><a href="#开通首页兼容性修复" class="headerlink" title="开通首页兼容性修复"></a>开通首页兼容性修复</h2><p>我们的页面是同时跑在app、微信、和手机浏览器的，发现页面在浏览器会存在拥挤情况，学习了flex布局和hysdk简单使用，使用flex布局使空余空间自动填充，同时考虑在浏览器环境下做专门处理，或者改用滚动布局，思考了很多方案也做了实践</p>
<h2 id="touchable组件和yo-公共样式"><a href="#touchable组件和yo-公共样式" class="headerlink" title="touchable组件和yo-公共样式"></a>touchable组件和yo-公共样式</h2><p>做这个项目进行项目的组件化和代码复用以及组件源码的学习，养成主动进行项目抽离和阅读源码的习惯。<br>我们页面中使用tuchable组件的地方很多未添加按下态或者按下态不一致，我对组件进行了优化，可进行配置。yo提供了很多封装的现成样式，但是我们代码里基本都是自己写的，没有用到yo封装的样式，通过阅读源码，能使用封装的全部使用，减少代码</p>
<h2 id="暂停服务公告"><a href="#暂停服务公告" class="headerlink" title="暂停服务公告"></a>暂停服务公告</h2><p>这是完全自己单独写的组件，学习接口设计，展示后端接口返回数据。<br>动画速度和不同字数的计算关系、动画重绘对滚动框影响、动画进入效果优化，动画播放效果优化、flex布局对offsetWidth影响、react生命周期学习，组件的可配置化<br><a id="more"></a></p>
<h2 id="和第三方app页面交互"><a href="#和第三方app页面交互" class="headerlink" title="和第三方app页面交互"></a>和第三方app页面交互</h2><p>需求是页面需要跳转到另一个页面，然后成功 完成任务后回来，我们页面根据回传参数进行下一步处理，hysdk的学习，app内使用openWebview，期间遇到不同版本app的兼容、h5内直接更换loaction.href, 第三方app通过closeWebview关闭，并且透传参数，通过onreceiveData接收参数，期间调试涉及方面较多，交互逻辑也比较复杂，踩了很多坑。</p>
<h1 id="后面"><a href="#后面" class="headerlink" title="后面"></a>后面</h1><p>回来需要更加努力学习，基础知识再温习一遍，然后主攻react（进阶知识，高阶组件，redux，源码等）和css，Es6也要温习（promise等）</p>
]]></content>
      
        <categories>
            
            <category> 生活随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[携程实习小结]]></title>
      <url>https://dsb123dsb.github.io/2017/07/30/%E6%90%BA%E7%A8%8B%E5%AE%9E%E4%B9%A0%E5%B0%8F%E7%BB%93/</url>
      <content type="html"><![CDATA[<blockquote>
<p>纸上得来终觉浅，绝知此事要躬行</p>
</blockquote>
<p>实习后公司学校事情都很多，好久没写点东西，不知不觉月底了，是回顾下总结然后继续去前行的时刻了。</p>
<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><p>本来冲着携程性价比高，不加班来的，事情总是事与愿违，本部门加班简直了，不过还是很高兴学习到了很多哦东西。之前创业公司实习东西要能做出来，后面出问题再改，这里无论是步骤还是流程都更加规范和严格，每次师傅给我review代码都要脱一层皮，感觉自己写的是一坨屎，然后还要和测试review代码，我想象review才是提高和发现错误的契机吧，听闻其他有些部门review代码走过场和没有，更坚定自己好好珍惜这一切，累并快乐着。</p>
<p>也参加了携程MIT训练营，见了cto，携程能让去哪的人做cto也让人看到了不断加强自身技术导向的意愿，祝好。一起进来的同事们无论积极主动还能力见识都让人侧目。这大概是我们不断奋力向上攀登的魅力吧。</p>
<h1 id="后面"><a href="#后面" class="headerlink" title="后面"></a>后面</h1><p>很多公司的秋招提前批也开始了，不管未来会不会呆在这里，这是一段美好的旅程，留下一段美好的回忆。</p>
]]></content>
      
        <categories>
            
            <category> 生活随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Flow-JS静态类型检查工具]]></title>
      <url>https://dsb123dsb.github.io/2017/06/25/Flow-JS%E9%9D%99%E6%80%81%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%9F%A5%E5%B7%A5%E5%85%B7/</url>
      <content type="html"><![CDATA[<blockquote>
<p>纸上得来终觉浅，绝知此事要躬行</p>
</blockquote>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近学习vue源码看到下面代码</p>
<p><img src="http://i.imgur.com/iNBVV3k.png" alt=""></p>
<p>心里不由WTF,查了下原来是flow代码,就立马去<a href="https://flow.org/en/docs/" target="_blank" rel="external">官网把flow文档</a>撸了一遍，网上又找了几遍文章，做下总结<br><a id="more"></a></p>
<p>先看下简介</p>
<p><img src="https://segmentfault.com/img/bVH6mL?w=1200&amp;h=675" alt=""></p>
<p>Flow本质上也只是个检查工具，它并不会自动修正代码中的错误，也不会强制说你没按照它的警告消息修正，就不会让你运行程序。当然，并没有要求什么时候一定要用这类的工具，只是这种作法可以让你的代码更具强健性与提高阅读性，也可以直接避去很多不必要的数据类型使用上的问题，这种开发方式目前在许多框架与函数库项目，或是以JavaScript应用为主的开发团队中都已经都是必用工具。</p>
<ul>
<li>由于Flow还是个年轻的项目，问题仍然很多，功能也没你想像中完整，用起来有时候会卡顿是正常的，效能仍须改善。以后用户愈来愈多就会愈作愈好。</li>
<li>Windows平台的支持也是不久前(2016.8)时的事，Flow只支持64位元的作业系统，32位元就不能用了。</li>
<li>如果你是要学或用React或Vue.js等等，Flow是必学的。不管你要用不用，库源码里面都用了。</li>
</ul>
<h1 id="Flow介绍"><a href="#Flow介绍" class="headerlink" title="Flow介绍"></a>Flow介绍</h1><p><a href="https://flowtype.org/" target="_blank" rel="external">Flow</a>是个JavaScript的静态类型检查工具，由Facebook出品的开源码项目，问世只有一年多，是个相当年轻的项目。简单来说，它是对比TypeScript语言的解决方式。</p>
<p>会有这类解决方案，起因是JavaScript是一种弱(动态)数据类型的语言，弱(动态)数据类型代表在代码中，变量或常量会自动依照赋值变更数据类型，而且类型种类也很少，这是直译式脚本语言的常见特性，但有可能是优点也是很大的缺点。优点是容易学习与使用，缺点是像开发者经常会因为赋值或传值的类型错误，造成不如预期的结果。有些时候在使用框架或函数库时，如果没有仔细看文件，亦或是文件写得不清不楚，也容易造成误用的情况。</p>
<p>这个缺点在应用规模化时，会显得更加严重。我们在开发团队的协同时，一般都是用详尽的文字说明，来降低这个问题的发生，但JS语言本身无法有效阻止这些问题。而且说明文件也需要花时间额外编写，其他的开发者阅读也需要花时间。在现今预先编译器流行的年代，像TypeScript这样的强(静态)类的JavaScript超集语言就开始流行，用严格的角度，以JavaScript语言为基底，来重新打造另一套具有强(静态)类型特性的语言，就如同Java或C#这些语言一样，这也是为什么TypeScript称自己是企业级的开发JavaScript解决方案。</p>
<blockquote>
<p>注: 强(静态)类型语言，意思是可以让变量或常量在声明(定义)时，就限制好只能使用哪种类型，之后在使用时如果发生类型不相符时，就会发出错误警告而不能编译。但不只这些，语言本身也会拓展了更多的类型与语法。</p>
</blockquote>
<p>TypeScript自然有它的市场，但它有一些明显的问题，首先是JavaScript开发者需要再进一步学习，内容不少，也有一定陡峭的学习曲线，不过这还算小事情。重大的事情是需要把已经在使用的应用代码，都要整个改用TypeScript代码语法，才能发挥完整的功用。这对很多已经有内部代码库的大型应用开发团队而言，将会是个重大的决定，因为如果不往全面重构的路走，将无法发挥强(静态)类型语言的最大效用。</p>
<p>所以许多现行的开源码函数库或框架，并不会直接使用TypeScript作为代码的语言，另一方面当然因为是TypeScript并非普及到一定程度的语言，社群上有热爱的粉丝也有不是那么支持的反对者。当然，TypeScript也有它的优势，自从TypeScript提出了DefinitelyTyped的解决方式之后，让现有的函数库能额外再定义出里面使用的类型，这也是另一个可以与现有框架与库相整合的方案，这让许多函数库与框架都提交定义档案，提供了另一种选择。另一个优势是，TypeScript也是个活跃的开源码项目，发展到现在也有一段时间，算是逐渐成熟的项目。它的背后有微软公司的支持，在最近发布的知名的、全新打造过的Angular2框架中(由Google主导)，也采用了TypeScript作为基础的开发语言。</p>
<p>现在，Flow提供了另一个新的选项，它是一种强(静态)类型的辅助检查工具。Flow的功能是让现有的JavaScript语法可以事先作类型的声明(定义)，在开发过程中进行自动检查，当然在最后编译时，一样可以用babel工具来移除这些标记。</p>
<p>相较于TypeScript是另外重新制定一套语言，最后再经过编译为JavaScript代码来运行。Flow走的则是非强制与非侵入性的路线。Flow的优点是易学易用，它的学习曲线没有TypeScript来得高，虽然内容也很多，但大概一天之内学个大概，就可以渐进式地开始使用。而且因为Flow从头到尾只是个检查工具，并不是新的程序语言或超集语言，所以它可以与各种现有的JavaScript代码兼容，如果你哪天不想用了，就去除掉标记就是回到原来的代码，没什么负担。当然，Flow的功用可能无法像TypeScript这么全面性，也不可能改变要作某些事情的语法结构。</p>
<p>总结来说，这两种方式的目的是有些相似的，各自有优点也有不足之处，青菜萝卜各有所爱，要选择哪一种方式就看你的选择。</p>
<h1 id="从一个小例子演示"><a href="#从一个小例子演示" class="headerlink" title="从一个小例子演示"></a>从一个小例子演示</h1><p>这种类型不符的情况在代码中非常容易发生，例如以下的例子:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> x + <span class="number">10</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">foo(<span class="string">'Hello!'</span>)</div></pre></td></tr></table></figure></p>
<p>x这个传参，我们在函数声明时希望它是个数字类型，但最后使用调用函数时则用了字符串类型。最后的结果会是什么吗？ “Hello!10”，这是因为加号(+)在JavaScript语言中，除了作为数字的加运算外，也可以当作字符串的连接运算。想当然这并不是我们想要的结果。</p>
<p>聪明如你应该会想要用类型来当传参的识别名，容易一眼看出传参要的是什么类型，像下面这样:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">number</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> number + <span class="number">10</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>但如果在复合类型的情况，例如这个传参的类型可以是数字类型也可以是布尔类型，你又要如何写得清楚？更不用说如果是个复杂的对象类型时，结构又该如何先确定好？另外还有函数的返回类型又该如何来写？</p>
<p>利用Flow类型的定义方式，来解决这个小案例的问题，可以改写为像下面的代码:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// @flow</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x: number</span>): <span class="title">number</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> x + <span class="number">10</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">foo(<span class="string">'hi'</span>)</div></pre></td></tr></table></figure></p>
<p>你有看到在函数的传参，以及函数的圆括号(())后面的两个地方，加了: number标记，这代表这个传参会限定为数字类型，而返回值也只允许是数字类型。</p>
<p>当使用非数字类型的值作为传入值时，就会出现由Flow工具发出的警告消息，像下面这样:</p>
<blockquote>
<p>message: ‘[flow] string (This type is incompatible with number See also: function call)’</p>
</blockquote>
<p>这消息是说，你这函数的传参是string(字符串)类型，与你声明的number(数字)不相符合。</p>
<p>如果是要允许多种类型也是很容易可以加标记的，假使这个函数可以使用布尔与数字类型，但返回可以是数字或字符串，就像下面这样修改过:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// @flow</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x: number | boolean</span>): <span class="title">number</span> | <span class="title">string</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">'number'</span>) &#123;</div><div class="line">    <span class="keyword">return</span> x + <span class="number">10</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="string">'x is boolean'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">foo(<span class="number">1</span>)</div><div class="line">foo(<span class="literal">true</span>)</div><div class="line">foo(<span class="literal">null</span>)  <span class="comment">// 这一行有类型错误消息</span></div></pre></td></tr></table></figure></p>
<p>由上面这个小例子你可以想见，如果在多人协同开发某个有规模的JavaScript应用时，这种类型的输出输入问题就会很常遇见。如果利用Flow工具的检查，可以避免掉许多不必要的类型问题。</p>
<h1 id="真实案例"><a href="#真实案例" class="headerlink" title="真实案例"></a>真实案例</h1><p>可能你会认为Flow工具只能运用在小型代码中，但实际上Facebook会创造出Flow工具，有很大的原因是为了React与React Native。</p>
<p>举一个我最近正在研究的的函数库代码中<a href="https://github.com/facebook/react-native/blob/9ee815f6b52e0c2417c04e5a05e1e31df26daed2/Libraries/NavigationExperimental/NavigationTypeDefinition.js" target="_blank" rel="external">NavigationExperimental</a>(这网址位置有可能会变，因为是直接连到源码里)，这里面就预先声明了所有的对象结构，像下面这样的代码:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> type NavigationGestureDirection = <span class="string">'horizontal'</span> | <span class="string">'vertical'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> type NavigationRoute = &#123;</div><div class="line">  key: string,</div><div class="line">  title?: string</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">export</span> type NavigationState = &#123;</div><div class="line">  index: number,</div><div class="line">  routes: <span class="built_in">Array</span>&lt;NavigationRoute&gt;,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// ...</span></div></pre></td></tr></table></figure></p>
<p>Flow具备有像TypeScript语言中，预先定义对象类型的作用。上面代码的都是这个组件中预先定义的类型，这些类型可以再套用到不同的代码文档之中。</p>
<pre><code>export type NavigationGestureDirection = &apos;horizontal&apos; | &apos;vertical&apos;;
</code></pre><p>上面这行类似于列举(enum)的类型，意思是说要不就是’horizontal’(水平的)，要不然就’vertical’(垂直的)，就这两种字符串值可使用。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> type NavigationRoute = &#123;</div><div class="line">  key: string,</div><div class="line">  title?: string</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>这行里面用了一个问号(?)定义在title属性的后面，这代表这属性是可选的(Optional)，不过你可能会有点搞混，因为问号(?)可以放在两个位置，见下面的例子:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> type Test = &#123;</div><div class="line">  titleOne?: string,</div><div class="line">  titleTwo: ?string</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>titleOne代表的是属性为可自定义的(可有可无)，但一定是字符串类型。titleTwo代表的是类型可自定义，也就是值的部份除了定义的类型，也可以是null或undefined，不过这属性是需要的，而且你一定要给它一个值。好的，这有些太细部了，如果有用到再查手册文档就可以。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">export type NavigationState = &#123;</div><div class="line">  index: number,</div><div class="line">  routes: Array&lt;NavigationRoute&gt;,</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>上面的代码可以看到，只要是声明过的类型(type)，同样可以拿来拿在其他类型中套用，像这里的<code>Array&lt;NavigationRoute&gt;</code>，就是使用了上面已声明的NavigationRoute类型。它是一个数组，里面放的成员是NavigationRoute类型，是个对象的结构。</p>
<p>刚已经有说过Flow工具有很大的原因是为了React与React Native所设计，因为Flow本身就内建对PropTypes的检查功能，也可以正确检查JSX语法，在这篇官方文档中有说明，而这在之后介绍React的文档的例子中就可以看到。</p>
<h1 id="安装与使用"><a href="#安装与使用" class="headerlink" title="安装与使用"></a>安装与使用</h1><p>Flow目前可以支持macOS、Linux(64位元)、Windows(64位元)，你可以从以下的四种安装方式选择其中一种:</p>
<p>直接从Flow的发布页面下载可运行档案，加到计算机中的PATH(路径)，让flow指令可以在命令列窗口访问即可。<br>透过npm安装即可，可以安装在全局(global)或是各别项目中。下面为安装在项目中的指令:</p>
<pre><code>npm install --save-dev flow-bin
</code></pre><p>macOS中可以使用homebrew安装:</p>
<pre><code>brew update
brew install flow
</code></pre><p>透过OCaml OPAM套装管理程序打包与安装，请见<a href="https://github.com/facebook/flow" target="_blank" rel="external">Flow的Github页面</a>。</p>
<h1 id="Flow简单使用三步骤"><a href="#Flow简单使用三步骤" class="headerlink" title="Flow简单使用三步骤"></a>Flow简单使用三步骤</h1><h2 id="第1步-初始化项目"><a href="#第1步-初始化项目" class="headerlink" title="第1步: 初始化项目"></a>第1步: 初始化项目</h2><p>在你的项目根目录的用命令列工具输入下面的指令，这将会创建一个<code>.flowconfig</code>文档，如果这文档已经存在就不需要再进行初始化，这个设置档一样是可以加入自定义的设置值，请参考<a href="https://flowtype.org/docs/advanced-configuration.html" target="_blank" rel="external">Advanced Configuration</a>这里的说明，目前有很多项目里面都已经内附这个设置档，例如一些React的项目:</p>
<pre><code>flow init
</code></pre><h2 id="第2步-在代码文档中加入要作类型检查的注释"><a href="#第2步-在代码文档中加入要作类型检查的注释" class="headerlink" title="第2步: 在代码文档中加入要作类型检查的注释"></a>第2步: 在代码文档中加入要作类型检查的注释</h2><p>一般都在代码档案的最上面一行加入，没加Flow工具是不会进行检查的，有两种格式都可以:</p>
<pre><code>// @flow
</code></pre><p>或</p>
<pre><code>/* @flow */
</code></pre><h2 id="第3步-进行检查"><a href="#第3步-进行检查" class="headerlink" title="第3步: 进行检查"></a>第3步: 进行检查</h2><p>目前支持Flow工具插件的代码编辑工具很多，常见的Atom, Visual Studio Code(VSC), Sublime与WebStorm都有，当有安装搭配代码编辑工具的插件时，编辑工具会辅助显示检查的讯息。不过有时候会有点卡顿的要等一下，因为检查速度还不是那么快。</p>
<p>或是直接用下面的命令列指令来进行检查:</p>
<pre><code>flow check
</code></pre><p>在Visual Studio Code中因为它内建TypeScript与JavaScript的检查功能，如果要使用Flow工具来作类型检查，需要在用户设置中，加上下面这行设置值以免冲突:</p>
<pre><code>&quot;javascript.validate.enable&quot;: false
</code></pre><h1 id="转换-编译-有Flow标记的代码"><a href="#转换-编译-有Flow标记的代码" class="headerlink" title="转换(编译)有Flow标记的代码"></a>转换(编译)有Flow标记的代码</h1><blockquote>
<p>注: 有些脚手架就已经装好与设置好这个babel拓展插件，你不用再多安装了。</p>
</blockquote>
<p>在开发的最后阶段要将原本有使用Flow标记，或是有类型注释的代码，进行清除或转换。转换的工作要使用babel编译器，这也是目前较推荐的方式。</p>
<p>使用babel编译器如果以命令列工具为主，可以使用下面的指令来安装在全局中:</p>
<pre><code>npm install -g babel-cli
</code></pre><p>再来加装额外移除Flow标记的npm套件<code>babel-plugin-transform-flow-strip-types</code>在你的项目中:</p>
<pre><code>npm install --save-dev babel-plugin-transform-flow-strip-types
</code></pre><p>然后创建一个<code>.babelrc</code>设置档案，档案内容如下:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"plugins"</span>: [</div><div class="line">    <span class="string">"transform-flow-strip-types"</span></div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>完成设置后，之后babel在编译时就会一并转换Flow标记。</p>
<p>下面的指令则是直接把src目录的档案编译到dist目录中:</p>
<pre><code>babel src -d dist
</code></pre><p>当然，babel的使用方式不是只有上面说的这种命令列指令，你可以视项目的使用情况来进行设置。</p>
<h1 id="Flow支持的数据类型"><a href="#Flow支持的数据类型" class="headerlink" title="Flow支持的数据类型"></a>Flow支持的数据类型</h1><p>Flow用起来是的确是简单，但里面的内容很多，主要原因是是要看实际不同的使用情况作搭配。JavaScript里面的原始数据类型都有支持，而在函数、对象与一些新的ES6中的类，在搭配使用时就会比较复杂，详细的情况就请到官网文档中观看，以下只能提供一些简单的介绍说明。</p>
<h2 id="原始数据类型"><a href="#原始数据类型" class="headerlink" title="原始数据类型"></a>原始数据类型</h2><p>Flow支持原始数据类型，如下面的列表:</p>
<ul>
<li>boolean</li>
<li>number</li>
<li>string</li>
<li>null</li>
<li>void</li>
</ul>
<p>其中的void类型，它就是JS中的<code>undefined</code>类型。</p>
<p>这里可能要注意的是，在JS中<code>undefined</code>与<code>null</code>的值会相等但类型不同，意思是作值相等比较时，像(<code>undefined == null</code>)时会为<code>true</code>，有时候在一些运行期间的检查时，可能会用值相等比较而不是严格的相等比较，来检查这两个类型的值。</p>
<p>所有的类型都可以使用垂直线符号(|)作为联合使用(也就是 OR 的意思)，例如<code>string | number</code>指的是两种类型其中一种都可使用，这是一种联合的类型，称为”联合(Union)类型”。</p>
<p>最特别的是可选的(Optional)类型的设计，可选类型代表这个变量或常量的值有可能不存在，也就是允许它除了是某个类型的值外，也可以是<code>null</code>或<code>undefined</code>值。要使用可选类型，就是在类型名称定义前加上问号(?)，例如?string这样，下面是一个简单的例子:</p>
<pre><code>let bar: ?string = null
</code></pre><h2 id="字面文字-literal-类型"><a href="#字面文字-literal-类型" class="headerlink" title="字面文字(literal)类型"></a>字面文字(literal)类型</h2><p>字面文字类型指的是以真实值作为数据类型，可用的值有三种，即数字、字符串或布尔值。字面文字类型搭配联合的类型可以作为列举(enums)来使用，例如以下的一个扑克牌的类型例子:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">type Suit =</div><div class="line">  | <span class="string">"Diamonds"</span></div><div class="line">  | <span class="string">"Clubs"</span></div><div class="line">  | <span class="string">"Hearts"</span></div><div class="line">  | <span class="string">"Spades"</span>;</div><div class="line"></div><div class="line">type Rank =</div><div class="line">  | <span class="number">2</span> | <span class="number">3</span> | <span class="number">4</span> | <span class="number">5</span> | <span class="number">6</span> | <span class="number">7</span> | <span class="number">8</span> | <span class="number">9</span> | <span class="number">10</span></div><div class="line">  | <span class="string">"Jack"</span></div><div class="line">  | <span class="string">"Queen"</span></div><div class="line">  | <span class="string">"King"</span></div><div class="line">  | <span class="string">"Ace"</span>;</div><div class="line"></div><div class="line">type Card = &#123;</div><div class="line">  suit: Suit,</div><div class="line">  rank: Rank,</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注: type是Flow中定义类型别名(Type Alias)的关键字，是一种预先声明的类型，这些声明的标记一样只会在开发阶段中使用，最后编译去除。</p>
</blockquote>
<h2 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h2><p>类型别名(Type Alias)提供了可以预先定义与集中代码中所需要的类型，一个简单的例子如下:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">type T = <span class="built_in">Array</span>&lt;string&gt;</div><div class="line"><span class="keyword">var</span> x: T = []</div><div class="line">x[<span class="string">"Hi"</span>] = <span class="number">2</span> <span class="comment">//有Flow警告</span></div></pre></td></tr></table></figure></p>
<p>类型别名(Type Alias)也可以用于复杂的应用情况，详见Flow官网提供的<a href="https://flowtype.org/docs/type-aliases.html" target="_blank" rel="external">Type Aliases</a>内容。</p>
<h2 id="任何的数据类型"><a href="#任何的数据类型" class="headerlink" title="任何的数据类型"></a>任何的数据类型</h2><p>在某一些情况可能不需要定义的太过于严格，或是还在开发中正在调试时，有一种作为渐进的改善代码的类型。</p>
<p>Flow提供了两种特殊的类型可以作为松散的数据类型定义:</p>
<ul>
<li>any: 相当于不检查。既是所有类型的超集(supertype)，也是所有类型的子集(subtype)</li>
<li>mixed: 类似于any是所有类型的超集(supertype)，但不同于any的是，它不是所有类型的子集(subtype)</li>
</ul>
<p><code>mixed</code>是一个特别的类型，中文是混合的意思，<code>mixed</code>算是any的”啰嗦”进化类型。mixed用在函数的输入(传参)与输出(返回)时，会有不一样的状态，例如以下的例子会出现警告:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x: mixed</span>): <span class="title">string</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> x + <span class="string">'10'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">foo(<span class="string">'Hello!'</span>)</div><div class="line">foo(<span class="number">1</span>)</div></pre></td></tr></table></figure></p>
<blockquote>
<p>会出现警告消息如下:<br>[flow] mixed (Cannot be added to string)</p>
</blockquote>
<p>这原因是虽然输入时可以用<code>mixed</code>，但Flow会认为函数中x的值不见得可以与string类型作相加，所以会请求你要在函数中的代码，要加入检查对传入类型在运行期间的类型检查代码，例如像下面修改过才能过关:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x: mixed</span>): <span class="title">string</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">'number'</span> || <span class="keyword">typeof</span> x === <span class="string">'string'</span>) &#123;</div><div class="line">    <span class="keyword">return</span> x + <span class="string">'10'</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Invalid x type'</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">foo(<span class="string">'Hello!'</span>)</div><div class="line">foo(<span class="number">1</span>)</div></pre></td></tr></table></figure></p>
<p><code>mixed</code>虽然”啰嗦”，但它是用来渐进替换any使用的，有时候往往开发者健忘或偷懒没作传入值在运行期间的类型检查，结果后面要花更多的时间才能找出错误点，这个类型的设计大概是为了提早预防这样的情况。</p>
<blockquote>
<p>注: 从上面的例子可以看到Flow除了对类型会作检查外，它也会请求对某些类型需要有动态的检查。在官方的文件可以参考<a href="https://flowtype.org/docs/dynamic-type-tests.html#_" target="_blank" rel="external">Dynamic Type Tests</a>这个章节。</p>
</blockquote>
<h2 id="复合式的数据类型"><a href="#复合式的数据类型" class="headerlink" title="复合式的数据类型"></a>复合式的数据类型</h2><p>数组(Array)</p>
<p>数组类型使用的是<code>Array&lt;T&gt;</code>，例如<code>Array&lt;number&gt;</code>，会限定数组中的值只能使用数字的数据类型。当然你也可以加入埀直线(|)来定义允许多种类型，例如<code>Array&lt;number|string&gt;</code>。</p>
<p>对象(Object)</p>
<p>对象类型会比较麻烦，主要原因是在JavaScript中所有的数据类型大概都可以算是对象，就算是基础数据类型也有对应的包装对象，再加上有个异常的null类型的typeof返回值也是对象。</p>
<p>对象类型在Flow中的使用，基本上要分作两大部份来说明。</p>
<p>第一种是单指Object这个类型，Flow会判断所有的基础数据类<strong>不是</strong>属于这个类型的，以下的例子全部都会有警告:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 以下都有Flow警告</span></div><div class="line"></div><div class="line">(<span class="number">0</span>: <span class="built_in">Object</span>);</div><div class="line">(<span class="string">""</span>: <span class="built_in">Object</span>);</div><div class="line">(<span class="literal">true</span>: <span class="built_in">Object</span>);</div><div class="line">(<span class="literal">null</span>: <span class="built_in">Object</span>);</div><div class="line">(<span class="literal">undefined</span>: <span class="built_in">Object</span>);</div></pre></td></tr></table></figure></p>
<p>其他的复合式数据类型，除了数组之外，都会认为是对象类型。如下面的例子:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(&#123;<span class="attr">foo</span>: <span class="string">"foo"</span>&#125;: <span class="built_in">Object</span>);</div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;: <span class="built_in">Object</span>);</div><div class="line">(<span class="class"><span class="keyword">class</span> </span>&#123;&#125;: <span class="built_in">Object</span>);</div><div class="line">([]: <span class="built_in">Object</span>); <span class="comment">// Flow不认为数组是属于对象</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>注意: 上面有两个特例，<code>typeof null</code>typeof与<code>typeof []</code>都是返回’object’。也就是说在JS的标准定义中，<code>null</code>与<code>数组</code>用``检测都会返回对象类型。所以，Flow工具的检查会与JS预设并不相同，这一点要注意。</p>
<p>注: typeof在Flow中有一些另外的用途，详见Typeof的说明。</p>
</blockquote>
<p>第二种方式是要定义出完整的对象的字面文字结构，像<code>{ x1: T1; x2: T2; x3: T3;}</code>的语法，用这个结构来检查，以下为例子:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> object: &#123;<span class="attr">foo</span>: string, <span class="attr">bar</span>: number&#125; = &#123;<span class="attr">foo</span>: <span class="string">"foo"</span>, <span class="attr">bar</span>: <span class="number">0</span>&#125;;</div><div class="line"></div><div class="line">object.foo = <span class="number">111</span>; <span class="comment">//Flow警告</span></div><div class="line">object.bar = <span class="string">'111'</span>; <span class="comment">//Flow警告</span></div></pre></td></tr></table></figure></p>
<p>函数(Function)</p>
<p>上面已经有看到，函数也属于对象(Object)类型，当然也有自己的<code>Function</code>类型，函数的类型也可以从两大部份来看。</p>
<p>第一是单指<code>Function</code>这个类型，可以用来定义变量或常量的类型。如下面的代码例子:</p>
<pre><code>var anyFunction: Function = () =&gt; {};
</code></pre><p>第二指的是函数中的用法，上面已经有看到函数的输出(返回值)与输入(传参)的用法例子。例如以下的例子:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x: number</span>): <span class="title">number</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> x + <span class="number">10</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>因为函数有很多种不同的使用情况，实际上可能会复杂很多，Flow工具可以支持目前最新的arrow functions、async functions与generator functions，详见<a href="https://flowtype.org/docs/functions.html" target="_blank" rel="external">官方的这篇Functions</a>的说明。</p>
<p>类(Class)</p>
<p>类是ES6(ES2015)中新式的特性，类目前仍然只是原型的语法糖，类本身也属于一种对象(Object)类型。类的使用情况也可能会复杂，尤其是涉及多型与实例的情况，详见Flow网站提供的<a href="https://flowtype.org/docs/classes.html" target="_blank" rel="external">Classes</a>内容。</p>
<h1 id="Flow的现在与未来的发展"><a href="#Flow的现在与未来的发展" class="headerlink" title="Flow的现在与未来的发展"></a>Flow的现在与未来的发展</h1><p>Flow在<a href="https://flowtype.org/blog/2016/10/13/Flow-Typed.html" target="_blank" rel="external">最近的博客</a>中说明引入了<code>flow-typed</code>的函数库定义档(“libdefs”)，在这个Github存储库中将统一存放所有来自社群提供的函数库定义档案。这是一种可以让现有的函数库与框架，预先写出里面使用的类型定义。让项目里面有使用Flow工具与这些函数库，就可以直接使用这些定义档，以此结合现有的函数库与框架来使用。这个作法是参考TypeScript的DefinitelyTyped方式。因为这还是很新的消息(2016.10)，目前加入的函数库还没有太多，不过React周边的一些函数库或组件都已经开始加入，其他常用的像underscore、backbone或lodash也已经有人在提交或维护。</p>
<p>Flow另一个发展会是在开发工具的自动完成功能的改进，因为如果已经能在撰写代码时，就知道变量或常量的类型(静态类型)，那么在自动完成功能中就可以更准确地给出可用的属性或方法。这一个功能在Facebook自家的Nuclide开发工具的Flow说明页中就有看到。Nuclide是基于Atom开发工具之上的工具，计算机硬件如果不够力是跑不动的，而且它稳定性与运行速度都还需要再努力。这大概是未来可见到的一些新趋向。</p>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>本文简单的说明了Flow工具的功能介绍，以及其中的一些简要的内容等等。相信看过后你已经对这个Flow工具有一些认识，相较于T<strong>ypeScript的学习曲线**</strong>，Flow大概是等于不用学**。Flow虽然是一个很新的工具，但相当的有用，建议每个JavaScript开发者都可以试试，一开始不用学太多，大概这篇文档看完就可以开始用了。复杂的地方就再查找官方的文件即可。</p>
<p>对于每个正在使用JS开发稍具规模化的应用，或是开发开源码的函数库或框架的团队来说，让JS具有静态类型特性，是一个很重要而且必要的决定。以我的观察，在网络上一直有很多的超集语言(例如TypeScript)的爱好者，会提出要全面改用TypeScript(或其他超集语言)的声音，例如Vue.js在很早之前就有讨论是不是要全面采用TypeScript的声音。后来Vue.js只有提交TypeScript的<a href="https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/vue" target="_blank" rel="external">DefinitelyTyped</a>文档，但在2.0中则采行了Flow工具。在这篇Vue作者于知乎上发表的: <a href="https://www.zhihu.com/question/46397274" target="_blank" rel="external">Vue 2.0 为什么选用 Flow 进行静态代码检查而不是直接使用 TypeScript？</a>的内容中，你可以看到为何选择Flow的理由，这可能也是整个开发团队所认同的最后结果。作者回答的文中可以总结下面这句话:</p>
<blockquote>
<p>全部换 TS(TypeScript) 成本过高，短期内并不现实。 相比之下 Flow 对于已有的 ES2015 代码的迁入/迁出成本都非常低 … 万一哪天不想用 Flow 了，转一下，就得到符合规范的 ES。<br>总之，Flow提供了另一个选择，要用什么工具就看聪明的你如何选择了。</p>
</blockquote>
<p><a href="https://segmentfault.com/a/1190000008088489?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="external">参考文章地址 https://segmentfault.com/a/1190000008088489?utm_source=tuicool&amp;utm_medium=referral</a></p>
]]></content>
      
        <categories>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> flow </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[浅谈JS实现私有成员]]></title>
      <url>https://dsb123dsb.github.io/2017/06/20/%E6%B5%85%E8%B0%88JS%E5%AE%9E%E7%8E%B0%E7%A7%81%E6%9C%89%E6%88%90%E5%91%98/</url>
      <content type="html"><![CDATA[<blockquote>
<p>纸上得来终觉浅，绝知此事要躬行</p>
</blockquote>
<h1 id="name形式私有"><a href="#name形式私有" class="headerlink" title="_name形式私有"></a>_name形式私有</h1><p>ES6 中有类语法，定义类变得简单了<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(name) &#123;</div><div class="line">        <span class="keyword">this</span>._name = name;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    get name() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._name;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然而，并没有提供私有属性。比如上面的 Person 其实是希望在构造的时候传入 name，之后不允许修改了。不过，由于没有私有属性，所以难免有人会这样干：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Person james = <span class="keyword">new</span> Person(<span class="string">"James"</span>);</div><div class="line">james._name = <span class="string">"Tom"</span>;        <span class="comment">// God Save Me</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h1 id="symbol大法"><a href="#symbol大法" class="headerlink" title="symbol大法"></a>symbol大法</h1><p>不过，如果想定义私有成员，也有变通的方式，比如广为留传的 Symbol 大法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Person = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> _name = <span class="built_in">Symbol</span>();</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">        <span class="keyword">constructor</span>(name) &#123;</div><div class="line">            <span class="keyword">this</span>[_name] = name;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        get name() &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>[_name];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> Person;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure></p>
<p>其实质在于匿名函数中的 Symbol 实例 _name 是局部变量，在外部不可访问。而 Symbol 由于自身的唯一性特点，也没法再造一个相同的出来，所以就模拟出来一个私有成员了。</p>
<h1 id="ES5模拟symbol"><a href="#ES5模拟symbol" class="headerlink" title="ES5模拟symbol"></a>ES5模拟symbol</h1><p>按照此思路，在 ES5 中其实也很容易模拟私有成员。局部变量是很容易做到的，在函数范围内 let 和 var 是一样的效果。问题在于模拟 Symbol 的唯一性。</p>
<p>ES5 没有 Sybmol，属性名称只可能是一个字符串，如果我们能做到这个字符串不可预料，那么就基本达到目标。要达到不可预期，一个随机数基本上就解决了。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Person = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> _name = <span class="string">"00"</span> + <span class="built_in">Math</span>.random();</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>[_name] = name;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="built_in">Object</span>.defineProperty(Person.prototype, <span class="string">"name"</span>, &#123;</div><div class="line">        get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>[_name];</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> Person;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure></p>
<p>如果这个程序在 Web 页面中加载，那么每次刷新页面 _name 的值都会不同，但并不会影响程序的逻辑，外部程序不会出现任何不适。</p>
<h1 id="新提案"><a href="#新提案" class="headerlink" title="新提案"></a>新提案</h1><p>与私有方法一样，ES6 不支持私有属性。目前，<a href="https://github.com/tc39/proposal-class-fields#private-fields" target="_blank" rel="external">有一个提案</a>，为class加了私有属性。方法是在属性名之前，使用#表示。<br><figure class="highlight hs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="type">Point</span> &#123;</span></div><div class="line"><span class="class">  #x;</span></div><div class="line"><span class="class"></span></div><div class="line"><span class="class">  constructor(<span class="title">x</span> = 0) &#123;</span></div><div class="line"><span class="class">    #x = +x; // 写成 this.#x 亦可</span></div><div class="line"><span class="class">  &#125;</span></div><div class="line"><span class="class"></span></div><div class="line"><span class="class">  get x() &#123; return #x &#125;</span></div><div class="line"><span class="class">  set x(<span class="title">value</span>) &#123; #x = +value &#125;</span></div><div class="line"><span class="class">&#125;</span></div></pre></td></tr></table></figure></p>
<p>上面代码中，#x就表示私有属性x，在Point类之外是读取不到这个属性的。还可以看到，私有属性与实例的属性是可以同名的（比如，#x与get x()）。</p>
<p>私有属性可以指定初始值，在构造函数执行时进行初始化。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</div><div class="line">  #x = 0;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    #x; // 0</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>之所以要引入一个新的前缀#表示私有属性，而没有采用private关键字，是因为 JavaScript 是一门动态语言，使用独立的符号似乎是唯一的可靠方法，能够准确地区分一种属性是否为私有属性。另外，Ruby 语言使用@表示私有属性，ES6 没有用这个符号而使用#，是因为@已经被留给了 <code>Decorator</code>。</p>
<p>该提案只规定了私有属性的写法。但是，很自然地，它也可以用来写私有方法。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</div><div class="line">  #a;</div><div class="line">  #b;</div><div class="line">  #sum() &#123; return #a + #b; &#125;</div><div class="line">  printSum() &#123; console.log(#sum()); &#125;</div><div class="line">  constructor(a, b) &#123; #a = a; #b = b; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>与 Symbol 方案相比，ES5模拟Symbol的问题在于这个 _name 的值不会像 Symbol 一样会隐藏起来，在控制台可以用很多种办法把它找出来——当然在调试阶段这样做也没什么不可以。在开发阶段这个值仍然是不可预料的。</p>
<p>对于单个私有属性的情况，有人会找到私有 Key 的规律，比如上面的私有 Key 就是以 “000.” 开始的，遍历对象属性很容易找出来。在多个私有 Key 的情况下，也可以通过一些技术手段来找，比如<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPersonNameKey</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> v = <span class="string">""</span> + <span class="built_in">Math</span>.random();</div><div class="line">    <span class="keyword">var</span> p = <span class="keyword">new</span> Person(v);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> p) &#123;</div><div class="line">        <span class="keyword">if</span> (p[k] === v) &#123;</div><div class="line">            <span class="keyword">return</span> k;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>但这些都是后话，做起来太费劲，一般人不会这么干。何况 Symbol 也是可以遍历的（通过 <code>Object.getOwnPropertySymbols()）</code>，完全可以以同样的方法来获取私有 Key。</p>
<p>参考<a href="https://segmentfault.com/a/1190000003488631" target="_blank" rel="external">https://segmentfault.com/a/1190000003488631
</a></p>
]]></content>
      
        <categories>
            
            <category> 基础杂谈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> symbol </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript 内存泄漏教程]]></title>
      <url>https://dsb123dsb.github.io/2017/06/07/JavaScript-%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<blockquote>
<p>纸上得来终觉浅，绝知此事要躬行</p>
</blockquote>
<p>看到阮一峰一篇关于内存泄漏的文章，发现很全，ES6、node相关也都有,个人收益较大部分是weakmap，weakset部分——————<a href="http://www.ruanyifeng.com/blog/2017/04/memory-leak.html" target="_blank" rel="external">原文猛搓</a></p>
<h1 id="什么是内存泄漏？"><a href="#什么是内存泄漏？" class="headerlink" title="什么是内存泄漏？"></a>什么是内存泄漏？</h1><p>程序的运行需要内存。只要程序提出要求，操作系统或者运行时（runtime）就必须供给内存。</p>
<p>对于持续运行的服务进程（daemon），必须及时释放不再用到的内存。否则，内存占用越来越高，轻则影响系统性能，重则导致进程崩溃。</p>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2017/bg2017041701-1.png" alt=""></p>
<p>不再用到的内存，没有及时释放，就叫做内存泄漏（memory leak）。<br>有些语言（比如 C 语言）必须手动释放内存，程序员负责内存管理。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span> * buffer;</div><div class="line">buffer = (<span class="keyword">char</span>*) <span class="built_in">malloc</span>(<span class="number">42</span>);</div><div class="line"></div><div class="line"><span class="comment">// Do something with buffer</span></div><div class="line"></div><div class="line"><span class="built_in">free</span>(buffer);</div></pre></td></tr></table></figure>
<p>上面是 C 语言代码，<code>malloc</code>方法用来申请内存，使用完毕之后，必须自己用<code>free</code>方法释放内存。<br><a id="more"></a><br>这很麻烦，所以大多数语言提供自动内存管理，减轻程序员的负担，这被称为”垃圾回收机制”（garbage collector）。</p>
<h1 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h1><p>垃圾回收机制怎么知道，哪些内存不再需要呢？</p>
<p>最常使用的方法叫做”<a href="https://en.wikipedia.org/wiki/Reference_counting" target="_blank" rel="external">引用计数</a>“（reference counting）：语言引擎有一张”引用表”，保存了内存里面所有的资源（通常是各种值）的引用次数。如果一个值的引用次数是0，就表示这个值不再用到了，因此可以将这块内存释放。</p>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2017/bg2017041703.png" alt=""></p>
<p>上图中，左下角的两个值，没有任何引用，所以可以释放。</p>
<p>如果一个值不再需要了，引用数却不为0，垃圾回收机制无法释放这块内存，从而导致内存泄漏。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'hello world'</span>);</div></pre></td></tr></table></figure>
<p>上面代码中，数组<code>[1, 2, 3, 4]</code>是一个值，会占用内存。变量arr是仅有的对这个值的引用，因此引用次数为1。尽管后面的代码没有用到arr，它还是会持续占用内存。</p>
<p>如果增加一行代码，解除arr对<code>[1, 2, 3, 4]</code>引用，这块内存就可以被垃圾回收机制释放了。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'hello world'</span>);</div><div class="line">arr = <span class="literal">null</span>;</div></pre></td></tr></table></figure></p>
<p>上面代码中，arr重置为<code>null</code>，就解除了对<code>[1, 2, 3, 4]</code>的引用，引用次数变成了0，内存就可以释放出来了。</p>
<p>因此，并不是说有了垃圾回收机制，程序员就轻松了。你还是需要关注内存占用：那些很占空间的值，一旦不再用到，你必须检查是否还存在对它们的引用。如果是的话，就必须手动解除引用。</p>
<h1 id="内存泄漏的识别方法"><a href="#内存泄漏的识别方法" class="headerlink" title="内存泄漏的识别方法"></a>内存泄漏的识别方法</h1><p>怎样可以观察到内存泄漏呢？<br><a href="https://www.toptal.com/nodejs/debugging-memory-leaks-node-js-applications" target="_blank" rel="external">经验法则是</a>，如果连续五次垃圾回收之后，内存占用一次比一次大，就有内存泄漏。这就要求实时查看内存占用。</p>
<h2 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h2><p>Chrome 浏览器查看内存占用，按照以下步骤操作。</p>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2017/bg2017041704.png" alt=""></p>
<ol>
<li>打开开发者工具，选择 Timeline 面板</li>
<li>在顶部的Capture字段里面勾选 Memory</li>
<li>点击左上角的录制按钮。</li>
<li>在页面上进行各种操作，模拟用户的使用情况。</li>
</ol>
<p>一段时间后，点击对话框的 stop 按钮，面板上就会显示这段时间的内存占用情况。</p>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2017/bg2017041705.png" alt=""></p>
<p>反之，就是内存泄漏了。</p>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2017/bg2017041706.png" alt=""></p>
<h1 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h1><p>命令行可以使用 <code>Node</code> 提供的<a href="https://nodejs.org/api/process.html#process_process_memoryusage" target="_blank" rel="external">process.memoryUsage</a>方法。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(process.memoryUsage());</div><div class="line"><span class="comment">// &#123; rss: 27709440,</span></div><div class="line"><span class="comment">//  heapTotal: 5685248,</span></div><div class="line"><span class="comment">//  heapUsed: 3449392,</span></div><div class="line"><span class="comment">//  external: 8772 &#125;</span></div></pre></td></tr></table></figure></p>
<p>process.memoryUsage返回一个对象，包含了 Node 进程的内存占用信息。该对象包含四个字段，单位是字节，<a href="http://stackoverflow.com/questions/12023359/what-do-the-return-values-of-node-js-process-memoryusage-stand-for" target="_blank" rel="external">含义如</a>下。</p>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2017/bg2017041702-1.png" alt=""></p>
<ul>
<li>rss（resident set size）：所有内存占用，包括指令区和堆栈。</li>
<li>heapTotal：”堆”占用的内存，包括用到的和没用到的。</li>
<li>heapUsed：用到的堆的部分。</li>
<li>external： V8 引擎内部的 C++ 对象占用的内存。</li>
</ul>
<p>判断内存泄漏，以<code>heapUsed</code>字段为准</p>
<h1 id="WeakMap"><a href="#WeakMap" class="headerlink" title="WeakMap"></a>WeakMap</h1><p>前面说过，及时清除引用非常重要。但是，你不可能记得那么多，有时候一疏忽就忘了，所以才有那么多内存泄漏。</p>
<p>最好能有一种方法，在新建引用的时候就声明，哪些引用必须手动清除，哪些引用可以忽略不计，当其他引用消失以后，垃圾回收机制就可以释放内存。这样就能大大减轻程序员的负担，你只要清除主要引用就可以了。</p>
<p>ES6 考虑到了这一点，推出了两种新的数据结构：<a href="http://es6.ruanyifeng.com/#docs/set-map#WeakSet" target="_blank" rel="external">WeakSet</a> 和 <a href="http://es6.ruanyifeng.com/#docs/set-map#WeakMap" target="_blank" rel="external">WeakMap</a>。它们对于值的引用都是不计入垃圾回收机制的，所以名字里面才会有一个”Weak”，表示这是弱引用。</p>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2017/bg2017041707.jpg" alt=""></p>
<p>下面以 WeakMap 为例，看看它是怎么解决内存泄漏的。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> wm = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</div><div class="line"></div><div class="line"><span class="keyword">const</span> element = <span class="built_in">document</span>.getElementById(<span class="string">'example'</span>);</div><div class="line"></div><div class="line">wm.set(element, <span class="string">'some information'</span>);</div><div class="line">wm.get(element) <span class="comment">// "some information"</span></div></pre></td></tr></table></figure></p>
<p>上面代码中，先新建一个 <code>Weakmap</code> 实例。然后，将一个 DOM 节点作为键名存入该实例，并将一些附加信息作为键值，一起存放在 WeakMap 里面。这时，WeakMap 里面对<code>element</code>的引用就是弱引用，不会被计入垃圾回收机制。</p>
<p>也就是说，DOM 节点对象的引用计数是1，而不是2。这时，一旦消除对该节点的引用，它占用的内存就会被垃圾回收机制释放。Weakmap 保存的这个键值对，也会自动消失。</p>
<p>基本上，如果你要往对象上添加数据，又不想干扰垃圾回收机制，就可以使用 WeakMap。</p>
<h1 id="WeakMap-示例"><a href="#WeakMap-示例" class="headerlink" title="WeakMap 示例"></a>WeakMap 示例</h1><p>WeakMap 的例子很难演示，因为无法观察它里面的引用会自动消失。此时，其他引用都解除了，已经没有引用指向 WeakMap 的键名了，导致无法证实那个键名是不是存在。</p>
<p>我一直想不出办法，直到有一天贺师俊老师<a href="https://github.com/ruanyf/es6tutorial/issues/362#issuecomment-292109104" target="_blank" rel="external">提示</a>，如果引用所指向的值占用特别多的内存，就可以通过<code>process.memoryUsage</code>方法看出来。</p>
<p>根据这个思路，网友 <a href="https://github.com/ruanyf/es6tutorial/issues/362#issuecomment-292451925" target="_blank" rel="external">vtxf </a>补充了下面的例子。</p>
<p>首先，打开 Node 命令行。</p>
<pre><code>$ node --expose-gc
</code></pre><p>上面代码中，<code>--expose-gc</code>参数表示允许手动执行垃圾回收机制。</p>
<p>然后，执行下面的代码。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 手动执行一次垃圾回收，保证获取的内存使用状态准确</span></div><div class="line">&gt; global.gc(); </div><div class="line"><span class="literal">undefined</span></div><div class="line"></div><div class="line"><span class="comment">// 查看内存占用的初始状态，heapUsed 为 4M 左右</span></div><div class="line">&gt; process.memoryUsage(); </div><div class="line">&#123; <span class="attr">rss</span>: <span class="number">21106688</span>,</div><div class="line">  heapTotal: <span class="number">7376896</span>,</div><div class="line">  heapUsed: <span class="number">4153936</span>,</div><div class="line">  external: <span class="number">9059</span> &#125;</div><div class="line"></div><div class="line">&gt; <span class="keyword">let</span> wm = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</div><div class="line"><span class="literal">undefined</span></div><div class="line"></div><div class="line">&gt; <span class="keyword">let</span> b = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line"><span class="literal">undefined</span></div><div class="line"></div><div class="line">&gt; global.gc();</div><div class="line"><span class="literal">undefined</span></div><div class="line"></div><div class="line"><span class="comment">// 此时，heapUsed 仍然为 4M 左右</span></div><div class="line">&gt; process.memoryUsage(); </div><div class="line">&#123; <span class="attr">rss</span>: <span class="number">20537344</span>,</div><div class="line">  heapTotal: <span class="number">9474048</span>,</div><div class="line">  heapUsed: <span class="number">3967272</span>,</div><div class="line">  external: <span class="number">8993</span> &#125;</div><div class="line"></div><div class="line"><span class="comment">// 在 WeakMap 中添加一个键值对，</span></div><div class="line"><span class="comment">// 键名为对象 b，键值为一个 5*1024*1024 的数组  </span></div><div class="line">&gt; wm.set(b, <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">5</span>*<span class="number">1024</span>*<span class="number">1024</span>));</div><div class="line"><span class="built_in">WeakMap</span> &#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">// 手动执行一次垃圾回收</span></div><div class="line">&gt; global.gc();</div><div class="line"><span class="literal">undefined</span></div><div class="line"></div><div class="line"><span class="comment">// 此时，heapUsed 为 45M 左右</span></div><div class="line">&gt; process.memoryUsage(); </div><div class="line">&#123; <span class="attr">rss</span>: <span class="number">62652416</span>,</div><div class="line">  heapTotal: <span class="number">51437568</span>,</div><div class="line">  heapUsed: <span class="number">45911664</span>,</div><div class="line">  external: <span class="number">8951</span> &#125;</div><div class="line"></div><div class="line"><span class="comment">// 解除对象 b 的引用  </span></div><div class="line">&gt; b = <span class="literal">null</span>;</div><div class="line"><span class="literal">null</span></div><div class="line"></div><div class="line"><span class="comment">// 再次执行垃圾回收</span></div><div class="line">&gt; global.gc();</div><div class="line"><span class="literal">undefined</span></div><div class="line"></div><div class="line"><span class="comment">// 解除 b 的引用以后，heapUsed 变回 4M 左右</span></div><div class="line"><span class="comment">// 说明 WeakMap 中的那个长度为 5*1024*1024 的数组被销毁了</span></div><div class="line">&gt; process.memoryUsage(); </div><div class="line">&#123; <span class="attr">rss</span>: <span class="number">20639744</span>,</div><div class="line">  heapTotal: <span class="number">8425472</span>,</div><div class="line">  heapUsed: <span class="number">3979792</span>,</div><div class="line">  external: <span class="number">8956</span> &#125;</div></pre></td></tr></table></figure></p>
<p>上面代码中，只要外部的引用消失，<code>WeakMap</code> 内部的引用，就会自动被垃圾回收清除。由此可见，有了它的帮助，解决内存泄漏就会简单很多。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul>
<li><a href="https://www.alexkras.com/simple-guide-to-finding-a-javascript-memory-leak-in-node-js/" target="_blank" rel="external">Simple Guide to Finding a JavaScript Memory Leak in Node.js</a></li>
<li><a href="https://www.dynatrace.com/blog/understanding-garbage-collection-and-hunting-memory-leaks-in-node-js/" target="_blank" rel="external">Understanding Garbage Collection and hunting Memory Leaks in Node.js</a></li>
<li><a href="https://www.toptal.com/nodejs/debugging-memory-leaks-node-js-applications" target="_blank" rel="external">Debugging Memory Leaks in Node.js Applications</a></li>
</ul>
<p>(完)</p>
]]></content>
      
        <categories>
            
            <category> 基础杂谈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> 内存泄漏 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue2.17源码学习]]></title>
      <url>https://dsb123dsb.github.io/2017/05/25/Vue2-17%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<blockquote>
<p>纸上得来终觉浅，绝知此事要躬</p>
</blockquote>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前段时间看到尤雨溪推荐了一篇vue源码的文章，自己一直也想研究下源码，这几天抽空看了，<a href="http://hcysun.me/2017/03/03/Vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/" target="_blank" rel="external">原文猛戳</a></p>
<p>原本文章的名字叫做《源码解析》，不过后来想想，还是用“源码学习”来的合适一点，在没有彻底掌握源码中的每一个字母之前，“解析”就有点标题党了。建议在看这篇文章之前，最好打开<code>2.1.7</code>的源码对照着看，这样可能更容易理解。另外本人水平有限，文中有错误或不妥的地方望大家多多指正共同成长。</p>
<p>补充：<code>Vue 2.2</code> 刚刚发布，作为一个系列文章的第一篇，本篇文章主要从Vue代码的组织，Vue构造函数的还原，原型的设计，以及参数选项的处理和已经被写烂了的数据绑定与如何使用 Virtual DOM 更新视图入手。从整体的大方向观察框架，这么看来 <code>V2.1.7</code> 对于理解 <code>V2.2</code>的代码不会有太大的影响。该系列文章的后续文章，都会从最新的源码入手，并对改动的地方做相应的提示。</p>
<p>很久之前写过一篇文章：<a href="http://hcysun.me/2016/04/28/JavaScript%E5%AE%9E%E7%8E%B0MVVM%E4%B9%8B%E6%88%91%E5%B0%B1%E6%98%AF%E6%83%B3%E7%9B%91%E6%B5%8B%E4%B8%80%E4%B8%AA%E6%99%AE%E9%80%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%8F%98%E5%8C%96/" target="_blank" rel="external">JavaScript实现MVVM之我就是想监测一个普通对象的变化</a>，文章开头提到了我写博客的风格，还是那句话，只写努力让小白，甚至是小学生都能看明白的文章。这不免会导致对于某些同学来说这篇文章有些墨迹，所以大家根据自己的喜好，可以详细的看，也可以跳跃着看。<br><a id="more"></a></p>
<h1 id="从了解一个开源项目入手"><a href="#从了解一个开源项目入手" class="headerlink" title="从了解一个开源项目入手"></a>从了解一个开源项目入手</h1><p>要看一个项目的源码，不要一上来就看，先去了解一下项目本身的元数据和依赖，除此之外最好也了解一下 PR 规则，Issue Reporting 规则等等。特别是“前端”开源项目，我们在看源码之前第一个想到的应该是：<code>package.json</code>文件。</p>
<p>在 <code>package.json</code> 文件中，我们最应该关注的就是 <code>scripts</code> 字段和 <code>devDependencies</code> 以及 <code>dependencies</code> 字段，通过 <code>scripts</code> 字段我们可以知道项目中定义的脚本命令，通过 <code>devDependencies</code>和 <code>dependencies</code> 字段我们可以了解项目的依赖情况。</p>
<p>了解了这些之后，如果有依赖我们就 <code>npm install</code> 安装依赖就ok了。</p>
<p>除了 <code>package.json</code> 之外，我们还要阅读项目的贡献规则文档，了解如何开始，一个好的开源项目肯定会包含这部分内容的，Vue也不例外：<a href="https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md" target="_blank" rel="external">https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md</a>，在这个文档里说明了一些行为准则，PR指南，Issue Reporting 指南，Development Setup 以及 项目结构。通过阅读这些内容，我们可以了解项目如何开始，如何开发以及目录的说明，下面是对重要目录和文件的简单介绍，这些内容你都可以去自己阅读获取：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">├── build --------------------------------- 构建相关的文件，一般情况下我们不需要动</div><div class="line">├── dist ---------------------------------- 构建后文件的输出目录</div><div class="line">├── examples ------------------------------ 存放一些使用Vue开发的应用案例</div><div class="line">├── flow ---------------------------------- 类型声明，使用开源项目 [Flow](https://flowtype.org/)</div><div class="line">├── package.json -------------------------- 不解释</div><div class="line">├── test ---------------------------------- 包含所有测试文件</div><div class="line">├── src ----------------------------------- 这个是我们最应该关注的目录，包含了源码</div><div class="line">│   ├── entries --------------------------- 包含了不同的构建或包的入口文件</div><div class="line">│   │   ├── web-runtime.js ---------------- 运行时构建的入口，输出 dist/vue.common.js 文件，不包含模板(template)到render函数的编译器，所以不支持 `template` 选项，我们使用vue默认导出的就是这个运行时的版本。大家使用的时候要注意</div><div class="line">│   │   ├── web-runtime-with-compiler.js -- 独立构建版本的入口，输出 dist/vue.js，它包含模板(template)到render函数的编译器</div><div class="line">│   │   ├── web-compiler.js --------------- vue-template-compiler 包的入口文件</div><div class="line">│   │   ├── web-server-renderer.js -------- vue-server-renderer 包的入口文件</div><div class="line">│   ├── compiler -------------------------- 编译器代码的存放目录，将 template 编译为 render 函数</div><div class="line">│   │   ├── parser ------------------------ 存放将模板字符串转换成元素抽象语法树的代码</div><div class="line">│   │   ├── codegen ----------------------- 存放从抽象语法树(AST)生成render函数的代码</div><div class="line">│   │   ├── optimizer.js ------------------ 分析静态树，优化vdom渲染</div><div class="line">│   ├── core ------------------------------ 存放通用的，平台无关的代码</div><div class="line">│   │   ├── observer ---------------------- 反应系统，包含数据观测的核心代码</div><div class="line">│   │   ├── vdom -------------------------- 包含虚拟DOM创建(creation)和打补丁(patching)的代码</div><div class="line">│   │   ├── instance ---------------------- 包含Vue构造函数设计相关的代码</div><div class="line">│   │   ├── global-api -------------------- 包含给Vue构造函数挂载全局方法(静态方法)或属性的代码</div><div class="line">│   │   ├── components -------------------- 包含抽象出来的通用组件</div><div class="line">│   ├── server ---------------------------- 包含服务端渲染(server-side rendering)的相关代码</div><div class="line">│   ├── platforms ------------------------- 包含平台特有的相关代码</div><div class="line">│   ├── sfc ------------------------------- 包含单文件组件(.vue文件)的解析逻辑，用于vue-template-compiler包</div><div class="line">│   ├── shared ---------------------------- 包含整个代码库通用的代码</div></pre></td></tr></table></figure>
<p>大概了解了重要目录和文件之后，我们就可以查看 <a href="https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md#development-setup" target="_blank" rel="external">Development Setup</a> 中的常用命令部分，来了解如何开始这个项目了，我们可以看到这样的介绍：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"># watch and auto re-build dist/vue.js</div><div class="line">$ npm run dev</div><div class="line"></div><div class="line"># watch and auto re-run unit tests in Chrome</div><div class="line">$ npm run dev:test</div></pre></td></tr></table></figure></p>
<p>现在，我们只需要运行 <code>npm run dev</code> 即可监测文件变化并自动重新构建输出 <code>dist/vue.js</code>，然后运行 <code>npm run dev:test</code> 来测试。不过为了方便，我会在 <code>examples</code> 目录新建一个例子，然后引用 <code>dist/vue.js</code> 这样，我们可以直接拿这个例子一边改Vue源码一边看自己写的代码想怎么玩怎么玩。</p>
<h1 id="看源码的小提示"><a href="#看源码的小提示" class="headerlink" title="看源码的小提示"></a>看源码的小提示</h1><p>在真正步入源码世界之前，我想简单说一说看源码的技巧：<br><em>注重大体框架，从宏观到微观</em></p>
<p>当你看一个项目代码的时候，最好是能找到一条主线，先把大体流程结构摸清楚，再深入到细节，逐项击破，拿Vue举个栗子：假如你已经知道Vue中数据状态改变后会采用virtual DOM的方式更新DOM，这个时候，如果你不了解virtual DOM，那么听我一句“暂且不要去研究内部具体实现，因为这会是你丧失主线”，而你仅仅需要知道virtual DOM分为三个步骤：</p>
<ol>
<li>createElement(): 用 JavaScript对象(虚拟树) 描述 真实DOM对象(真实树)</li>
<li>diff(oldNode, newNode) : 对比新旧两个虚拟树的区别，收集差异</li>
<li>patch() : 将差异应用到真实DOM树</li>
</ol>
<p>有的时候 第二步 可能与 第三步 合并成一步(Vue 中的patch就是这样)，除此之外，还比如 <code>src/compiler/codegen</code> 内的代码，可能你不知道他写了什么，直接去看它会让你很痛苦，但是你只需要知道 codegen 是用来将抽象语法树(AST)生成render函数的就OK了，也就是生成类似下面这样的代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">anonymous</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">with</span>(<span class="keyword">this</span>)&#123;<span class="keyword">return</span> _c(<span class="string">'p'</span>,&#123;<span class="attr">attrs</span>:&#123;<span class="string">"id"</span>:<span class="string">"app"</span>&#125;&#125;,[_v(<span class="string">"\n      "</span>+_s(a)+<span class="string">"\n      "</span>),_c(<span class="string">'my-com'</span>)])&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当我们知道了一个东西存在，且知道它存在的目的，那么我们就很容易抓住这条主线，这个系列的第一篇文章就是围绕大体主线展开的。了解大体之后，我们就知道了每部分内容都是做什么的，比如 codegen 是生成类似上面贴出的代码所示的函数的，那么再去看codegen下的代码时，目的性就会更强，就更容易理解。</p>
<h1 id="Vue-的构造函数是什么样的"><a href="#Vue-的构造函数是什么样的" class="headerlink" title="Vue 的构造函数是什么样的"></a>Vue 的构造函数是什么样的</h1><p>balabala一大堆，开始来干货吧。我们要做的第一件事就是搞清楚 Vue 构造函数到底是什么样子的。<br>我们知道，我们要使用 <code>new</code> 操作符来调用 <code>Vue</code>，那么也就是说 <code>Vue</code> 应该是一个构造函数，所以我们第一件要做的事儿就是把构造函数先扒的一清二楚，如何寻找 <code>Vue</code> 构造函数呢？当然是从 <code>entry</code> 开始啦，还记的我们运行 <code>npm run dev</code> 命令后，会输出 <code>dist/vue.js</code> 吗，那么我们就去看看 <code>npm run dev</code> 干了什么：</p>
<pre><code>&quot;dev&quot;: &quot;TARGET=web-full-dev rollup -w -c build/config.js&quot;,
</code></pre><p>首先将 TARGET 得值设置为 ‘web-full-dev’，然后，然后，然后如果你不了解 rollup 就应该简单去看一下啦……，简单的说就是一个JavaScript模块打包器，你可以把它简单的理解为和 webpack 一样，只不过它有他的优势，比如 Tree-shaking (webpack2也有)，但同样，在某些场景它也有他的劣势。。。废话不多说，其中 <code>-w</code> 就是watch，<code>-c</code> 就是指定配置文件为 <code>build/config.js</code> ，我们打开这个配置文件看一看：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// 引入依赖，定义 banner</span></div><div class="line">...</div><div class="line"></div><div class="line"><span class="comment">// builds 对象</span></div><div class="line"><span class="keyword">const</span> builds = &#123;</div><div class="line">	...</div><div class="line">	<span class="comment">// Runtime+compiler development build (Browser)</span></div><div class="line">	<span class="string">'web-full-dev'</span>: &#123;</div><div class="line">	    entry: path.resolve(__dirname, <span class="string">'../src/entries/web-runtime-with-compiler.js'</span>),</div><div class="line">	    dest: path.resolve(__dirname, <span class="string">'../dist/vue.js'</span>),</div><div class="line">	    format: <span class="string">'umd'</span>,</div><div class="line">	    env: <span class="string">'development'</span>,</div><div class="line">	    alias: &#123; <span class="attr">he</span>: <span class="string">'./entity-decoder'</span> &#125;,</div><div class="line">	    banner</div><div class="line">	&#125;,</div><div class="line">	...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 生成配置的方法</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">genConfig</span>(<span class="params">opts</span>)</span>&#123;</div><div class="line">	...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (process.env.TARGET) &#123;</div><div class="line">  <span class="built_in">module</span>.exports = genConfig(builds[process.env.TARGET])</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  exports.getBuild = <span class="function"><span class="params">name</span> =&gt;</span> genConfig(builds[name])</div><div class="line">  exports.getAllBuilds = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">Object</span>.keys(builds).map(<span class="function"><span class="params">name</span> =&gt;</span> genConfig(builds[name]))</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面的代码是简化过的，当我们运行<code>npm run dev</code> 的时候 <code>process.env.TARGET</code> 的值等于 ‘web-full-dev’，所以</p>
<pre><code>module.exports = genConfig(builds[process.env.TARGET])
</code></pre><p>这句代码相当于：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = genConfig(&#123;</div><div class="line">    entry: path.resolve(__dirname, <span class="string">'../src/entries/web-runtime-with-compiler.js'</span>),</div><div class="line">    dest: path.resolve(__dirname, <span class="string">'../dist/vue.js'</span>),</div><div class="line">    format: <span class="string">'umd'</span>,</div><div class="line">    env: <span class="string">'development'</span>,</div><div class="line">    alias: &#123; <span class="attr">he</span>: <span class="string">'./entity-decoder'</span> &#125;,</div><div class="line">    banner</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>最终，genConfig 函数返回一个 config 对象，这个config对象就是Rollup的配置对象。那么我们就不难看到，入口文件是：</p>
<pre><code>src/entries/web-runtime-with-compiler.js
</code></pre><p>我们打开这个文件，不要忘了我们的主题，我们在寻找Vue构造函数，所以当我们看到这个文件的第一行代码是：</p>
<pre><code>import Vue from &apos;./web-runtime&apos;
</code></pre><p>这个时候，你就应该知道，这个文件暂时与你无缘，你应该打开 <code>web-runtime.js</code>文件，不过当你打开这个文件时，你发现第一行是这样的：</p>
<pre><code>import Vue from &apos;core/index&apos;
</code></pre><p>依照此思路，最终我们寻找到Vue构造函数的位置应该是在 <code>src/core/instance/index.js</code> 文件中，其实我们猜也猜得到，上面介绍目录的时候说过：instance 是存放Vue构造函数设计相关代码的目录。总结一下，我们寻找的过程是这样的：</p>
<p><img src="http://7xlolm.com1.z0.glb.clouddn.com/vueimg2BD0DCC6-D689-4809-93D3-2F979E8F8C0C.png" alt=""></p>
<p>我们回头看一看 <code>src/core/instance/index.js</code> 文件，很简单：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> &#123; initMixin &#125; <span class="keyword">from</span> <span class="string">'./init'</span></div><div class="line"><span class="keyword">import</span> &#123; stateMixin &#125; <span class="keyword">from</span> <span class="string">'./state'</span></div><div class="line"><span class="keyword">import</span> &#123; renderMixin &#125; <span class="keyword">from</span> <span class="string">'./render'</span></div><div class="line"><span class="keyword">import</span> &#123; eventsMixin &#125; <span class="keyword">from</span> <span class="string">'./events'</span></div><div class="line"><span class="keyword">import</span> &#123; lifecycleMixin &#125; <span class="keyword">from</span> <span class="string">'./lifecycle'</span></div><div class="line"><span class="keyword">import</span> &#123; warn &#125; <span class="keyword">from</span> <span class="string">'../util/index'</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Vue</span> (<span class="params">options</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp;</div><div class="line">    !(<span class="keyword">this</span> <span class="keyword">instanceof</span> Vue)) &#123;</div><div class="line">    warn(<span class="string">'Vue is a constructor and should be called with the `new` keyword'</span>)</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">this</span>._init(options)</div><div class="line">&#125;</div><div class="line"></div><div class="line">initMixin(Vue)</div><div class="line">stateMixin(Vue)</div><div class="line">eventsMixin(Vue)</div><div class="line">lifecycleMixin(Vue)</div><div class="line">renderMixin(Vue)</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> Vue</div></pre></td></tr></table></figure></p>
<p>引入依赖，定义 Vue 构造函数，然后以Vue构造函数为参数，调用了五个方法，最后导出 Vue。这五个方法分别来自五个文件：<code>init.js state.js render.js events.js</code> 以及 <code>lifecycle.js</code>。<br>打开这五个文件，找到相应的方法，你会发现，这些方法的作用，就是在 Vue 的原型 prototype 上挂载方法或属性，经历了这五个方法后的Vue会变成这样：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// initMixin(Vue)	src/core/instance/init.js **************************************************</span></div><div class="line">Vue.prototype._init = <span class="function"><span class="keyword">function</span> (<span class="params">options?: Object</span>) </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">// stateMixin(Vue)	src/core/instance/state.js **************************************************</span></div><div class="line">Vue.prototype.$data</div><div class="line">Vue.prototype.$set = set</div><div class="line">Vue.prototype.$<span class="keyword">delete</span> = del</div><div class="line">Vue.prototype.$watch = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">// renderMixin(Vue)	src/core/instance/render.js **************************************************</span></div><div class="line">Vue.prototype.$nextTick = <span class="function"><span class="keyword">function</span> (<span class="params">fn: Function</span>) </span>&#123;&#125;</div><div class="line">Vue.prototype._render = <span class="function"><span class="keyword">function</span> (<span class="params"></span>): <span class="title">VNode</span> </span>&#123;&#125;</div><div class="line">Vue.prototype._s = _toString</div><div class="line">Vue.prototype._v = createTextVNode</div><div class="line">Vue.prototype._n = toNumber</div><div class="line">Vue.prototype._e = createEmptyVNode</div><div class="line">Vue.prototype._q = looseEqual</div><div class="line">Vue.prototype._i = looseIndexOf</div><div class="line">Vue.prototype._m = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">Vue.prototype._o = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">Vue.prototype._f = <span class="function"><span class="keyword">function</span> <span class="title">resolveFilter</span> (<span class="params">id</span>) </span>&#123;&#125;</div><div class="line">Vue.prototype._l = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">Vue.prototype._t = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">Vue.prototype._b = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">Vue.prototype._k = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">// eventsMixin(Vue)	src/core/instance/events.js **************************************************</span></div><div class="line">Vue.prototype.$on = <span class="function"><span class="keyword">function</span> (<span class="params">event: string, fn: Function</span>): <span class="title">Component</span> </span>&#123;&#125;</div><div class="line">Vue.prototype.$once = <span class="function"><span class="keyword">function</span> (<span class="params">event: string, fn: Function</span>): <span class="title">Component</span> </span>&#123;&#125;</div><div class="line">Vue.prototype.$off = <span class="function"><span class="keyword">function</span> (<span class="params">event?: string, fn?: Function</span>): <span class="title">Component</span> </span>&#123;&#125;</div><div class="line">Vue.prototype.$emit = <span class="function"><span class="keyword">function</span> (<span class="params">event: string</span>): <span class="title">Component</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">// lifecycleMixin(Vue)	src/core/instance/lifecycle.js **************************************************</span></div><div class="line">Vue.prototype._mount = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">Vue.prototype._update = <span class="function"><span class="keyword">function</span> (<span class="params">vnode: VNode, hydrating?: boolean</span>) </span>&#123;&#125;</div><div class="line">Vue.prototype._updateFromParent = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">Vue.prototype.$forceUpdate = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</div><div class="line">Vue.prototype.$destroy = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</div></pre></td></tr></table></figure></p>
<p>这样就结束了吗？并没有，根据我们之前寻找 Vue 的路线，这只是刚刚开始，我们追溯路线往回走，那么下一个处理 Vue 构造函数的应该是 <code>src/core/index.js</code> 文件，我们打开它：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'./instance/index'</span></div><div class="line"><span class="keyword">import</span> &#123; initGlobalAPI &#125; <span class="keyword">from</span> <span class="string">'./global-api/index'</span></div><div class="line"><span class="keyword">import</span> &#123; isServerRendering &#125; <span class="keyword">from</span> <span class="string">'core/util/env'</span></div><div class="line"></div><div class="line">initGlobalAPI(Vue)</div><div class="line"></div><div class="line"><span class="built_in">Object</span>.defineProperty(Vue.prototype, <span class="string">'$isServer'</span>, &#123;</div><div class="line">  get: isServerRendering</div><div class="line">&#125;)</div><div class="line"></div><div class="line">Vue.version = <span class="string">'__VERSION__'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> Vue</div></pre></td></tr></table></figure></p>
<p>这个文件也很简单，从 <code>instance/index</code> 中导入已经在原型上挂载了方法和属性后的 Vue，然后导入 <code>initGlobalAPI</code> 和 <code>isServerRendering</code>，之后将Vue作为参数传给 initGlobalAPI ，最后又在 <code>Vue.prototype</code> 上挂载了 <code>$isServer</code> ，在 <code>Vue</code>上挂载了 <code>version</code> 属性。<br><code>initGlobalAPI</code> 的作用是在 <code>Vue</code> 构造函数上挂载静态属性和方法，<code>Vue</code> 在经过 <code>initGlobalAPI</code> 之后，会变成这样：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// src/core/index.js / src/core/global-api/index.js</span></div><div class="line">Vue.config</div><div class="line">Vue.util = util</div><div class="line">Vue.set = set</div><div class="line">Vue.delete = del</div><div class="line">Vue.nextTick = util.nextTick</div><div class="line">Vue.options = &#123;</div><div class="line">    components: &#123;</div><div class="line">        KeepAlive</div><div class="line">    &#125;,</div><div class="line">    directives: &#123;&#125;,</div><div class="line">    filters: &#123;&#125;,</div><div class="line">    _base: Vue</div><div class="line">&#125;</div><div class="line">Vue.use</div><div class="line">Vue.mixin</div><div class="line">Vue.cid = <span class="number">0</span></div><div class="line">Vue.extend</div><div class="line">Vue.component = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">Vue.directive = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">Vue.filter = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"></div><div class="line">Vue.prototype.$isServer</div><div class="line">Vue.version = <span class="string">'__VERSION__'</span></div></pre></td></tr></table></figure></p>
<p>其中，稍微复杂一点的就是 <code>Vue.options</code>，大家稍微分析分析就会知道他的确长成那个样子。下一个就是 <code>web-runtime.js</code> 文件了，<code>web-runtime.js</code> 文件主要做了三件事儿：</p>
<ol>
<li>覆盖 <code>Vue.config</code> 的属性，将其设置为平台特有的一些方法</li>
<li><code>Vue.options.directives</code> 和 <code>Vue.options.components</code> 安装平台特有的指令和组件</li>
<li>在 <code>Vue.prototype</code> 上定义 <code>__patch__</code> 和 <code>$mount</code></li>
</ol>
<p>经过 <code>web-runtime.js</code> 文件之后，<code>Vue</code> 变成下面这个样子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// 安装平台特定的utils</span></div><div class="line">Vue.config.isUnknownElement = isUnknownElement</div><div class="line">Vue.config.isReservedTag = isReservedTag</div><div class="line">Vue.config.getTagNamespace = getTagNamespace</div><div class="line">Vue.config.mustUseProp = mustUseProp</div><div class="line"><span class="comment">// 安装平台特定的 指令 和 组件</span></div><div class="line">Vue.options = &#123;</div><div class="line">    components: &#123;</div><div class="line">        KeepAlive,</div><div class="line">        Transition,</div><div class="line">        TransitionGroup</div><div class="line">    &#125;,</div><div class="line">    directives: &#123;</div><div class="line">        model,</div><div class="line">        show</div><div class="line">    &#125;,</div><div class="line">    filters: &#123;&#125;,</div><div class="line">    _base: Vue</div><div class="line">&#125;</div><div class="line">Vue.prototype.__patch__</div><div class="line">Vue.prototype.$mount</div></pre></td></tr></table></figure></p>
<p>这里大家要注意的是 <code>Vue.options</code> 的变化。另外这里的 <code>$mount</code> 方法很简单：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Vue.prototype.$mount = <span class="function"><span class="keyword">function</span> (<span class="params"></span></span></div><div class="line"><span class="function"><span class="params">  el?: string | Element,</span></span></div><div class="line"><span class="function"><span class="params">  hydrating?: boolean</span></span></div><div class="line"><span class="function"><span class="params"></span>): <span class="title">Component</span> </span>&#123;</div><div class="line">  el = el &amp;&amp; inBrowser ? query(el) : <span class="literal">undefined</span></div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>._mount(el, hydrating)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>首先根据是否是浏览器环境决定要不要 <code>query(el)</code> 获取元素，然后将 <code>el</code> 作为参数传递给 <code>this._mount()</code>。<br>最后一个处理 <code>Vue</code> 的文件就是入口文件 <code>web-runtime-with-compiler.js</code> 了，该文件做了两件事：</p>
<ol>
<li>缓存来自 <code>web-runtime.js</code> 文件的 <code>$mount</code> 函数 <code>const mount = Vue.prototype.$mount</code> 然后覆盖覆盖了 Vue.prototype.$mount</li>
<li>在 <code>Vue</code> 上挂载 <code>compile</code>   <code>Vue.compile = compileToFunctions</code> ,  <code>compileToFunctions</code> 函数的作用，就是将模板 <code>template</code> 编译为<code>render</code>函数。</li>
</ol>
<p>至此，我们算是还原了 Vue 构造函数，总结一下：</p>
<ol>
<li><code>Vue.prototype</code> 下的属性和方法的挂载主要是在 <code>src/core/instance</code> 目录中的代码处理的</li>
<li><code>Vue</code> 下的静态属性和方法的挂载主要是在 <code>src/core/global-api</code> 目录下的代码处理的</li>
<li><code>web-runtime.js</code> 主要是添加web平台特有的配置、组件和指令，<code>web-runtime-with-compiler.js</code> 给<code>Vue</code>的 <code>$mount</code> 方法添加 <code>compiler</code> 编译器，支持 <code>template</code>。</li>
</ol>
<h1 id="一个贯穿始终的例子"><a href="#一个贯穿始终的例子" class="headerlink" title="一个贯穿始终的例子"></a>一个贯穿始终的例子</h1><p>在了解了 <code>Vue</code> 构造函数的设计之后，接下来，我们一个贯穿始终的例子就要登场了，掌声有请：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">let</span> v = <span class="keyword">new</span> Vue(&#123;</div><div class="line">	el: <span class="string">'#app'</span>,</div><div class="line">	data: &#123;</div><div class="line">		a: <span class="number">1</span>,</div><div class="line">		b: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line">	&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>好吧，我承认这段代码你家没满月的孩子都会写了。这段代码就是我们贯穿始终的例子，它就是这篇文章的主线，在后续的讲解中，都会以这段代码为例，当讲到必要的地方，会为其添加选项，比如讲计算属性的时候当然要加上一个 <code>computed</code> 属性了。不过在最开始，我只传递了两个选项 <code>el</code> 以及 <code>data</code>，“我们看看接下来会发生什么，让我们拭目以待“ —- NBA球星在接受采访时最喜欢说这句话。<br><em>当我们按照例子那样编码使用Vue的时候，Vue都做了什么？</em><br>想要知道Vue都干了什么，我们就要找到 Vue 初始化程序，查看 Vue 构造函数：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Vue</span> (<span class="params">options</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp;</div><div class="line">    !(<span class="keyword">this</span> <span class="keyword">instanceof</span> Vue)) &#123;</div><div class="line">    warn(<span class="string">'Vue is a constructor and should be called with the `new` keyword'</span>)</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">this</span>._init(options)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们发现，<code>_init()</code> 方法就是<code>Vue</code>调用的第一个方法，然后将我们的参数 <code>options</code> 透传了过去。在调用 <code>_init()</code> 之前，还做了一个安全模式的处理，告诉开发者必须使用 <code>new</code> 操作符调用 <code>Vue</code>。根据之前我们的整理，<code>_init()</code> 方法应该是在 <code>src/core/instance/init.js</code> 文件中定义的，我们打开这个文件查看 <code>_init()</code> 方法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Vue.prototype._init = <span class="function"><span class="keyword">function</span> (<span class="params">options?: Object</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> vm: Component = <span class="keyword">this</span></div><div class="line">  <span class="comment">// a uid</span></div><div class="line">  vm._uid = uid++</div><div class="line">  <span class="comment">// a flag to avoid this being observed</span></div><div class="line">  vm._isVue = <span class="literal">true</span></div><div class="line">  <span class="comment">// merge options</span></div><div class="line">  <span class="keyword">if</span> (options &amp;&amp; options._isComponent) &#123;</div><div class="line">    <span class="comment">// optimize internal component instantiation</span></div><div class="line">    <span class="comment">// since dynamic options merging is pretty slow, and none of the</span></div><div class="line">    <span class="comment">// internal component options needs special treatment.</span></div><div class="line">    initInternalComponent(vm, options)</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    vm.$options = mergeOptions(</div><div class="line">      resolveConstructorOptions(vm.constructor),</div><div class="line">      options || &#123;&#125;,</div><div class="line">      vm</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">  <span class="comment">/* istanbul ignore else */</span></div><div class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</div><div class="line">    initProxy(vm)</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    vm._renderProxy = vm</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// expose real self</span></div><div class="line">  vm._self = vm</div><div class="line">  initLifecycle(vm)</div><div class="line">  initEvents(vm)</div><div class="line">  callHook(vm, <span class="string">'beforeCreate'</span>)</div><div class="line">  initState(vm)</div><div class="line">  callHook(vm, <span class="string">'created'</span>)</div><div class="line">  initRender(vm)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>_init()</code> 方法在一开始的时候，在 <code>this</code> 对象上定义了两个属性：<code>_uid</code> 和 <code>_isVue</code>，然后判断有没有定义 <code>options._isComponent</code>，在使用 V<code>ue</code> 开发项目的时候，我们是不会使用 <code>_isComponent</code> 选项的，这个选项是 <code>Vue</code> 内部使用的，按照本节开头的例子，这里会走 <code>else</code> 分支，也就是这段代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">vm.$options = mergeOptions(</div><div class="line">  resolveConstructorOptions(vm.constructor),</div><div class="line">  options || &#123;&#125;,</div><div class="line">  vm</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>这样 <code>Vue</code> 第一步所做的事情就来了：<em><span style="color: red">使用策略对象合并参数选项</span></em><br>可以发现，<code>Vue</code>使用 <code>mergeOptions</code> 来处理我们调用Vue时传入的参数选项(options)，然后将返回值赋值给 <code>this.$options (vm === this)</code>，传给 <code>mergeOptions</code> 方法三个参数，我们分别来看一看，首先是：<code>resolveConstructorOptions(vm.constructor)</code>，我们查看一下这个方法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">resolveConstructorOptions</span> (<span class="params">Ctor: Class&lt;Component&gt;</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> options = Ctor.options</div><div class="line">  <span class="keyword">if</span> (Ctor.super) &#123;</div><div class="line">    <span class="keyword">const</span> superOptions = Ctor.super.options</div><div class="line">    <span class="keyword">const</span> cachedSuperOptions = Ctor.superOptions</div><div class="line">    <span class="keyword">const</span> extendOptions = Ctor.extendOptions</div><div class="line">    <span class="keyword">if</span> (superOptions !== cachedSuperOptions) &#123;</div><div class="line">      <span class="comment">// super option changed</span></div><div class="line">      Ctor.superOptions = superOptions</div><div class="line">      extendOptions.render = options.render</div><div class="line">      extendOptions.staticRenderFns = options.staticRenderFns</div><div class="line">      extendOptions._scopeId = options._scopeId</div><div class="line">      options = Ctor.options = mergeOptions(superOptions, extendOptions)</div><div class="line">      <span class="keyword">if</span> (options.name) &#123;</div><div class="line">        options.components[options.name] = Ctor</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> options</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个方法接收一个参数 <code>Ctor</code>，通过传入的 <code>vm.constructor</code> 我们可以知道，其实就是 <code>Vue</code> 构造函数本身。所以下面这句代码：<code>let options = Ctor.options</code>, 相当于：<code>let options = Vue.options</code></p>
<p>大家还记得 <code>Vue.options</code> 吗？在寻找Vue构造函数一节里，我们整理了 <code>Vue.options</code> 应该长成下面这个样子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Vue.options = &#123;</div><div class="line">    components: &#123;</div><div class="line">        KeepAlive,</div><div class="line">        Transition,</div><div class="line">        TransitionGroup</div><div class="line">    &#125;,</div><div class="line">    directives: &#123;</div><div class="line">        model,</div><div class="line">        show</div><div class="line">    &#125;,</div><div class="line">    filters: &#123;&#125;,</div><div class="line">    _base: Vue</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>之后判断是否定义了 <code>Vue.super</code> ，这个是用来处理继承的，我们后续再讲，在本例中，<code>resolveConstructorOption</code>s 方法直接返回了 <code>Vue.options</code>。也就是说，传递给 <code>mergeOptions</code> 方法的第一个参数就是 <code>Vue.options</code>。<br>传给 <code>mergeOptions</code> 方法的第二个参数是我们调用<code>Vue</code>构造函数时的参数选项，第三个参数是 <code>vm</code> 也就是 <code>this</code> 对象，按照本节开头的例子那样使用 <code>Vue</code>，最终运行的代码应该如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">vm.$options = mergeOptions(</div><div class="line"> 	<span class="comment">// Vue.options</span></div><div class="line">   &#123;</div><div class="line">    components: &#123;</div><div class="line">        KeepAlive,</div><div class="line">        Transition,</div><div class="line">        TransitionGroup</div><div class="line">    &#125;,</div><div class="line">    directives: &#123;</div><div class="line">        model,</div><div class="line">        show</div><div class="line">    &#125;,</div><div class="line">    filters: &#123;&#125;,</div><div class="line">    _base: Vue</div><div class="line">&#125;,</div><div class="line"><span class="comment">// 调用Vue构造函数时传入的参数选项 options</span></div><div class="line">   &#123;</div><div class="line">   	el: <span class="string">'#app'</span>,</div><div class="line">	data: &#123;</div><div class="line">		a: <span class="number">1</span>,</div><div class="line">		b: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line">	&#125;</div><div class="line">   &#125;,</div><div class="line">   <span class="comment">// this</span></div><div class="line">   vm</div><div class="line"> )</div></pre></td></tr></table></figure></p>
<p>了解了这些，我们就可以看看 <code>mergeOptions</code> 到底做了些什么了，根据引用寻找到 <code>mergeOptions</code> 应该是在 <code>src/core/util/options.js</code> 文件中定义的。这个文件第一次看可能会头大，下面是我处理后的简略展示，大家看上去应该更容易理解了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">// 1、引用依赖</div><div class="line">import Vue from &apos;../instance/index&apos;</div><div class="line">其他引用...</div><div class="line"></div><div class="line">// 2、合并父子选项值为最终值的策略对象，此时 strats 是一个空对象，因为 config.optionMergeStrategies = Object.create(null)</div><div class="line">const strats = config.optionMergeStrategies</div><div class="line">// 3、在 strats 对象上定义与参数选项名称相同的方法</div><div class="line">strats.el = </div><div class="line">strats.propsData = function (parent, child, vm, key)&#123;&#125;</div><div class="line">strats.data = function (parentVal, childVal, vm)</div><div class="line"></div><div class="line">config._lifecycleHooks.forEach(hook =&gt; &#123;</div><div class="line">  strats[hook] = mergeHook</div><div class="line">&#125;)</div><div class="line"></div><div class="line">config._assetTypes.forEach(function (type) &#123;</div><div class="line">  strats[type + &apos;s&apos;] = mergeAssets</div><div class="line">&#125;)</div><div class="line"></div><div class="line">strats.watch = function (parentVal, childVal)</div><div class="line"></div><div class="line">strats.props =</div><div class="line">strats.methods =</div><div class="line">strats.computed = function (parentVal: ?Object, childVal: ?Object)</div><div class="line">// 默认的合并策略，如果有 `childVal` 则返回 `childVal` 没有则返回 `parentVal`</div><div class="line">const defaultStrat = function (parentVal: any, childVal: any): any &#123;</div><div class="line">  return childVal === undefined</div><div class="line">    ? parentVal</div><div class="line">    : childVal</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 4、mergeOptions 中根据参数选项调用同名的策略方法进行合并处理</div><div class="line">export function mergeOptions (</div><div class="line">  parent: Object,</div><div class="line">  child: Object,</div><div class="line">  vm?: Component</div><div class="line">): Object &#123;</div><div class="line"></div><div class="line">  // 其他代码</div><div class="line">  ...</div><div class="line"></div><div class="line">  const options = &#123;&#125;</div><div class="line">  let key</div><div class="line">  for (key in parent) &#123;</div><div class="line">    mergeField(key)</div><div class="line">  &#125;</div><div class="line">  for (key in child) &#123;</div><div class="line">    if (!hasOwn(parent, key)) &#123;</div><div class="line">      mergeField(key)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  function mergeField (key) &#123;</div><div class="line">    const strat = strats[key] || defaultStrat</div><div class="line">    options[key] = strat(parent[key], child[key], vm, key)</div><div class="line">  &#125;</div><div class="line">  return options</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面的代码中，我省略了一些工具函数，例如 <code>mergeHook</code> 和 <code>mergeAssets</code> 等等，唯一需要注意的是这段代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">config._lifecycleHooks.forEach(<span class="function"><span class="params">hook</span> =&gt;</span> &#123;</div><div class="line">  strats[hook] = mergeHook</div><div class="line">&#125;)</div><div class="line"></div><div class="line">config._assetTypes.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">type</span>) </span>&#123;</div><div class="line">  strats[type + <span class="string">'s'</span>] = mergeAssets</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p><code>config</code> 对象引用自<code>src/core/config.js</code> 文件，最终的结果就是在 <code>strats</code> 下添加了相应的生命周期选项的合并策略函数为 <code>mergeHook</code>，添加指令(<code>directives</code>)、组件(<code>components</code>)、过滤器(<code>filters</code>)等选项的合并策略函数为 <code>mergeAssets</code>。<br>这样看来就清晰多了，拿我们贯穿本文的例子来说：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">let v = new Vue(&#123;</div><div class="line">	el: &apos;#app&apos;,</div><div class="line">	data: &#123;</div><div class="line">		a: 1,</div><div class="line">		b: [1, 2, 3]</div><div class="line">	&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>其中 <code>el</code> 选项会使用 <code>defaultStrat</code> 默认策略函数处理，<code>data</code> 选项则会使用 <code>strats.data</code> 策略函数处理，并且根据 <code>strats.data</code> 中的逻辑，<code>strats.data</code> 方法最终会返回一个函数：<code>mergedInstanceDataFn</code>。<br>这里就不详细的讲解每一个策略函数的内容了，后续都会讲到，这里我们还是抓住主线理清思路为主，只需要知道Vue在处理选项的时候，使用了一个策略对象对父子选项进行合并。并将最终的值赋值给实例下的 <code>$options</code> 属性即：<code>this.$options</code>，那么我们继续查看 <code>_init()</code> 方法在合并完选项之后，又做了什么：<br>合并完选项之后，<code>Vue</code> 第二部做的事情就来了：初始化工作与<code>Vue</code>实例对象的设计<br>前面讲了 <code>Vue</code> 构造函数的设计，并且整理了 Vue原型属性与方法 和 Vue静态属性与方法，而 Vue 实例对象就是通过构造函数创造出来的，让我们来看一看 Vue 实例对象是如何设计的，下面的代码是 <code>_init()</code> 方法合并完选项之后的代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/* istanbul ignore else */</span></div><div class="line">   <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</div><div class="line">     initProxy(vm)</div><div class="line">   &#125; <span class="keyword">else</span> &#123;</div><div class="line">     vm._renderProxy = vm</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">// expose real self</span></div><div class="line">vm._self = vm</div><div class="line">   initLifecycle(vm)</div><div class="line">   initEvents(vm)</div><div class="line">   callHook(vm, <span class="string">'beforeCreate'</span>)</div><div class="line">   initState(vm)</div><div class="line">   callHook(vm, <span class="string">'created'</span>)</div><div class="line">   initRender(vm)</div></pre></td></tr></table></figure></p>
<p>根据上面的代码，在生产环境下会为实例添加两个属性，并且属性值都为实例本身：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">vm._renderProxy = vm</div><div class="line">vm._self = vm</div></pre></td></tr></table></figure></p>
<p>然后，调用了四个 <code>init*</code> 方法分别为：<code>initLifecycle</code>、<code>initEvents</code>、<code>initState</code>、<code>initRender</code>，且在 <code>initState</code> 前后分别回调了生命周期钩子 <code>beforeCreate</code> 和 <code>created</code>，而 <code>initRender</code> 是在 <code>created</code> 钩子执行之后执行的，看到这里，也就明白了为什么 <code>created</code> 的时候不能操作DOM了。因为这个时候还没有渲染真正的DOM元素到文档中。<code>created</code> 仅仅代表数据状态的初始化完成。<br>根据四个 <code>init*</code> 方法的引用关系打开对应的文件查看对应的方法，我们发现，这些方法是在处理Vue实例对象，以及做一些初始化的工作，类似整理Vue构造函数一样，我同样针对Vue实例做了属性和方法的整理，如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// 在 Vue.prototype._init 中添加的属性 		**********************************************************</span></div><div class="line"><span class="keyword">this</span>._uid = uid++</div><div class="line"><span class="keyword">this</span>._isVue = <span class="literal">true</span></div><div class="line"><span class="keyword">this</span>.$options = &#123;</div><div class="line">    components,</div><div class="line">    directives,</div><div class="line">    filters,</div><div class="line">    _base,</div><div class="line">    el,</div><div class="line">    data: mergedInstanceDataFn()</div><div class="line">&#125;</div><div class="line"><span class="keyword">this</span>._renderProxy = <span class="keyword">this</span></div><div class="line"><span class="keyword">this</span>._self = <span class="keyword">this</span></div><div class="line"></div><div class="line"><span class="comment">// 在 initLifecycle 中添加的属性		**********************************************************</span></div><div class="line"><span class="keyword">this</span>.$parent = parent</div><div class="line"><span class="keyword">this</span>.$root = parent ? parent.$root : <span class="keyword">this</span></div><div class="line"> </div><div class="line"><span class="keyword">this</span>.$children = []</div><div class="line"><span class="keyword">this</span>.$refs = &#123;&#125;</div><div class="line"></div><div class="line"><span class="keyword">this</span>._watcher = <span class="literal">null</span></div><div class="line"><span class="keyword">this</span>._inactive = <span class="literal">false</span></div><div class="line"><span class="keyword">this</span>._isMounted = <span class="literal">false</span></div><div class="line"><span class="keyword">this</span>._isDestroyed = <span class="literal">false</span></div><div class="line"><span class="keyword">this</span>._isBeingDestroyed = <span class="literal">false</span></div><div class="line"></div><div class="line"><span class="comment">// 在 initEvents	 中添加的属性	 	**********************************************************</span></div><div class="line"><span class="keyword">this</span>._events = &#123;&#125;</div><div class="line"><span class="keyword">this</span>._updateListeners = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">// 在 initState 中添加的属性		**********************************************************</span></div><div class="line"><span class="keyword">this</span>._watchers = []</div><div class="line">    <span class="comment">// initData</span></div><div class="line">    <span class="keyword">this</span>._data</div><div class="line"></div><div class="line"><span class="comment">// 在 initRender	 中添加的属性 	**********************************************************</span></div><div class="line"><span class="keyword">this</span>.$vnode = <span class="literal">null</span> <span class="comment">// the placeholder node in parent tree</span></div><div class="line"><span class="keyword">this</span>._vnode = <span class="literal">null</span> <span class="comment">// the root of the child tree</span></div><div class="line"><span class="keyword">this</span>._staticTrees = <span class="literal">null</span></div><div class="line"><span class="keyword">this</span>.$slots</div><div class="line"><span class="keyword">this</span>.$scopedSlots</div><div class="line"><span class="keyword">this</span>._c</div><div class="line"><span class="keyword">this</span>.$createElement</div></pre></td></tr></table></figure></p>
<p>以上就是一个Vue实例所包含的属性和方法，除此之外要注意的是，在 <code>initEvents</code> 中除了添加属性之外，如果有 <code>vm.$options._parentListeners</code> 还要调用 <code>vm._updateListeners()</code> 方法，在 <code>initState</code> 中又调用了一些其他<code>init</code>方法，如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">initState</span> (<span class="params">vm: Component</span>) </span>&#123;</div><div class="line">  vm._watchers = []</div><div class="line">  initProps(vm)</div><div class="line">  initMethods(vm)</div><div class="line">  initData(vm)</div><div class="line">  initComputed(vm)</div><div class="line">  initWatch(vm)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最后在 <code>initRender</code> 中如果有 <code>vm.$options.el</code> 还要调用 <code>vm.$mount(vm.$options.el)</code>，如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (vm.$options.el) &#123;</div><div class="line">  vm.$mount(vm.$options.el)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这就是为什么如果不传递 <code>el</code> 选项就需要手动 <code>mount</code> 的原因了。<br>那么我们依照我们本节开头的的例子，以及初始化的先后顺序来逐一看一看都发生了什么。我们将 <code>initState</code> 中的 <code>init*</code> 方法展开来看，执行顺序应该是这样的（从上到下的顺序执行）：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">initLifecycle(vm)</div><div class="line">initEvents(vm)</div><div class="line">callHook(vm, <span class="string">'beforeCreate'</span>)</div><div class="line">initProps(vm)</div><div class="line">initMethods(vm)</div><div class="line">initData(vm)</div><div class="line">initComputed(vm)</div><div class="line">initWatch(vm)</div><div class="line">callHook(vm, <span class="string">'created'</span>)</div><div class="line">initRender(vm)</div></pre></td></tr></table></figure></p>
<p>首先是 <code>initLifecycle</code>，这个函数的作用就是在实例上添加一些属性，然后是 <code>initEvents</code>，由于 <code>vm.$options._parentListeners</code> 的值为 <code>undefined</code> 所以也仅仅是在实例上添加属性， <code>vm._updateListeners(listeners)</code> 并不会执行，由于我们只传递了 <code>el</code> 和 <code>data</code>，所以 <code>initProps</code>、<code>initMethods</code>、<code>initComputed</code>、<code>initWatch</code> 这四个方法什么都不会做，只有 <code>initData</code> 会执行。最后是 <code>initRender</code>，除了在实例上添加一些属性外，由于我们传递了 <code>el</code> 选项，所以会执行 <code>vm.$mount(vm.$options.el)</code>。<br>综上所述：按照我们的例子那样写，初始化工作只包含两个主要内容即：<code>initData</code> 和 <code>initRender</code>。</p>
<h1 id="通过initData看Vue的数据响应系统"><a href="#通过initData看Vue的数据响应系统" class="headerlink" title="通过initData看Vue的数据响应系统"></a>通过initData看Vue的数据响应系统</h1><p>Vue的数据响应系统包含三个部分：<code>Observer</code>、<code>Dep</code>、<code>Watcher</code>。关于数据响应系统的内容真的已经被文章讲烂了，所以我就简单的说一下，力求大家能理解就ok，我们还是先看一下 <code>initData</code> 中的代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">initData</span> (<span class="params">vm: Component</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> data = vm.$options.data</div><div class="line">  data = vm._data = <span class="keyword">typeof</span> data === <span class="string">'function'</span></div><div class="line">    ? data.call(vm)</div><div class="line">    : data || &#123;&#125;</div><div class="line">  <span class="keyword">if</span> (!isPlainObject(data)) &#123;</div><div class="line">    data = &#123;&#125;</div><div class="line">    process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; warn(</div><div class="line">      <span class="string">'data functions should return an object:\n'</span> +</div><div class="line">      <span class="string">'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function'</span>,</div><div class="line">      vm</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// proxy data on instance</span></div><div class="line">  <span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(data)</div><div class="line">  <span class="keyword">const</span> props = vm.$options.props</div><div class="line">  <span class="keyword">let</span> i = keys.length</div><div class="line">  <span class="keyword">while</span> (i--) &#123;</div><div class="line">    <span class="keyword">if</span> (props &amp;&amp; hasOwn(props, keys[i])) &#123;</div><div class="line">      process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; warn(</div><div class="line">        <span class="string">`The data property "<span class="subst">$&#123;keys[i]&#125;</span>" is already declared as a prop. `</span> +</div><div class="line">        <span class="string">`Use prop default value instead.`</span>,</div><div class="line">        vm</div><div class="line">      )</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      proxy(vm, keys[i])</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// observe data</span></div><div class="line">  observe(data)</div><div class="line">  data.__ob__ &amp;&amp; data.__ob__.vmCount++</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>首先，先拿到 <code>data</code> 数据：<code>let data = vm.$options.data</code>，大家还记得此时<code>vm.$options.data</code> 的值应该是通过 <code>mergeOptions</code> 合并处理后的 <code>mergedInstanceDataFn</code> 函数吗？所以在得到 <code>data</code> 后，它又判断了 <code>data</code> 的数据类型是不是 ‘function’，最终的结果是：<code>data</code> 还是我们传入的数据选项的 <code>data</code>，即：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">data: &#123;</div><div class="line">	a: <span class="number">1</span>,</div><div class="line">	b: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后在实例对象上定义 <code>_data</code> 属性，该属性与 <code>data</code> 是相同的引用。<br>然后是一个 <code>while</code> 循环，循环的目的是在实例对象上对数据进行代理，这样我们就能通过 <code>this.a</code> 来访问 <code>data.a</code> 了，代码的处理是在 <code>proxy</code> 函数中，该函数非常简单，仅仅是在实例对象上设置与 <code>data</code> 属性同名的访问器属性，然后使用 <code>_data</code> 做数据劫持，如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">proxy</span> (<span class="params">vm: Component, key: string</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (!isReserved(key)) &#123;</div><div class="line">    <span class="built_in">Object</span>.defineProperty(vm, key, &#123;</div><div class="line">      configurable: <span class="literal">true</span>,</div><div class="line">      enumerable: <span class="literal">true</span>,</div><div class="line">      get: <span class="function"><span class="keyword">function</span> <span class="title">proxyGetter</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> vm._data[key]</div><div class="line">      &#125;,</div><div class="line">      set: <span class="function"><span class="keyword">function</span> <span class="title">proxySetter</span> (<span class="params">val</span>) </span>&#123;</div><div class="line">        vm._data[key] = val</div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>做完数据的代理，就正式进入响应系统，<code>**observe(data)**</code></p>
<p>我们说过，数据响应系统主要包含三部分：<code>Observer</code>、<code>Dep</code>、<code>Watcher</code>，代码分别存放在：<code>observer/index.js</code>、<code>observer/dep.js</code> 以及 <code>observer/watcher.js</code> 文件中，这回我们换一种方式，我们先不看其源码，大家先跟着我的思路来思考，最后回头再去看代码，你会有一种：”奥，不过如此“的感觉。<br>假如，我们有如下代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> data = &#123;</div><div class="line">    a: <span class="number">1</span>,</div><div class="line">    b: &#123;</div><div class="line">        c: <span class="number">2</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">observer(data)</div><div class="line"></div><div class="line"><span class="keyword">new</span> Watch(<span class="string">'a'</span>, () =&gt; &#123;</div><div class="line">    alert(<span class="number">9</span>)</div><div class="line">&#125;)</div><div class="line"><span class="keyword">new</span> Watch(<span class="string">'a'</span>, () =&gt; &#123;</div><div class="line">    alert(<span class="number">90</span>)</div><div class="line">&#125;)</div><div class="line"><span class="keyword">new</span> Watch(<span class="string">'b.c'</span>, () =&gt; &#123;</div><div class="line">    alert(<span class="number">80</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>这段代码目的是，首先定义一个数据对象 <code>data</code>，然后通过 <code>observer</code> 对其进行观测，之后定义了三个观察者，当数据有变化时，执行相应的方法，这个功能使用Vue的实现原来要如何去实现？其实就是在问 <code>observer</code> 怎么写？<code>Watch</code> 构造函数又怎么写？接下来我们逐一实现。<br>首先，<code>observer</code> 的作用是：将数据对象<code>data</code>的属性转换为访问器属性：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span> (data) &#123;</div><div class="line">        <span class="keyword">this</span>.walk(data)</div><div class="line">    &#125;</div><div class="line">    walk (data) &#123;</div><div class="line">        <span class="comment">// 遍历 data 对象属性，调用 defineReactive 方法</span></div><div class="line">        <span class="keyword">let</span> keys = <span class="built_in">Object</span>.keys(data)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; keys.length; i++)&#123;</div><div class="line">            defineReactive(data, keys[i], data[keys[i]])</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// defineReactive方法仅仅将data的属性转换为访问器属性</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span> (<span class="params">data, key, val</span>) </span>&#123;</div><div class="line">	<span class="comment">// 递归观测子属性</span></div><div class="line">    observer(val)</div><div class="line"></div><div class="line">    <span class="built_in">Object</span>.defineProperty(data, key, &#123;</div><div class="line">        enumerable: <span class="literal">true</span>,</div><div class="line">        configurable: <span class="literal">true</span>,</div><div class="line">        get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> val</div><div class="line">        &#125;,</div><div class="line">        set: <span class="function"><span class="keyword">function</span> (<span class="params">newVal</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span>(val === newVal)&#123;</div><div class="line">                <span class="keyword">return</span></div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 对新值进行观测</span></div><div class="line">            observer(newVal)</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// observer 方法首先判断data是不是纯JavaScript对象，如果是，调用 Observer 类进行观测</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">observer</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">Object</span>.prototype.toString.call(data) !== <span class="string">'[object Object]'</span>) &#123;</div><div class="line">        <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">new</span> Observer(data)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面的代码中，我们定义了 <code>observer</code> 方法，该方法检测了数据<code>data</code>是不是纯<code>JavaScript</code>对象，如果是就调用 <code>Observer</code> 类，并将 <code>data</code> 作为参数透传。在 <code>Observer</code> 类中，我们使用 <code>walk</code> 方法对数据<code>data</code>的属性循环调用 <code>defineReactive</code> 方法，<code>defineReactive</code> 方法很简单，仅仅是将数据<code>data</code>的属性转为访问器属性，并对数据进行递归观测，否则只能观测数据data的直属子属性。这样我们的第一步工作就完成了，当我们修改或者获取data属性值的时候，通过 <code>get</code> 和 <code>set</code> 即能获取到通知。<br>我们继续往下看，来看一下 <code>Watch</code>：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Watch(<span class="string">'a'</span>, () =&gt; &#123;</div><div class="line">    alert(<span class="number">9</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>现在的问题是，<code>Watch</code> 要怎么和 <code>observer</code> 关联？？？？？？？我们看看 <code>Watch</code> 它知道些什么，通过上面调用 <code>Watch</code> 的方式，传递给 <code>Watch</code> 两个参数，一个是 ‘a’ 我们可以称其为表达式，另外一个是回调函数。所以我们目前只能写出这样的代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Watch</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span> (exp, fn) &#123;</div><div class="line">        <span class="keyword">this</span>.exp = exp</div><div class="line">        <span class="keyword">this</span>.fn = fn</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>那么要怎么关联呢，大家看下面的代码会发生什么：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Watch</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span> (exp, fn) &#123;</div><div class="line">        <span class="keyword">this</span>.exp = exp</div><div class="line">        <span class="keyword">this</span>.fn = fn</div><div class="line">        data[exp]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>多了一句 <code>data[exp]</code>，这句话是在干什么？是不是在获取 <code>data</code> 下某个属性的值，比如 <code>exp</code> 为 ‘a’ 的话，那么 <code>data[exp]</code> 就相当于在获取 <code>data.a</code>的值，那这会放生什么？大家不要忘了，此时数据 <code>data</code> 下的属性已经是访问器属性了，所以这么做的结果会直接触发对应属性的 <code>get</code> 函数，这样我们就成功的和 <code>observer</code> 产生了关联，但这样还不够，我们还是没有达到目的，不过我们已经无限接近了，我们继续思考看一下可不可以这样：</p>
<blockquote>
<p>既然在 <code>Watch</code> 中对表达式求值，能够触发 <code>observer</code> 的 <code>get</code>，那么可不可以在 <code>get</code> 中收集 <code>Watch</code> 中函数呢？<br>答案是可以的，不过这个时候我们就需要 <code>Dep</code> 出场了，它是一个依赖收集器。我们的思路是：<code>data</code> 下的每一个属性都有一个唯一的 <code>Dep</code> 对象，在 <code>get</code> 中收集仅针对该属性的依赖，然后在 <code>set</code> 方法中触发所有收集的依赖，这样就搞定了，看如下代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dep</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span> () &#123;</div><div class="line">        <span class="keyword">this</span>.subs = []</div><div class="line">    &#125;</div><div class="line">    addSub () &#123;</div><div class="line">        <span class="keyword">this</span>.subs.push(Dep.target)</div><div class="line">    &#125;</div><div class="line">    notify () &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.subs.length; i++)&#123;</div><div class="line">            <span class="keyword">this</span>.subs[i].fn()</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">Dep.target = <span class="literal">null</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">pushTarget</span>(<span class="params">watch</span>)</span>&#123;</div><div class="line">    Dep.target = watch</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Watch</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span> (exp, fn) &#123;</div><div class="line">        <span class="keyword">this</span>.exp = exp</div><div class="line">        <span class="keyword">this</span>.fn = fn</div><div class="line">        pushTarget(<span class="keyword">this</span>)</div><div class="line">        data[exp]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<p>上面的代码中，我们在 <code>Watch</code> 中增加了<code>pushTarget(this)</code>，可以发现，这句代码的作用是将 <code>Dep.target</code> 的值设置为该<code>Watch</code>对象。在 <code>pushTarget</code> 之后我们才对表达式进行求值，接着，我们修改 <code>defineReactive</code> 代码如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span> (<span class="params">data, key, val</span>) </span>&#123;</div><div class="line">    observer(val)</div><div class="line">    <span class="keyword">let</span> dep = <span class="keyword">new</span> Dep()		<span class="comment">// 新增</span></div><div class="line">    <span class="built_in">Object</span>.defineProperty(data, key, &#123;</div><div class="line">        enumerable: <span class="literal">true</span>,</div><div class="line">        configurable: <span class="literal">true</span>,</div><div class="line">        get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            dep.addSub()	<span class="comment">// 新增</span></div><div class="line">            <span class="keyword">return</span> val</div><div class="line">        &#125;,</div><div class="line">        set: <span class="function"><span class="keyword">function</span> (<span class="params">newVal</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span>(val === newVal)&#123;</div><div class="line">                <span class="keyword">return</span></div><div class="line">            &#125;</div><div class="line">            observer(newVal)</div><div class="line">            dep.notify()	<span class="comment">// 新增</span></div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如标注，新增了三句代码，我们知道，<code>Watch</code> 中对表达式求值会触发 <code>get</code> 方法，我们在 <code>get</code> 方法中调用了 <code>dep.addSub</code>，也就执行了这句代码：<code>this.subs.push(Dep.target)</code>，由于在这句代码执行之前，<code>Dep.target</code>的值已经被设置为一个 <code>Watch</code> 对象了，所以最终结果就是收集了一个 <code>Watch</code> 对象，然后在 <code>set</code> 方法中我们调用了 <code>dep.notify</code>，所以当<code>data</code>属性值变化的时候，就会通过 <code>dep.notify</code>循环调用所有收集的<code>Watch</code>对象中的回调函数：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">notify () &#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.subs.length; i++)&#123;</div><div class="line">        <span class="keyword">this</span>.subs[i].fn()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样 <code>observer</code>、<code>Dep</code>、<code>Watch</code> 三者就联系成为一个有机的整体，实现了我们最初的目标，完整的代码可以戳这里：<code>observer-dep-watch</code>。这里还给大家挖了个坑，因为我们没有处理对数组的观测，由于比较复杂并且这又不是我们讨论的重点，如果大家想了解可以戳我的这篇文章：J<code>avaScript</code>实现MVVM之我就是想监测一个普通对象的变化，另外，在 <code>Watch</code> 中对表达式求值的时候也只做了直接子属性的求值，所以如果 <code>exp</code> 的值为 ‘a.b’ 的时候，就不可以用了，Vue的做法是使用 <code>.</code> 分割表达式字符串为数组，然后遍历一下对其进行求值，大家可以查看其源码。如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Parse simple path.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">const</span> bailRE = <span class="regexp">/[^\w.$]/</span></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">parsePath</span> (<span class="params">path: string</span>): <span class="title">any</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span> (bailRE.test(path)) &#123;</div><div class="line">    <span class="keyword">return</span></div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">const</span> segments = path.split(<span class="string">'.'</span>)</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; segments.length; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (!obj) <span class="keyword">return</span></div><div class="line">        obj = obj[segments[i]]</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> obj</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>Vue</code> 的求值代码是在 <code>src/core/util/lang.js</code> 文件中 <code>parsePath</code> 函数中实现的。总结一下Vue的依赖收集过程应该是这样的：</p>
<p><img src="http://7xlolm.com1.z0.glb.clouddn.com/vueimgdep.png" alt=""></p>
<p>实际上，<code>Vue</code>并没有直接在 <code>get</code> 中调用 <code>addSub</code>，而是调用的 <code>dep.depend</code>，目的是将当前的 <code>dep</code> 对象收集到 <code>watch</code> 对象中，如果要完整的流程，应该是这样的：（大家注意数据的每一个字段都拥有自己的 <code>dep</code> 对象和 <code>get</code> 方法。）</p>
<p><img src="http://7xlolm.com1.z0.glb.clouddn.com/all.png" alt=""></p>
<p>这样 <code>Vue</code> 就建立了一套数据响应系统，之前我们说过，按照我们的例子那样写，初始化工作只包含两个主要内容即：<code>initData</code> 和 <code>initRender</code>。现在 <code>initData</code> 我们分析完了，接下来看一看 <code>initRender</code></p>
<h1 id="通过initRender看Vue的-render-渲染-与-re-render-重新渲染"><a href="#通过initRender看Vue的-render-渲染-与-re-render-重新渲染" class="headerlink" title="通过initRender看Vue的 render(渲染) 与 re-render(重新渲染)"></a>通过initRender看Vue的 render(渲染) 与 re-render(重新渲染)</h1><p>在 <code>initRender</code> 方法中，因为我们的例子中传递了 <code>el</code> 选项，所以下面的代码会执行：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (vm.$options.el) &#123;</div><div class="line">  vm.$mount(vm.$options.el)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里，调用了 <code>$mount</code> 方法，在还原Vue构造函数的时候，我们整理过所有的方法，其中 <code>$mount</code> 方法在两个地方出现过：</p>
<ol>
<li>在 <code>web-runtime.js</code> 文件中：<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Vue.prototype.$mount = <span class="function"><span class="keyword">function</span> (<span class="params"></span></span></div><div class="line"><span class="function"><span class="params">  el?: string | Element,</span></span></div><div class="line"><span class="function"><span class="params">  hydrating?: boolean</span></span></div><div class="line"><span class="function"><span class="params"></span>): <span class="title">Component</span> </span>&#123;</div><div class="line">  el = el &amp;&amp; inBrowser ? query(el) : <span class="literal">undefined</span></div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>._mount(el, hydrating)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>它的作用是通过 <code>el</code> 获取相应的DOM元素，然后调用<code>lifecycle.js</code> 文件中的 <code>_mount</code> 方法。</p>
<ol>
<li>在 <code>web-runtime-with-compiler.js</code> 文件中：<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// 缓存了来自 web-runtime.js 的 $mount 方法</span></div><div class="line"><span class="keyword">const</span> mount = Vue.prototype.$mount</div><div class="line"><span class="comment">// 重写 $mount 方法</span></div><div class="line">Vue.prototype.$mount = <span class="function"><span class="keyword">function</span> (<span class="params"></span></span></div><div class="line"><span class="function"><span class="params">  el?: string | Element,</span></span></div><div class="line"><span class="function"><span class="params">  hydrating?: boolean</span></span></div><div class="line"><span class="function"><span class="params"></span>): <span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="comment">// 根据 el 获取相应的DOM元素</span></div><div class="line">  el = el &amp;&amp; query(el)</div><div class="line">  <span class="comment">// 不允许你将 el 挂载到 html 标签或者 body 标签</span></div><div class="line">  <span class="keyword">if</span> (el === <span class="built_in">document</span>.body || el === <span class="built_in">document</span>.documentElement) &#123;</div><div class="line">    process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; warn(</div><div class="line">      <span class="string">`Do not mount Vue to &lt;html&gt; or &lt;body&gt; - mount to normal elements instead.`</span></div><div class="line">    )</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">const</span> options = <span class="keyword">this</span>.$options</div><div class="line">  <span class="comment">// 如果我们没有写 render 选项，那么就尝试将 template 或者 el 转化为 render 函数</span></div><div class="line">  <span class="keyword">if</span> (!options.render) &#123;</div><div class="line">    <span class="keyword">let</span> template = options.template</div><div class="line">    <span class="keyword">if</span> (template) &#123;</div><div class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> template === <span class="string">'string'</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (template.charAt(<span class="number">0</span>) === <span class="string">'#'</span>) &#123;</div><div class="line">          template = idToTemplate(template)</div><div class="line">          <span class="comment">/* istanbul ignore if */</span></div><div class="line">          <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; !template) &#123;</div><div class="line">            warn(</div><div class="line">              <span class="string">`Template element not found or is empty: <span class="subst">$&#123;options.template&#125;</span>`</span>,</div><div class="line">              <span class="keyword">this</span></div><div class="line">            )</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (template.nodeType) &#123;</div><div class="line">        template = template.innerHTML</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</div><div class="line">          warn(<span class="string">'invalid template option:'</span> + template, <span class="keyword">this</span>)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span></div><div class="line">      &#125;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (el) &#123;</div><div class="line">      template = getOuterHTML(el)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (template) &#123;</div><div class="line">      <span class="keyword">const</span> &#123; render, staticRenderFns &#125; = compileToFunctions(template, &#123;</div><div class="line">        warn,</div><div class="line">        shouldDecodeNewlines,</div><div class="line">        delimiters: options.delimiters</div><div class="line">      &#125;, <span class="keyword">this</span>)</div><div class="line">      options.render = render</div><div class="line">      options.staticRenderFns = staticRenderFns</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 调用已经缓存下来的 web-runtime.js 文件中的 $mount 方法</span></div><div class="line">  <span class="keyword">return</span> mount.call(<span class="keyword">this</span>, el, hydrating)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>分析一下可知 <code>web-runtime-with-compiler.js</code> 的逻辑如下：</p>
<ol>
<li>缓存来自 <code>web-runtime.js</code> 文件的 <code>$mount</code> 方法</li>
<li>判断有没有传递 <code>render</code> 选项，如果有直接调用来自 <code>web-runtime.js</code> 文件的 <code>$mount</code> 方法</li>
<li>如果没有传递 <code>render</code> 选项，那么查看有没有 <code>template</code> 选项，如果有就使用 <code>compileToFunctions</code> 函数根据其内容编译成 <code>render</code> 函数</li>
<li>如果没有 <code>template</code> 选项，那么查看有没有 <code>el</code> 选项，如果有就使用 <code>compileToFunctions</code> 函数将其内容(<code>template = getOuterHTML(el)</code>)编译成 <code>render</code> 函数</li>
<li>将编译成的 <code>render</code> 函数挂载到 <code>this.$options</code> 属性下，并调用缓存下来的<code>web-runtime.js</code> 文件中的 <code>$mount</code> 方法<br>简单的用一张图表示 <code>mount</code> 方法的调用关系，从上至下调用：</li>
</ol>
<p><img src="http://7xlolm.com1.z0.glb.clouddn.com/vueimgmount.png" alt=""></p>
<p>不过不管怎样，我们发现这些步骤的最终目的是生成 render 函数，然后再调用 <code>lifecycle.js</code> 文件中的 <code>_mount</code> 方法，我们看看这个方法做了什么事情，查看 <code>_mount</code> 方法的代码，这是简化过得：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">Vue.prototype._mount = <span class="function"><span class="keyword">function</span> (<span class="params"></span></span></div><div class="line"><span class="function"><span class="params">  el?: Element | void,</span></span></div><div class="line"><span class="function"><span class="params">  hydrating?: boolean</span></span></div><div class="line"><span class="function"><span class="params"></span>): <span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">const</span> vm: Component = <span class="keyword">this</span></div><div class="line"></div><div class="line">  <span class="comment">// 在Vue实例对象上添加 $el 属性，指向挂载点元素</span></div><div class="line">  vm.$el = el</div><div class="line"></div><div class="line">  <span class="comment">// 触发 beforeMount 生命周期钩子</span></div><div class="line">  callHook(vm, <span class="string">'beforeMount'</span>)</div><div class="line"></div><div class="line">  vm._watcher = <span class="keyword">new</span> Watcher(vm, () =&gt; &#123;</div><div class="line">    vm._update(vm._render(), hydrating)</div><div class="line">  &#125;, noop)</div><div class="line"></div><div class="line">  <span class="comment">// 如果是第一次mount则触发 mounted 生命周期钩子</span></div><div class="line">  <span class="keyword">if</span> (vm.$vnode == <span class="literal">null</span>) &#123;</div><div class="line">    vm._isMounted = <span class="literal">true</span></div><div class="line">    callHook(vm, <span class="string">'mounted'</span>)</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> vm</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面的代码很简单，该注释的都注释了，唯一需要看的就是这段代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">vm._watcher = <span class="keyword">new</span> Watcher(vm, () =&gt; &#123;</div><div class="line">  vm._update(vm._render(), hydrating)</div><div class="line">&#125;, noop)</div></pre></td></tr></table></figure></p>
<p>看上去很眼熟有没有？我们平时使用Vue都是这样使用 <code>watch</code>的：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.$watch(<span class="string">'a'</span>, (newVal, oldVal) =&gt; &#123;</div><div class="line">	</div><div class="line">&#125;)</div><div class="line"><span class="comment">// 或者</span></div><div class="line"><span class="keyword">this</span>.$watch(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.a + <span class="keyword">this</span>.b</div><div class="line">&#125;, (newVal, oldVal) =&gt; &#123;</div><div class="line">	</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>第一个参数是 表达式或者函数，第二个参数是回调函数，第三个参数是可选的选项。原理是 <code>Watch</code> 内部对表达式求值或者对函数求值从而触发数据的 <code>get</code> 方法收集依赖。可是<code>_mount</code> 方法中使用 <code>Watcher</code> 的时候第一个参数 <code>vm</code> 是什么鬼。我们不妨去看看源码中 <code>$watch</code> 函数是如何实现的，根据之前还原Vue构造函数中所整理的内容可知：<code>$warch</code> 方法是在 <code>src/core/instance/state.js</code>文件中的 <code>stateMixin</code> 方法中定义的，源码如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Vue.prototype.$watch = <span class="function"><span class="keyword">function</span> (<span class="params"></span></span></div><div class="line"><span class="function"><span class="params">  expOrFn: string | Function,</span></span></div><div class="line"><span class="function"><span class="params">  cb: Function,</span></span></div><div class="line"><span class="function"><span class="params">  options?: Object</span></span></div><div class="line"><span class="function"><span class="params"></span>): <span class="title">Function</span> </span>&#123;</div><div class="line">  <span class="keyword">const</span> vm: Component = <span class="keyword">this</span></div><div class="line">  options = options || &#123;&#125;</div><div class="line">  options.user = <span class="literal">true</span></div><div class="line">  <span class="keyword">const</span> watcher = <span class="keyword">new</span> Watcher(vm, expOrFn, cb, options)</div><div class="line">  <span class="keyword">if</span> (options.immediate) &#123;</div><div class="line">    cb.call(vm, watcher.value)</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">unwatchFn</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    watcher.teardown()</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们可以发现，<code>$warch</code> 其实是对 <code>Watcher</code> 的一个封装，内部的 <code>Watcher</code> 的第一个参数实际上也是 <code>vm</code> 即：<code>Vue</code>实例对象，这一点我们可以在<code>Watcher</code> 的源码中得到验证，代开 <code>observer/watcher.js</code> 文件查看：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">constructor</span> (</div><div class="line">    vm: Component,</div><div class="line">    expOrFn: string | Function,</div><div class="line">    cb: Function,</div><div class="line">    options?: Object = &#123;&#125;</div><div class="line">  ) &#123;</div><div class="line">    </div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以发现真正的 <code>Watcher</code> 第一个参数实际上就是 <code>vm</code>。第二个参数是表达式或者函数，然后以此类推，所以现在再来看 <code>_mount</code> 中的这段代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">vm._watcher = <span class="keyword">new</span> Watcher(vm, () =&gt; &#123;</div><div class="line">  vm._update(vm._render(), hydrating)</div><div class="line">&#125;, noop)</div></pre></td></tr></table></figure></p>
<p>忽略第一个参数 <code>vm</code>，也就说，<code>Watcher</code> 内部应该对第二个参数求值，也就是运行这个函数：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">() =&gt; &#123;</div><div class="line">  vm._update(vm._render(), hydrating)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>所以 <code>vm._render()</code> 函数被第一个执行，该函数在 <code>src/core/instance/render.js</code> 中，该方法中的代码很多，下面是简化过的：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">Vue.prototype._render = <span class="function"><span class="keyword">function</span> (<span class="params"></span>): <span class="title">VNode</span> </span>&#123;</div><div class="line">  <span class="keyword">const</span> vm: Component = <span class="keyword">this</span></div><div class="line">  <span class="comment">// 解构出 $options 中的 render 函数</span></div><div class="line">  <span class="keyword">const</span> &#123;</div><div class="line">    render,</div><div class="line">    staticRenderFns,</div><div class="line">    _parentVnode</div><div class="line">  &#125; = vm.$options</div><div class="line">  ...</div><div class="line"></div><div class="line">  <span class="keyword">let</span> vnode</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    <span class="comment">// 运行 render 函数</span></div><div class="line">    vnode = render.call(vm._renderProxy, vm.$createElement)</div><div class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">    ...</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">// set parent</span></div><div class="line">  vnode.parent = _parentVnode</div><div class="line">  <span class="keyword">return</span> vnode</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>_render</code> 方法首先从 <code>vm.$options</code> 中解构出 <code>render</code> 函数，大家应该记得：<code>vm</code>.<code>$options.render</code> 方法是在<code>web-runtime-with-compiler.js</code> 文件中通过 <code>compileToFunctions</code> 方法将 <code>template</code> 或 <code>el</code> 编译而来的。解构出 <code>render</code> 函数后，接下来便执行了该方法：</p>
<pre><code>vnode = render.call(vm._renderProxy, vm.$createElement)
</code></pre><p>其中使用 <code>call</code> 指定了 <code>render</code> 函数的作用域环境为 <code>vm._renderProxy</code>，这个属性在我们整理实例对象的时候知道，他是在 <code>Vue.prototype._init</code> 方法中被添加的，即：<code>vm._renderProxy = vm</code>，其实就是Vue实例对象本身，然后传递了一个参数：<code>vm.$createElement</code>。那么 <code>render</code> 函数到底是干什么的呢？让我们根据上面那句代码猜一猜，我们已经知道 render 函数是从 <code>template</code> 或 <code>el</code> 编译而来的，如果没错的话应该是返回一个虚拟DOM对象。我们不妨使用 <code>console.log</code> 打印一下 <code>render</code> 函数，当我们的模板这样编写时：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;a&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>打印的 <code>render</code> 函数如下：</p>
<p><img src="http://7xlolm.com1.z0.glb.clouddn.com/vueimgr2.png" alt=""></p>
<p>其实了解Vue2.x版本的同学都知道，Vue提供了 <code>render</code> 选项，作为 <code>template</code> 的代替方案，同时为JavaScript提供了完全编程的能力，下面两种编写模板的方式实际是等价的：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 方案一：</span></div><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">	el: <span class="string">'#app'</span>,</div><div class="line">	data: &#123;</div><div class="line">		a: <span class="number">1</span></div><div class="line">	&#125;,</div><div class="line">	template: <span class="string">'&lt;ul&gt;&lt;li&gt;&#123;&#123;a&#125;&#125;&lt;/li&gt;&lt;li&gt;&#123;&#123;a&#125;&#125;&lt;/li&gt;&lt;/ul&gt;'</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 方案二：</span></div><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">	el: <span class="string">'#app'</span>,</div><div class="line">	render: <span class="function"><span class="keyword">function</span> (<span class="params">createElement</span>) </span>&#123;</div><div class="line">		createElement(<span class="string">'ul'</span>, [</div><div class="line">			createElement(<span class="string">'li'</span>, <span class="keyword">this</span>.a),</div><div class="line">			createElement(<span class="string">'li'</span>, <span class="keyword">this</span>.a)</div><div class="line">		])</div><div class="line">	&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>现在我们再来看我们打印的 <code>render</code> 函数：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">anonymous</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">with</span>(<span class="keyword">this</span>)&#123;</div><div class="line">		<span class="keyword">return</span> _c(<span class="string">'ul'</span>, &#123; </div><div class="line">			attrs: &#123;<span class="string">"id"</span>: <span class="string">"app"</span>&#125;</div><div class="line">		&#125;,[</div><div class="line">			_c(<span class="string">'li'</span>, [_v(_s(a))])</div><div class="line">		])</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>是不是与我们自己写 <code>render</code> 函数很像？因为 <code>render</code> 函数的作用域被绑定到了Vue实例，即：<code>render.call(vm._renderProxy</code>, v<code>m.$createElement)</code>，所以上面代码中 <code>_c</code>、<code>_v</code>、<code>_s</code> 以及变量 <code>a</code>相当于Vue实例下的方法和变量。大家还记得诸如 <code>_c</code>、<code>_v</code>、<code>_s</code> 这样的方法在哪里定义的吗？我们在整理Vue构造函数的时候知道，他们在 <code>src/core/instance/render.js</code> 文件中的 <code>renderMixin</code> 方法中定义，除了这些之外还有诸如：<code>_l</code>、 <code>_m</code>、 <code>_o</code> 等等。其中 <code>_l</code> 就在我们使用 <code>v-for</code> 指令的时候出现了。所以现在大家知道为什么这些方法都被定义在 <code>render.js</code> 文件中了吧，因为他们就是为了构造出 <code>render</code> 函数而存在的。<br>现在我们已经知道了 <code>render</code> 函数的长相，也知道了 <code>render</code> 函数的作用域是Vue实例本身即：<code>this</code>(或<code>vm</code>)。那么当我们执行 render 函数时，其中的变量如：<code>a</code>，就相当于：<code>this.a</code>，我们知道这是在求值，所以 <code>_mount</code> 中的这段代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">vm._watcher = <span class="keyword">new</span> Watcher(vm, () =&gt; &#123;</div><div class="line">  vm._update(vm._render(), hydrating)</div><div class="line">&#125;, noop)</div></pre></td></tr></table></figure></p>
<p>当 <code>vm._render</code> 执行的时候，所依赖的变量就会被求值，并被收集为依赖。按照Vue中<code>watcher.js</code> 的逻辑，当依赖的变量有变化时不仅仅回调函数被执行，实际上还要重新求值，即还要执行一遍：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">() =&gt; &#123;</div><div class="line">  vm._update(vm._render(), hydrating)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这实际上就做到了 <code>re-render</code>，因为 <code>vm._update</code> 就是文章开头所说的虚拟DOM中的最后一步：<code>patch</code><br><code>vm_render</code> 方法最终返回一个 <code>vnode</code> 对象，即虚拟DOM，然后作为 <code>vm_update</code>的第一个参数传递了过去，我们看一下 <code>vm_update</code> 的逻辑，在 <code>src/core/instance/lifecycle.js</code> 文件中有这么一段代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (!prevVnode) &#123;</div><div class="line">  <span class="comment">// initial render</span></div><div class="line">  vm.$el = vm.__patch__(</div><div class="line">    vm.$el, vnode, hydrating, <span class="literal">false</span> <span class="comment">/* removeOnly */</span>,</div><div class="line">    vm.$options._parentElm,</div><div class="line">    vm.$options._refElm</div><div class="line">  )</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  <span class="comment">// updates</span></div><div class="line">  vm.$el = vm.__patch__(prevVnode, vnode)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果还没有 <code>prevVnode</code> 说明是首次渲染，直接创建真实DOM。如果已经有了 <code>prevVnode</code> 说明不是首次渲染，那么就采用 <code>patch</code> 算法进行必要的DOM操作。这就是Vue更新DOM的逻辑。只不过我们没有将 virtual DOM 内部的实现。<br>现在我们来好好理理思路，当我们写如下代码时：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">	el: <span class="string">'#app'</span>,</div><div class="line">	data: &#123;</div><div class="line">		a: <span class="number">1</span>,</div><div class="line">		b: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line">	&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>Vue 所做的事：</p>
<blockquote>
<ol>
<li>构建数据响应系统，使用 <code>Observer</code> 将数据data转换为访问器属性；将 <code>el</code> 编译为 <code>render</code> 函数，<code>render</code> 函数返回值为虚拟DOM</li>
<li>在 <code>_mount</code> 中对 <code>_update</code>求值，而 <code>_update</code> 又会对 <code>render</code> 求值，<code>render</code> 内部又会对依赖的变量求值，收集为被求值的变量的依赖，当变量改变时，<code>_update</code> 又会重新执行一遍，从而做到 <code>re-render</code></li>
</ol>
</blockquote>
<p>用一张详细一点的图表示就是这样的：</p>
<p><img src="http://7xlolm.com1.z0.glb.clouddn.com/vueimgdetail.png" alt=""></p>
<p>到此，我们从大体流程，挑着重点的走了一遍Vue，但是还有很多细节我们没有提及，比如：</p>
<ol>
<li>将模板转为 <code>render</code> 函数的时候，实际是先生成的抽象语法树（AST），再将抽象语法树转成的 <code>render</code> 函数，而且这一整套的代码我们也没有提及，因为他在复杂了，其实这部分内容就是在完正则。</li>
<li>我们也没有详细的讲 Virtual DOM 的实现原理，网上已经有文章讲了，大家可以搜一搜</li>
<li>我们的例子中仅仅传递了 <code>el</code> ，<code>data</code> 选项，大家知道 <code>Vue</code> 支持的选项很多，比如我们都没有讲到，但都是触类旁通的，比如你搞清楚了 <code>data</code> 选项再去看 <code>computed</code> 选项或者 <code>props</code> 选项就会很容易，比如你知道了 <code>Watcher</code> 的工作机制再去看 <code>watch</code> 选项就会很容易。<br>本篇文章作为Vue源码的启蒙文章，也许还有很多缺陷，全当抛砖引玉了。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 基础杂谈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue.js </tag>
            
            <tag> 源码 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS Grid布局浅谈]]></title>
      <url>https://dsb123dsb.github.io/2017/05/04/CSS-Grid%E5%B8%83%E5%B1%80%E6%B5%85%E8%B0%88/</url>
      <content type="html"><![CDATA[<blockquote>
<p>纸上得来终觉浅，绝知此事要躬行</p>
</blockquote>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>中文原文（“大漠”，W3CPlus创始人，目前就职于手淘。）猛搓<a href="http://www.w3cplus.com/css3/playing-with-css-grid-layout.html著作权归作者所有。" target="_blank" rel="external">http://www.w3cplus.com/css3/playing-with-css-grid-layout.html</a>（原文很多概念并未涉及，个人建议将作者建议的一些中文外文链接参考也阅读了，以期全面了解和掌握）</p>
<p>自从去年下半年开始，CSS Grid布局的相关教程在互联网上就铺天盖地，可谓是声势浩大。就针对于Web布局而言，个人认为Grid布局将是Web布局的神器，它改变了以往任何一种布局方式或者方法。不管以前的采用什么布局方法都可以说是一维的布局方式，而Grid最大的特色，采用了二维布局。@Rachel Andrew也一直致力于完善Grid的规范。</p>
<p>就我个人而言，我也一直在不断的关注这个布局利器的相关更新，自从最初规范的出来，到目前规范的完善。在站上也不断的在更新<a href="https://www.w3cplus.com/blog/tags/356.html" target="_blank" rel="external">CSS Grid布局</a>的使用。虽然这方向的教程已经很多了，但各有千秋，我追求以最简单，最直接的方式来阐述它的使用方式方法。让初学者能尽快的掌握其使用规则。</p>
<p>前段时间@Mirza Joldic<a href="https://medium.com/@purplecones/playing-with-css-grid-layout-a75836098370" target="_blank" rel="external">在Medium上发布了一篇文章</a>，通过几个Gif动态非常形象的阐述了CSS Grid的几个核心概念以及使用方法，今天我就借花献佛，用这几张图让初学者快速掌握CSS Grid的核心概念和使用技巧。</p>
<h1 id="Web布局的历史演变"><a href="#Web布局的历史演变" class="headerlink" title="Web布局的历史演变"></a>Web布局的历史演变</h1><p>自从Web出来至今，Web的布局也经过了几个演变，下图可以一目了然：</p>
<p><img src="https://www.w3cplus.com/sites/default/files/blogs/2017/1704/learning-grid-gif-1.png" alt=""><br><a id="more"></a><br>有关于Web布局的演变史，去年也整理过一篇相关的文章简单的阐述了这方面的故事，如果你感兴趣的话，<a href="https://www.w3cplus.com/css/css-layout-model.html" target="_blank" rel="external">可以点击这里进行了解</a>。在Web的学习过程中，<a href="https://www.w3cplus.com/css/learn-css-layout.html" target="_blank" rel="external">学习Web布局</a>是一个不可避免的过程，而随着前端技术的日新月异的变化，布局方式也在不断的更新，早在2013年@Peter Gasston就对<a href="https://www.w3cplus.com/css3/future-css-layouts.html" target="_blank" rel="external">CSS布局的未来趋势</a>就做过预判断，文章中就提供了CSS Grid的布局。如果今天来看，这种趋势的预判是正确的，特别是今年3月份之后，各大主流浏览器都发布了对CSS Grid的支持。既然如此，学习CSS Grid相关的知识就很有必要。</p>
<p>既然掌握CSS Grid很有必要，那用什么样的方式能最快的掌握CSS Grid相关的知识呢？这很重要。 特别是@Mirza Joldic在Medium上发布的文章，里面的动图让我耳目一新，通过简单的几张图，就把CSS Grid的几个核心介绍的非常清楚，我觉得很有必要拿出来与大家分享。</p>
<p>在继续下面的内容之前，再次感谢@Mirza Joldic的付出。那咱们就不说废话了，开始今天的学习之旅。</p>
<h1 id="CSS-Grid布局的介绍"><a href="#CSS-Grid布局的介绍" class="headerlink" title="CSS Grid布局的介绍"></a>CSS Grid布局的介绍</h1><p>学习CSS Grid布局更多的相关知识，我觉得通过一些工具会对大家的理解更有帮助，到目前为止，这方面的在线工具已经有很多种，比如：</p>
<ul>
<li><a href="https://cssgridgarden.com/" target="_blank" rel="external">GRID GARDEN</a>：通过一个小游戏的方式，让你快速掌握CSS Grid的相关知识，这个有点类似于<a href="https://flexboxfroggy.com/" target="_blank" rel="external">FLEXBOX FROGGY</a></li>
<li><a href="https://griddy.io/" target="_blank" rel="external">Griddy</a> by @drewisthe</li>
<li><a href="https://alialaa.github.io/css-grid-cheat-sheet/" target="_blank" rel="external">CSS Grid Cheat Sheet</a> by @alialaa</li>
</ul>
<p>下面的动图是使用@Mirza Joldic写的<a href="https://www.cssgridplayground.com/" target="_blank" rel="external">CSS Grid Playground</a>小工具。动图来了：</p>
<p><img src="https://www.w3cplus.com/sites/default/files/blogs/2017/1704/learning-grid-gif-2.gif" alt=""></p>
<p>这里要提两个核心概念，这两个核心概念有点类似于Flexbox布局：</p>
<ul>
<li>Grid容器（对应Flexbox布局中的Flex容器）</li>
<li>Grid项目（对应Flexbox布局中的Flex项目）</li>
</ul>
<p>比如一个这样的HTML结构：</p>
<p><img src="https://www.w3cplus.com/sites/default/files/blogs/2017/1704/learning-grid-gif-3.png" alt=""></p>
<p>使用 CSS Grid布局首要的第一步，就是通过<code>display:grid</code>;来对容器声明一个网格容器，那么这个div元素里面对应的子元素就自动成为网格项目。</p>
<p><img src="https://www.w3cplus.com/sites/default/files/blogs/2017/1704/learning-grid-gif-4.gif" alt=""></p>
<p>虽然你在<code>div.grid-container</code>中设置了<code>display:grid</code>;，声明了这个元素为Grid容器，但在浏览器中，并看不到有任何的变化。但在在幕后中，他们还是发生了变化，<code>div.grid-container</code>是一个Grid容器，他的所有子元素就自动变成了网格项目。</p>
<p>接下来，使用<code>grid-template-columns: 1fr 1fr 1fr</code>;来定义三列网格：</p>
<p><img src="https://www.w3cplus.com/sites/default/files/blogs/2017/1704/learning-grid-gif-5.gif" alt=""></p>
<p>从gif图中就明显的看出来，现在有点变化了，颜色块变小了，但很难区分出有何变化，为了让效果之间有更突出的差异，再给<code>.grid-container</code>中添加<code>grid-gap:5px</code>：</p>
<p><img src="https://www.w3cplus.com/sites/default/files/blogs/2017/1704/learning-grid-gif-6.gif" alt=""></p>
<p>看到变化了吧，整个网格分了三个列，单元格之间有<code>5px</code>的间距，同时每列的列宽是整个宽度的三分之一，那是因为我们采用了<code>fr</code>单位，而且把整个网格分成了三列，每列的宽度是1fr。这里告诉我们三个知识点：</p>
<ul>
<li><code>grid-template-columns</code>用来把网格指定列的宽度</li>
<li><code>grid-gap</code>用来指定列（或行）的间距</li>
<li><code>fr</code>可以自动根据网格容器的宽度来计算列的宽度</li>
</ul>
<p>现在我们把<code>grid-template-columns</code>的值改成：<code>1fr 2fr 1fr</code>，对应的效果就会变成：</p>
<p><img src="https://www.w3cplus.com/sites/default/files/blogs/2017/1704/learning-grid-gif-7.gif" alt=""></p>
<p>现在第二列的宽度是第一列和最后一列的两倍。这也再次证明fr单位的强大之处，使用它可以让你很容易定义你的网格尺寸。</p>
<p>现在越来越接近我们想要的网格。但需求是不断变化的，比如我们现在想让顶部的第一行尽可能的宽，比如说跨整个网格列（比如我们网页的头部，或者说我们常见的导航）。如此一来，只需要在第一个网格上使用<code>grid-column: 1 / 4</code>：</p>
<p><img src="https://www.w3cplus.com/sites/default/files/blogs/2017/1704/learning-grid-gif-8.gif" alt=""></p>
<p>或许第一次接触<code>1 / 4</code>会令你感到神秘，其实这个涉及到了CSS Grid中的重要概念之一，那就是网格线，其中第一个数字是列的起始网格线位置，第二个数字是线束网格线的位置。对于一个CSS Grid，可以通过grid-<code>template-columns</code>创建列网格线，<code>grid-template-rows</code>创建行网格线。这种方式创建的是一种显式的网格线。当然，除了这种方式，还可以创建隐式网格线。除此之外，还可以使用<code>grid-auto-rows</code>和<code>grid-auto-columns</code>可以创建一个隐式网格。这个隐式网格对应的网格线就被称之为隐式网格线。下图简单的展示了示例中的网格线示意图：</p>
<p><img src="https://www.w3cplus.com/sites/default/files/blogs/2017/1704/learning-grid-gif-9.png" alt=""></p>
<p>接下来，我们想要有一个<code>300px</code>的侧边栏高度，并且让他的位置是垂直方向的<code>2 / 3</code>。我们可以使用<code>grid-row: 2 / 4</code>来实现，这个特性和<code>grid-column</code>非常的类似。这个时候，效果变成这样：</p>
<p><img src="https://www.w3cplus.com/sites/default/files/blogs/2017/1704/learning-grid-gif-10.gif" alt=""></p>
<p>其实CSS Grid看上去和表格非常的类似，在表格中我们有一个专业的术语，合并单元格。其实在CSS Grid布局中，我们同样有一个类似的特性，那就是在<code>grid-column</code>或者<code>grid-row</code>中引入关键词<code>span</code>，在关键词<code>span</code>后面紧跟一个数值，就是表示合并单元格的数量，先来看下图：</p>
<p><img src="https://www.w3cplus.com/sites/default/files/blogs/2017/1704/learning-grid-gif-11.gif" alt=""></p>
<p>上面的示例中，我们使用到了<code>grid-column: 2 / span 1</code>和<code>grid-row: 2 / span 2</code>。其中<code>grid-column: 2 / span 1</code>表示从列网格线2开始，跨度是1个列网格线（其实就是合并一个列单元格）。而<code>grid-row: 2 / span 2</code>表示的是从行网格线2开始，跨度是两个两个线（其实就是合并两个行单元格）。</p>
<p>接着我们来做页脚，在做页脚之前，我们先删除两个网格项目，因为不需要他们了。做页脚和做页头非常的类似，继续使用g<code>rid-column: 1 / 4</code>即可：</p>
<p><img src="https://www.w3cplus.com/sites/default/files/blogs/2017/1704/learning-grid-gif-12.gif" alt=""></p>
<p>通过上面的方式，我们可以轻易的控制网格，也能非常容易的实现一个Web面页的布局，比如一个三列的布局。但我们在布局中经常还需要控制对齐方式，特别是在CSS Grid的布局当中，比如下面的示例中，我们第三列并未占满整个高度，这个时候希望它能底部对齐。此时为了实现这样的效果，需要使用到CSS中的对齐模块特性，比如在这里，我们可以使用<code>align-self: end</code>来实现：</p>
<p><img src="https://www.w3cplus.com/sites/default/files/blogs/2017/1704/learning-grid-gif-13.gif" alt=""></p>
<p><code>align-self</code>是CSS中的一个新模块特性<a href="https://www.w3.org/TR/css-align-3/" target="_blank" rel="external">Box Alignment</a>中的一个属性。有关于这个模块的的功能还是非常的实用。@Rachel Andrew整理了一份<a href="https://rachelandrew.co.uk/css/cheatsheets/box-alignment" target="_blank" rel="external">Box Alignment Cheatsheet</a>，里面详细介绍了Box Alignment的使用。简单的来讲，这个规范中有三个关键部分：</p>
<ul>
<li><a href="https://drafts.csswg.org/css-align/#positional-values" target="_blank" rel="external">Positional Alignment</a>：关键词有start、end、center</li>
<li><a href="https://drafts.csswg.org/css-align/#baseline-values" target="_blank" rel="external">Baseline Alignment</a>：关键词有baseline、first baseline、last baseline</li>
<li><a href="https://drafts.csswg.org/css-align/#distribution-values" target="_blank" rel="external">Distributed Alignment</a>：关键词有space-between和space-around</li>
</ul>
<p>其实你要是对<a href="https://www.w3cplus.com/blog/tags/157.html" target="_blank" rel="external">Flexbox</a>熟悉的话，你或许感觉这个Box Alignment有点类似于Flexbox中的一些控制Flex项目对齐方式的属性。事实是这样的，如果你感兴趣想深入的了解这方面的相关知识，建议你花点时间阅读<a href="https://www.w3cplus.com/css/css-grids-flexbox-and-box-alignment-our-new-system-for-web-layout.html" target="_blank" rel="external">《Web布局新系统：CSS Grid,Flexbox和Box Alignment》</a>一文</p>
<p>如果你对上面的相关知识有所了解的话，你就可以很轻易的使用CSS Grid相关知识实现一个常用的Web页面布局效果。比如下面这张图，为了好完，我把主内容的容器设置了具体的宽度，并且通过Box Alignment属性，让这个区域水平垂直居中：</p>
<p><img src="https://www.w3cplus.com/sites/default/files/blogs/2017/1704/learning-grid-gif-14.gif" alt=""></p>
<p>整个题外话，虽然<a href="https://www.w3cplus.com/blog/tags/357.html" target="_blank" rel="external">实现水平垂直居中的解决方案</a>已有很多种了，但Box Alignment模块将是最佳方式。</p>
<p>如果你感兴趣的话，你也可以通过@Mirza Joldic写的<a href="https://www.cssgridplayground.com/" target="_blank" rel="external">CSS Grid Playground</a>小工具去尝试各式各样的网格布局效果。从而加强对CSS Grid的概念。当然，在使用它去做一些事情或者做一些创意之前，还是很有必要对CSS Grid基础要有一个简单的了解。个人建议你花点时间阅读一下下面几篇文章：</p>
<ul>
<li><a href="https://www.w3cplus.com/css3/css-grid-layout-terminology-part1.html" target="_blank" rel="external">CSS Grid布局：图解网格布局中术语之一</a></li>
<li><a href="https://www.w3cplus.com/css3/css-grid-layout-terminology-part2.html" target="_blank" rel="external">CSS Grid布局：图解网格布局中术语二</a></li>
<li><a href="https://www.w3cplus.com/css3/css-grid-layout-terminology-part3.html" target="_blank" rel="external">CSS Grid布局：图解网格布局中术语三</a></li>
<li><a href="https://www.w3cplus.com/css3/a-complete-guide-css-grid-layout.html" target="_blank" rel="external">CSS Grid布局指南</a></li>
</ul>
<p>当然，如果你深入的学习CSS Grid的相关知识，个人强列你仔细阅读<a href="https://www.w3cplus.com/blog/tags/356.html" target="_blank" rel="external">完这里的所有文章</a>。其实我个人也是CSS Grid的极度爱好者，我将在这里不断的更新和发布有关于CSS Grid的相关文章。希望这些文章对你学习和使用CSS Grid有所帮助。</p>
<p>中文原文（“大漠”，W3CPlus创始人，目前就职于手淘。）<a href="http://www.w3cplus.com/css3/playing-with-css-grid-layout.html著作权归作者所有。" target="_blank" rel="external">http://www.w3cplus.com/css3/playing-with-css-grid-layout.html</a></p>
<p>英文参考地址Mirza Joldic在Medium<a href="https://medium.com/@purplecones/playing-with-css-grid-layout-a75836098370" target="_blank" rel="external">https://medium.com/@purplecones/playing-with-css-grid-layout-a75836098370</a></p>
]]></content>
      
        <categories>
            
            <category> 技术分享 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript监听全部Ajax请求事件的方法]]></title>
      <url>https://dsb123dsb.github.io/2017/05/02/JavaScript%E7%9B%91%E5%90%AC%E5%85%A8%E9%83%A8Ajax%E8%AF%B7%E6%B1%82%E4%BA%8B%E4%BB%B6%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<blockquote>
<p>纸上得来终觉浅，绝知此事要躬行</p>
</blockquote>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前段时间做阿里暑期实习笔试题目，抽到的试题最后一道要求写个组件监听页面所有ajax请求，当时大概能猜到要改写XMLHttpReuqest对象，不过最后还是没写出来，回来查了下资料：</p>
<ol>
<li>若Ajax请求是由jQuery的$.ajax发起的，默认情况下可以使用 jQuery的Global Ajax Event Handlers监听到Ajax事件，</li>
<li>然而我遇到的却是用原生JavaScript发起的Ajax请求，所以这种方法行不通。</li>
<li>还有其他方法，比如说 Pub/Sub，但是这个发起请求的 js 代码我是无法改动的，也就不存在向代码里添加 publish 的问题。同理，jQuery 的 .bind 和 .trigger 也无法使用。</li>
</ol>
<p>最后的方案：实现主要是两点：<code>**override XMLHttpRequest**</code>和<strong>自定义事件</strong>（这一块红宝书有讲，也看过，并没有重视，自己没有好好钻研，怨不得别人）<br><a id="more"></a></p>
<h1 id="1-0实现"><a href="#1-0实现" class="headerlink" title="1.0实现"></a>1.0实现</h1><p>在 StackOverflow 上搜索，发现有个歪果仁给出了一个不靠谱的解决方法，嗯，贴出来给大家看看：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"> <span class="keyword">var</span> open = <span class="built_in">window</span>.XMLHttpRequest.prototype.open,</div><div class="line">  send = <span class="built_in">window</span>.XMLHttpRequest.prototype.send,</div><div class="line">  onReadyStateChange;</div><div class="line">  </div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">openReplacement</span>(<span class="params">method, url, async, user, password</span>) </span>&#123;</div><div class="line">  <span class="comment">// some code</span></div><div class="line">  </div><div class="line">  <span class="keyword">return</span> open.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</div><div class="line"> &#125;</div><div class="line">  </div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">sendReplacement</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">  <span class="comment">// some code</span></div><div class="line">  </div><div class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>.onreadystatechange) <span class="keyword">this</span>._onreadystatechange = <span class="keyword">this</span>.onreadystatechange;</div><div class="line">  <span class="keyword">this</span>.onreadystatechange = onReadyStateChangeReplacement;</div><div class="line">  </div><div class="line">  <span class="keyword">return</span> send.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</div><div class="line"> &#125;</div><div class="line">  </div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">onReadyStateChangeReplacement</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// some code</span></div><div class="line">  </div><div class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>._onreadystatechange) <span class="keyword">return</span> <span class="keyword">this</span>._onreadystatechange.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</div><div class="line"> &#125;</div><div class="line">  </div><div class="line"> <span class="built_in">window</span>.XMLHttpRequest.prototype.open = openReplacement;</div><div class="line"> <span class="built_in">window</span>.XMLHttpRequest.prototype.send = sendReplacement;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure></p>
<p>这个解决方案，无法监听全部的 <code>XHR Events</code> ，而且 <code>readystatechange</code> 事件是在调用 <code>send</code> 方法后才监听，也就无法监听到<code>readyState = 1</code>时的事件。同时，如果在使用 <code>send</code> 方法后再对 <code>onreadystatechange</code> 设置回调函数，会将<code>override</code> 的代码又一次 <code>override</code>，也就无法产生预想的效果。</p>
<h1 id="2-0实现"><a href="#2-0实现" class="headerlink" title="2.0实现"></a>2.0实现</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">ajaxEventTrigger</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> ajaxEvent = <span class="keyword">new</span> CustomEvent(event, &#123; <span class="attr">detail</span>: <span class="keyword">this</span> &#125;);</div><div class="line">  <span class="built_in">window</span>.dispatchEvent(ajaxEvent);</div><div class="line"> &#125;</div><div class="line">   </div><div class="line"> <span class="keyword">var</span> oldXHR = <span class="built_in">window</span>.XMLHttpRequest;</div><div class="line">  </div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">newXHR</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> realXHR = <span class="keyword">new</span> oldXHR();</div><div class="line">  <span class="comment">// this指向window</span></div><div class="line">  realXHR.addEventListener(<span class="string">'abort'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; ajaxEventTrigger.call(<span class="keyword">this</span>, <span class="string">'ajaxAbort'</span>); &#125;, <span class="literal">false</span>);</div><div class="line">  </div><div class="line">  realXHR.addEventListener(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; ajaxEventTrigger.call(<span class="keyword">this</span>, <span class="string">'ajaxError'</span>); &#125;, <span class="literal">false</span>);</div><div class="line">  </div><div class="line">  realXHR.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; ajaxEventTrigger.call(<span class="keyword">this</span>, <span class="string">'ajaxLoad'</span>); &#125;, <span class="literal">false</span>);</div><div class="line">  </div><div class="line">  realXHR.addEventListener(<span class="string">'loadstart'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; ajaxEventTrigger.call(<span class="keyword">this</span>, <span class="string">'ajaxLoadStart'</span>); &#125;, <span class="literal">false</span>);</div><div class="line">  </div><div class="line">  realXHR.addEventListener(<span class="string">'progress'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; ajaxEventTrigger.call(<span class="keyword">this</span>, <span class="string">'ajaxProgress'</span>); &#125;, <span class="literal">false</span>);</div><div class="line">  </div><div class="line">  realXHR.addEventListener(<span class="string">'timeout'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; ajaxEventTrigger.call(<span class="keyword">this</span>, <span class="string">'ajaxTimeout'</span>); &#125;, <span class="literal">false</span>);</div><div class="line">  </div><div class="line">  realXHR.addEventListener(<span class="string">'loadend'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; ajaxEventTrigger.call(<span class="keyword">this</span>, <span class="string">'ajaxLoadEnd'</span>); &#125;, <span class="literal">false</span>);</div><div class="line">  </div><div class="line">  realXHR.addEventListener(<span class="string">'readystatechange'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; ajaxEventTrigger.call(<span class="keyword">this</span>, <span class="string">'ajaxReadyStateChange'</span>); &#125;, <span class="literal">false</span>);</div><div class="line">  </div><div class="line">  <span class="keyword">return</span> realXHR;</div><div class="line"> &#125;</div><div class="line">  </div><div class="line"> <span class="built_in">window</span>.XMLHttpRequest = newXHR;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p>这样，就为 <code>XHR</code> 添加了自定义事件。如何调用？<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">  </div><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'ajaxReadyStateChange'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line"> <span class="built_in">console</span>.log(e.detail); <span class="comment">// XMLHttpRequest Object</span></div><div class="line">&#125;);</div><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'ajaxAbort'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line"> <span class="built_in">console</span>.log(e.detail.responseText); <span class="comment">// XHR 返回的内容</span></div><div class="line">&#125;);</div><div class="line">  </div><div class="line">xhr.open(<span class="string">'GET'</span>, <span class="string">'info.json'</span>);</div><div class="line">xhr.send();</div></pre></td></tr></table></figure></p>
<p>需要注意的是，正常的 <code>readystatechange</code> 等事件 <code>handler</code> 返回的 <code>e</code> 是 <code>XMLHttpRequest</code> 对象，但是自定义方法 <code>ajaxReadyStateChange</code> 等事件 <code>handler</code> 返回的 <code>e</code> 是 <code>CustomEvent</code> 对象，而 <code>e.detail</code>才是真正的 <code>XMLHttpRequest</code> 对象。而获得 <code>Ajax</code> 请求返回内容的 <code>e.responseText</code> 也需要修改为 <code>e.detail.responseText</code>。<br>同时，<code>addEventListener</code> 方法必须挂载在 <code>window</code> 对象上，而不能是 <code>XHR</code> 实例上。</p>
<h1 id="改进？"><a href="#改进？" class="headerlink" title="改进？"></a>改进？</h1><p>以上代码使用了 <code>CustomEvent</code> 构造函数，在现代浏览器上可以正常使用，但是在 IE 下，甚至连 IE 11 都不支持，所以需要加上 <code>Polyfill</code>，变成这样：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"> <span class="keyword">if</span> ( <span class="keyword">typeof</span> <span class="built_in">window</span>.CustomEvent === <span class="string">"function"</span> ) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  </div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">CustomEvent</span> (<span class="params"> event, params </span>) </span>&#123;</div><div class="line">  params = params || &#123; <span class="attr">bubbles</span>: <span class="literal">false</span>, <span class="attr">cancelable</span>: <span class="literal">false</span>, <span class="attr">detail</span>: <span class="literal">undefined</span> &#125;;</div><div class="line">  <span class="keyword">var</span> evt = <span class="built_in">document</span>.createEvent( <span class="string">'CustomEvent'</span> );</div><div class="line">  evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail );</div><div class="line">  <span class="keyword">return</span> evt;</div><div class="line"> &#125;</div><div class="line">  </div><div class="line"> CustomEvent.prototype = <span class="built_in">window</span>.Event.prototype;</div><div class="line">  </div><div class="line"> <span class="built_in">window</span>.CustomEvent = CustomEvent;</div><div class="line">&#125;)();</div><div class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">ajaxEventTrigger</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> ajaxEvent = <span class="keyword">new</span> CustomEvent(event, &#123; <span class="attr">detail</span>: <span class="keyword">this</span> &#125;);</div><div class="line">  <span class="built_in">window</span>.dispatchEvent(ajaxEvent);</div><div class="line"> &#125;</div><div class="line">   </div><div class="line"> <span class="keyword">var</span> oldXHR = <span class="built_in">window</span>.XMLHttpRequest;</div><div class="line">  </div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">newXHR</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> realXHR = <span class="keyword">new</span> oldXHR();</div><div class="line">  </div><div class="line">  realXHR.addEventListener(<span class="string">'abort'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; ajaxEventTrigger.call(<span class="keyword">this</span>, <span class="string">'ajaxAbort'</span>); &#125;, <span class="literal">false</span>);</div><div class="line">  </div><div class="line">  realXHR.addEventListener(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; ajaxEventTrigger.call(<span class="keyword">this</span>, <span class="string">'ajaxError'</span>); &#125;, <span class="literal">false</span>);</div><div class="line">  </div><div class="line">  realXHR.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; ajaxEventTrigger.call(<span class="keyword">this</span>, <span class="string">'ajaxLoad'</span>); &#125;, <span class="literal">false</span>);</div><div class="line">  </div><div class="line">  realXHR.addEventListener(<span class="string">'loadstart'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; ajaxEventTrigger.call(<span class="keyword">this</span>, <span class="string">'ajaxLoadStart'</span>); &#125;, <span class="literal">false</span>);</div><div class="line">  </div><div class="line">  realXHR.addEventListener(<span class="string">'progress'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; ajaxEventTrigger.call(<span class="keyword">this</span>, <span class="string">'ajaxProgress'</span>); &#125;, <span class="literal">false</span>);</div><div class="line">  </div><div class="line">  realXHR.addEventListener(<span class="string">'timeout'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; ajaxEventTrigger.call(<span class="keyword">this</span>, <span class="string">'ajaxTimeout'</span>); &#125;, <span class="literal">false</span>);</div><div class="line">  </div><div class="line">  realXHR.addEventListener(<span class="string">'loadend'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; ajaxEventTrigger.call(<span class="keyword">this</span>, <span class="string">'ajaxLoadEnd'</span>); &#125;, <span class="literal">false</span>);</div><div class="line">  </div><div class="line">  realXHR.addEventListener(<span class="string">'readystatechange'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; ajaxEventTrigger.call(<span class="keyword">this</span>, <span class="string">'ajaxReadyStateChange'</span>); &#125;, <span class="literal">false</span>);</div><div class="line">  </div><div class="line">  <span class="keyword">return</span> realXHR;</div><div class="line"> &#125;</div><div class="line">  </div><div class="line"> <span class="built_in">window</span>.XMLHttpRequest = newXHR;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure></p>
<p>此时，就可以在 IE 9+、Chrome 15+、FireFox 11+、Edge、Safari 6.1+、Opera 12.1+ 上愉快地使用了，以上就是本文的全部内容，希望大家能够喜欢。</p>
<p>参考原文——–<a href="http://www.jb51.net/article/91419.htm" target="_blank" rel="external">http://www.jb51.net/article/91419.htm</a></p>
]]></content>
      
        <categories>
            
            <category> 技术分享 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ajax </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何用原生 JS 实现手势解锁组件]]></title>
      <url>https://dsb123dsb.github.io/2017/04/30/%E5%A6%82%E4%BD%95%E7%94%A8%E5%8E%9F%E7%94%9F-JS-%E5%AE%9E%E7%8E%B0%E6%89%8B%E5%8A%BF%E8%A7%A3%E9%94%81%E7%BB%84%E4%BB%B6/</url>
      <content type="html"><![CDATA[<blockquote>
<p>纸上得来终觉浅，绝知此事要躬行</p>
</blockquote>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>原文猛戳月影大大博客<a href="https://www.h5jun.com/post/handlock-comp.html#toc-af9" target="_blank" rel="external">—十年踪迹—-</a>,读了一遍干货很多，先转过来，后面再慢慢消化。<br>这是<a href="https://html5.360.cn/star" target="_blank" rel="external">第三届 360 前端星计划</a>的选拔<a href="https://www.h5jun.com/post/75team-star-handlock.html" target="_blank" rel="external">作业题</a>。600多名学生参与了解答，最后通过了60人。这60名同学完成的不错，思路、代码风格、功能完成度颇有可取之处，不过也有一些欠考虑的地方，比如发现很多同学能按照需求实现完整的功能，但是不知道应当如何<em>设计开放的 API</em>，或者说，如何分析和预判产品需求和未来的变化，从而决定什么应当开放，什么应当封装。这无关于答案正确与否，还是和经验有关。<br><a id="more"></a><br>在这里，我提供一个<a href="https://github.com/akira-cn/handlock" target="_blank" rel="external">参考的版本</a>，并不是说这一版就最好，而是说，通过这一版，分析当我们遇到这样的比较复杂的 UI 需求的时候，我们应该怎样思考和实现。</p>
<p><img src="https://p.ssl.qhimg.com/d/inn/603c0bc8/06692681-E1C6-400A-A516-D7F8B26732C7.png" alt=""></p>
<h1 id="组件设计的一般步骤"><a href="#组件设计的一般步骤" class="headerlink" title="组件设计的一般步骤"></a>组件设计的一般步骤</h1><p>组件设计一般来说包括如下一些过程：</p>
<ol>
<li>理解需求</li>
<li>技术选型</li>
<li>结构（UI）设计</li>
<li>数据和API设计</li>
<li>流程设计</li>
<li>兼容性和细节优化</li>
<li>工具 &amp; 工程化</li>
</ol>
<p>这些过程并不是每个组件设计的时候都会遇到，但是通常来说一个项目总会在其中一些过程里遇到问题需要解决。下面我们来简单分析一下</p>
<h2 id="理解需求"><a href="#理解需求" class="headerlink" title="理解需求"></a>理解需求</h2><p>作业本身只是说设计一个常见的手势密码的 UI 交互，可以通过选择验证密码和设置密码来切换两种状态，每种状态有自己的流程。因此大部分同学就照着需求把整个组件的状态切换和流程封装了起来，有的同学提供了一定的 UI 样式配置能力，但是基本上没有同学能将流程和状态切换过程中的节点给开放出来。实际上这个组件如果要给用户使用，显然需要将过程节点开放出来，也就是说，<strong>需要由使用者决定设置密码的过程里执行什么操作、验证密码的过程和密码验证成功后执行什么操作</strong>，这些是组件开发者无法代替使用者来决定的。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> password = <span class="string">'11121323'</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> locker = <span class="keyword">new</span> HandLock.Locker(&#123;</div><div class="line">  container: <span class="built_in">document</span>.querySelector(<span class="string">'#handlock'</span>),</div><div class="line">  check: &#123;</div><div class="line">    checked: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">      <span class="keyword">if</span>(res.err)&#123;</div><div class="line">        <span class="built_in">console</span>.error(res.err); <span class="comment">//密码错误或长度太短</span></div><div class="line">        [执行操作...]</div><div class="line">      &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">`正确，密码是：<span class="subst">$&#123;res.records&#125;</span>`</span>);</div><div class="line">        [执行操作...]</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">  &#125;,</div><div class="line">  update:&#123;</div><div class="line">    beforeRepeat: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">      <span class="keyword">if</span>(res.err)&#123;</div><div class="line">        <span class="built_in">console</span>.error(res.err); <span class="comment">//密码长度太短</span></div><div class="line">        [执行操作...]</div><div class="line">      &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">`密码初次输入完成，等待重复输入`</span>);</div><div class="line">        [执行操作...]</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    afterRepeat: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">      <span class="keyword">if</span>(res.err)&#123;</div><div class="line">        <span class="built_in">console</span>.error(res.err); <span class="comment">//密码长度太短或者两次密码输入不一致</span></div><div class="line">        [执行操作...]</div><div class="line">      &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">`密码更新完成，新密码是：<span class="subst">$&#123;res.records&#125;</span>`</span>);</div><div class="line">        [执行操作...]</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">locker.check(password);</div></pre></td></tr></table></figure></p>
<h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><p>这个问题的 UI 展现的核心是九宫格和选中的小圆点，从技术上来讲，我们有三种可选方案： DOM/Canvas/SVG，三者都是可以实现主体 UI 的。</p>
<p>如果使用 DOM，最简单的方式是使用 flex 布局，这样能够做成响应式的</p>
<p><a class="jsbin-embed" href="//code.h5jun.com/dago/5/embed?html,css,js,output">JS Bin on jsbin.com</a><script src="https:////code.h5jun.com/js/embed.min.js?3.40.2"></script></p>
<p>使用 DOM 的优点是容易实现响应式，事件处理简单，布局也不复杂（但是和 Canvas 比起来略微复杂），但是斜线（demo 里没有画）的长度和斜率需要计算。</p>
<p>除了使用 DOM 外，使用 Canvas 绘制也很方便：</p>
<p><a class="jsbin-embed" href="//code.h5jun.com/biz/1/embed?html,css,js,output">JS Bin on jsbin.com</a><script src="https:////code.h5jun.com/js/embed.min.js?3.40.2"></script></p>
<p>用 Canvas 实现有两个小细节，第一是要实现响应式，可以用 DOM 构造一个正方形的容器：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#container &#123;</div><div class="line">  position: relative;</div><div class="line">  overflow: hidden;</div><div class="line">  width: <span class="number">100</span>%;</div><div class="line">  padding-top: <span class="number">100</span>%;</div><div class="line">  height: <span class="number">0</span>px;</div><div class="line">  background-color: white;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在这里我们使用 <code>padding-top:100%</code> 撑开容器高度使它等于容器宽度。</p>
<p>第二个细节是为了在 retina 屏上获得清晰的显示效果，我们将 Canvas 的宽高增加一倍，然后通过 <code>transform: scale(0.5)</code> 来缩小到匹配容器宽高。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#container canvas&#123;</div><div class="line">  position: absolute;</div><div class="line">  left: <span class="number">50</span>%;</div><div class="line">  top: <span class="number">50</span>%;</div><div class="line">  transform: translate(<span class="number">-50</span>%, <span class="number">-50</span>%) scale(<span class="number">0.5</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>由于 Canvas 的定位是 absolute，它本身的默认宽高并不等于容器的宽高，需要通过 JS 设置：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> width = <span class="number">2</span> * container.getBoundingClientRect().width;</div><div class="line">canvas.width = canvas.height = width;</div></pre></td></tr></table></figure></p>
<p>这样我们就可以通过在 Canvas 上绘制实心圆和连线来实现 UI 了。具体的方法在后续的内容里有更详细的讲解。</p>
<p>最后我们来看一下用 SVG 绘制：</p>
<p><a class="jsbin-embed" href="//code.h5jun.com/kuf/1/embed?html,css,js,output">JS Bin on jsbin.com</a><script src="https:////code.h5jun.com/js/embed.min.js?3.40.2"></script></p>
<p>由于 SVG 原生操作的 API 不是很方便，这里使用了 Snap.svg 库，实现起来和使用 Canvas 大同小异，这里就不赘述了。</p>
<p>SVG 的问题是移动端兼容性不如 DOM 和 Canvas 好。</p>
<p>综合上面三者的情况，最终我选择使用 Canvas 来实现。</p>
<h2 id="结构设计"><a href="#结构设计" class="headerlink" title="结构设计"></a>结构设计</h2><p>使用 Canvas 实现的话 DOM 结构就比较简单。为了响应式，我们需要实现一个自适应宽度的正方形容器，方法前面已经介绍过。接着在容器中创建 Canvas。这里需要注意的一点是，我们应当把 Canvas 分层。这是因为 Canvas 的渲染机制里，要更新画布的内容，需要刷新要更新的区域重新绘制。因为我们有必要把频繁变化的内容和基本不变的内容分层管理，这样能显著提升性能。</p>
<h3 id="分成-3-个图层"><a href="#分成-3-个图层" class="headerlink" title="分成 3 个图层"></a>分成 3 个图层</h3><p><img src="https://p4.ssl.qhimg.com/t01e8fbcac1b8d2f472.png" alt=""></p>
<p>在这里我把 UI 分别绘制在 3 个图层里，对应 3 个 Canvas。最上层只有随着手指头移动的那个线段，中间是九个点，最下层是已经绘制好的线。之所以这样分，是因为随手指头移动的那条线需要不断刷新，底下两层都不用频繁更新，但是把连好的线放在最底层是因为我要做出圆点把线的一部分遮挡住的效果。</p>
<h3 id="确定圆点的位置"><a href="#确定圆点的位置" class="headerlink" title="确定圆点的位置"></a>确定圆点的位置</h3><p><img src="https://p0.ssl.qhimg.com/t01a663c97f0dd807e3.png" alt=""></p>
<p>圆点的位置有两种定位法，第一种是九个九宫格，圆点在小九宫格的中心位置。如果认真的同学，已经发现在前面 DOM 方案里，我们就是采用这样的方式，圆点的直径为 11.1%。第二种方式是用横竖三条线把宽高四等分，圆点在这些线的交点处。</p>
<p>在 Canvas 里我们采用第二种方法来确定圆点（代码里的 n = 3）。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> range = <span class="built_in">Math</span>.round(width / (n + <span class="number">1</span>));</div><div class="line"></div><div class="line"><span class="keyword">let</span> circles = [];</div><div class="line"></div><div class="line"><span class="comment">//drawCircleCenters</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">1</span>; j &lt;= n; j++)&#123;</div><div class="line">    <span class="keyword">let</span> y = range * i, x = range * j;</div><div class="line">    drawSolidCircle(circleCtx, fgColor, x, y, innerRadius);</div><div class="line">    <span class="keyword">let</span> circlePoint = &#123;x, y&#125;;</div><div class="line">    circlePoint.pos = [i, j];</div><div class="line">    circles.push(circlePoint);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最后一点，严格说不属于结构设计，但是因为我们的 UI 是通过触屏操作，我们需要考虑 Touch 事件处理和坐标的转换。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCanvasPoint</span>(<span class="params">canvas, x, y</span>)</span>&#123;</div><div class="line">  <span class="keyword">let</span> rect = canvas.getBoundingClientRect();</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    x: <span class="number">2</span> * (x - rect.left), </div><div class="line">    y: <span class="number">2</span> * (y - rect.top),</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们将 Touch 相对于屏幕的坐标转换为 Canvas 相对于画布的坐标。代码里的 2 倍是因为我们前面说了要让 retina 屏下清晰，我们将 Canvas 放大为原来的 2 倍。</p>
<h2 id="API-设计"><a href="#API-设计" class="headerlink" title="API 设计"></a>API 设计</h2><p>接下来我们需要设计给使用者使用的 API 了。在这里，我们将组件功能分解一下，独立出一个单纯记录手势的 Recorder。将组件功能分解为更加底层的组件，是一种简化组件设计的常用模式。</p>
<p><img src="https://p5.ssl.qhimg.com/t01cf2097cf8acb1cb7.png" alt=""></p>
<p>我们抽取出底层的 Recorder，让 Locker 继承 Recorder，Recorder 负责记录，Locker 管理实际的设置和验证密码的过程。</p>
<p>我们的 Recorder 只负责记录用户行为，由于用户操作是异步操作，我们将它设计为 Promise 规范的 API，它可以以如下方式使用：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> recorder = <span class="keyword">new</span> HandLock.Recorder(&#123;</div><div class="line">  container: <span class="built_in">document</span>.querySelector(<span class="string">'#main'</span>)</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">recorded</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span>(res.err)&#123;</div><div class="line">    <span class="built_in">console</span>.error(res.err);</div><div class="line">    recorder.clearPath();</div><div class="line">    <span class="keyword">if</span>(res.err.message !== HandLock.Recorder.ERR_USER_CANCELED)&#123;</div><div class="line">      recorder.record().then(recorded);</div><div class="line">    &#125;</div><div class="line">  &#125;<span class="keyword">else</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(res.records);</div><div class="line">    recorder.record().then(recorded);</div><div class="line">  &#125;      </div><div class="line">&#125;</div><div class="line"></div><div class="line">recorder.record().then(recorded);</div></pre></td></tr></table></figure></p>
<p>对于输出结果，我们简单用选中圆点的行列坐标拼接起来得到一个唯一的序列。例如 “11121323” 就是如下选择图形：</p>
<p><img src="https://p4.ssl.qhimg.com/t012a1dd06ae9814468.png" alt=""></p>
<p>为了让 UI 显示具有灵活性，我们还可以将外观配置抽取出来。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> defaultOptions = &#123;</div><div class="line">  container: <span class="literal">null</span>, <span class="comment">//创建canvas的容器，如果不填，自动在 body 上创建覆盖全屏的层</span></div><div class="line">  focusColor: <span class="string">'#e06555'</span>,  <span class="comment">//当前选中的圆的颜色</span></div><div class="line">  fgColor: <span class="string">'#d6dae5'</span>,     <span class="comment">//未选中的圆的颜色</span></div><div class="line">  bgColor: <span class="string">'#fff'</span>,        <span class="comment">//canvas背景颜色</span></div><div class="line">  n: <span class="number">3</span>, <span class="comment">//圆点的数量： n x n</span></div><div class="line">  innerRadius: <span class="number">20</span>,  <span class="comment">//圆点的内半径</span></div><div class="line">  outerRadius: <span class="number">50</span>,  <span class="comment">//圆点的外半径，focus 的时候显示</span></div><div class="line">  touchRadius: <span class="number">70</span>,  <span class="comment">//判定touch事件的圆半径</span></div><div class="line">  render: <span class="literal">true</span>,     <span class="comment">//自动渲染</span></div><div class="line">  customStyle: <span class="literal">false</span>, <span class="comment">//自定义样式</span></div><div class="line">  minPoints: <span class="number">4</span>,     <span class="comment">//最小允许的点数</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>这样我们实现完整的 Recorder 对象，核心代码如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div></pre></td><td class="code"><pre><div class="line">[...] <span class="comment">//定义一些私有方法</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> defaultOptions = &#123;</div><div class="line">  container: <span class="literal">null</span>, <span class="comment">//创建canvas的容器，如果不填，自动在 body 上创建覆盖全屏的层</span></div><div class="line">  focusColor: <span class="string">'#e06555'</span>,  <span class="comment">//当前选中的圆的颜色</span></div><div class="line">  fgColor: <span class="string">'#d6dae5'</span>,     <span class="comment">//未选中的圆的颜色</span></div><div class="line">  bgColor: <span class="string">'#fff'</span>,        <span class="comment">//canvas背景颜色</span></div><div class="line">  n: <span class="number">3</span>, <span class="comment">//圆点的数量： n x n</span></div><div class="line">  innerRadius: <span class="number">20</span>,  <span class="comment">//圆点的内半径</span></div><div class="line">  outerRadius: <span class="number">50</span>,  <span class="comment">//圆点的外半径，focus 的时候显示</span></div><div class="line">  touchRadius: <span class="number">70</span>,  <span class="comment">//判定touch事件的圆半径</span></div><div class="line">  render: <span class="literal">true</span>,     <span class="comment">//自动渲染</span></div><div class="line">  customStyle: <span class="literal">false</span>, <span class="comment">//自定义样式</span></div><div class="line">  minPoints: <span class="number">4</span>,     <span class="comment">//最小允许的点数</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Recorder</span></span>&#123;</div><div class="line">  <span class="keyword">static</span> get ERR_NOT_ENOUGH_POINTS()&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'not enough points'</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">static</span> get ERR_USER_CANCELED()&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'user canceled'</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">static</span> get ERR_NO_TASK()&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'no task'</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">constructor</span>(options)&#123;</div><div class="line">    options = <span class="built_in">Object</span>.assign(&#123;&#125;, defaultOptions, options);</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.options = options;</div><div class="line">    <span class="keyword">this</span>.path = [];</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(options.render)&#123;</div><div class="line">      <span class="keyword">this</span>.render();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  render()&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.circleCanvas) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> options = <span class="keyword">this</span>.options;</div><div class="line">    <span class="keyword">let</span> container = options.container || <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(!options.container &amp;&amp; !options.customStyle)&#123;</div><div class="line">      <span class="built_in">Object</span>.assign(container.style, &#123;</div><div class="line">        position: <span class="string">'absolute'</span>,</div><div class="line">        top: <span class="number">0</span>,</div><div class="line">        left: <span class="number">0</span>,</div><div class="line">        width: <span class="string">'100%'</span>,</div><div class="line">        height: <span class="string">'100%'</span>,</div><div class="line">        lineHeight: <span class="string">'100%'</span>,</div><div class="line">        overflow: <span class="string">'hidden'</span>,</div><div class="line">        backgroundColor: options.bgColor</div><div class="line">      &#125;);</div><div class="line">      <span class="built_in">document</span>.body.appendChild(container); </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">this</span>.container = container;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> &#123;width, height&#125; = container.getBoundingClientRect();</div><div class="line"></div><div class="line">    <span class="comment">//画圆的 canvas，也是最外层监听事件的 canvas</span></div><div class="line">    <span class="keyword">let</span> circleCanvas = <span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>); </div><div class="line"></div><div class="line">    <span class="comment">//2 倍大小，为了支持 retina 屏</span></div><div class="line">    circleCanvas.width = circleCanvas.height = <span class="number">2</span> * <span class="built_in">Math</span>.min(width, height);</div><div class="line">    <span class="keyword">if</span>(!options.customStyle)&#123;</div><div class="line">      <span class="built_in">Object</span>.assign(circleCanvas.style, &#123;</div><div class="line">        position: <span class="string">'absolute'</span>,</div><div class="line">        top: <span class="string">'50%'</span>,</div><div class="line">        left: <span class="string">'50%'</span>,</div><div class="line">        transform: <span class="string">'translate(-50%, -50%) scale(0.5)'</span>, </div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//画固定线条的 canvas</span></div><div class="line">    <span class="keyword">let</span> lineCanvas = circleCanvas.cloneNode(<span class="literal">true</span>);</div><div class="line"></div><div class="line">    <span class="comment">//画不固定线条的 canvas</span></div><div class="line">    <span class="keyword">let</span> moveCanvas = circleCanvas.cloneNode(<span class="literal">true</span>);</div><div class="line"></div><div class="line">    container.appendChild(lineCanvas);</div><div class="line">    container.appendChild(moveCanvas);</div><div class="line">    container.appendChild(circleCanvas);</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.lineCanvas = lineCanvas;</div><div class="line">    <span class="keyword">this</span>.moveCanvas = moveCanvas;</div><div class="line">    <span class="keyword">this</span>.circleCanvas = circleCanvas;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.container.addEventListener(<span class="string">'touchmove'</span>, </div><div class="line">      evt =&gt; evt.preventDefault(), &#123;<span class="attr">passive</span>: <span class="literal">false</span>&#125;);</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.clearPath();</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">  &#125;</div><div class="line">  clearPath()&#123;</div><div class="line">    <span class="keyword">if</span>(!<span class="keyword">this</span>.circleCanvas) <span class="keyword">this</span>.render();</div><div class="line"></div><div class="line">    <span class="keyword">let</span> &#123;circleCanvas, lineCanvas, moveCanvas&#125; = <span class="keyword">this</span>,</div><div class="line">        circleCtx = circleCanvas.getContext(<span class="string">'2d'</span>),</div><div class="line">        lineCtx = lineCanvas.getContext(<span class="string">'2d'</span>),</div><div class="line">        moveCtx = moveCanvas.getContext(<span class="string">'2d'</span>),</div><div class="line">        width = circleCanvas.width,</div><div class="line">        &#123;n, fgColor, innerRadius&#125; = <span class="keyword">this</span>.options;</div><div class="line"></div><div class="line">    circleCtx.clearRect(<span class="number">0</span>, <span class="number">0</span>, width, width);</div><div class="line">    lineCtx.clearRect(<span class="number">0</span>, <span class="number">0</span>, width, width);</div><div class="line">    moveCtx.clearRect(<span class="number">0</span>, <span class="number">0</span>, width, width);</div><div class="line"></div><div class="line">    <span class="keyword">let</span> range = <span class="built_in">Math</span>.round(width / (n + <span class="number">1</span>));</div><div class="line"></div><div class="line">    <span class="keyword">let</span> circles = [];</div><div class="line"></div><div class="line">    <span class="comment">//drawCircleCenters</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">1</span>; j &lt;= n; j++)&#123;</div><div class="line">        <span class="keyword">let</span> y = range * i, x = range * j;</div><div class="line">        drawSolidCircle(circleCtx, fgColor, x, y, innerRadius);</div><div class="line">        <span class="keyword">let</span> circlePoint = &#123;x, y&#125;;</div><div class="line">        circlePoint.pos = [i, j];</div><div class="line">        circles.push(circlePoint);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.circles = circles;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">async</span> cancel()&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.recordingTask)&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.recordingTask.cancel();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(&#123;<span class="attr">err</span>: <span class="keyword">new</span> <span class="built_in">Error</span>(Recorder.ERR_NO_TASK)&#125;);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">async</span> record()&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.recordingTask) <span class="keyword">return</span> <span class="keyword">this</span>.recordingTask.promise;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> &#123;circleCanvas, lineCanvas, moveCanvas, options&#125; = <span class="keyword">this</span>,</div><div class="line">        circleCtx = circleCanvas.getContext(<span class="string">'2d'</span>),</div><div class="line">        lineCtx = lineCanvas.getContext(<span class="string">'2d'</span>),</div><div class="line">        moveCtx = moveCanvas.getContext(<span class="string">'2d'</span>);</div><div class="line"></div><div class="line">    circleCanvas.addEventListener(<span class="string">'touchstart'</span>, ()=&gt;&#123;</div><div class="line">      <span class="keyword">this</span>.clearPath();</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="keyword">let</span> records = [];</div><div class="line"></div><div class="line">    <span class="keyword">let</span> handler = <span class="function"><span class="params">evt</span> =&gt;</span> &#123;</div><div class="line">      <span class="keyword">let</span> &#123;clientX, clientY&#125; = evt.changedTouches[<span class="number">0</span>],</div><div class="line">          &#123;bgColor, focusColor, innerRadius, outerRadius, touchRadius&#125; = options,</div><div class="line">          touchPoint = getCanvasPoint(moveCanvas, clientX, clientY);</div><div class="line"></div><div class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.circles.length; i++)&#123;</div><div class="line">        <span class="keyword">let</span> point = <span class="keyword">this</span>.circles[i],</div><div class="line">            x0 = point.x,</div><div class="line">            y0 = point.y;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(distance(point, touchPoint) &lt; touchRadius)&#123;</div><div class="line">          drawSolidCircle(circleCtx, bgColor, x0, y0, outerRadius);</div><div class="line">          drawSolidCircle(circleCtx, focusColor, x0, y0, innerRadius);</div><div class="line">          drawHollowCircle(circleCtx, focusColor, x0, y0, outerRadius);</div><div class="line"></div><div class="line">          <span class="keyword">if</span>(records.length)&#123;</div><div class="line">            <span class="keyword">let</span> p2 = records[records.length - <span class="number">1</span>],</div><div class="line">                x1 = p2.x,</div><div class="line">                y1 = p2.y;</div><div class="line"></div><div class="line">            drawLine(lineCtx, focusColor, x0, y0, x1, y1);</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          <span class="keyword">let</span> circle = <span class="keyword">this</span>.circles.splice(i, <span class="number">1</span>);</div><div class="line">          records.push(circle[<span class="number">0</span>]);</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">if</span>(records.length)&#123;</div><div class="line">        <span class="keyword">let</span> point = records[records.length - <span class="number">1</span>],</div><div class="line">            x0 = point.x,</div><div class="line">            y0 = point.y,</div><div class="line">            x1 = touchPoint.x,</div><div class="line">            y1 = touchPoint.y;</div><div class="line"></div><div class="line">        moveCtx.clearRect(<span class="number">0</span>, <span class="number">0</span>, moveCanvas.width, moveCanvas.height);</div><div class="line">        drawLine(moveCtx, focusColor, x0, y0, x1, y1);        </div><div class="line">      &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line"></div><div class="line">    circleCanvas.addEventListener(<span class="string">'touchstart'</span>, handler);</div><div class="line">    circleCanvas.addEventListener(<span class="string">'touchmove'</span>, handler);</div><div class="line"></div><div class="line">    <span class="keyword">let</span> recordingTask = &#123;&#125;;</div><div class="line">    <span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">      recordingTask.cancel = <span class="function">(<span class="params">res = &#123;&#125;</span>) =&gt;</span> &#123;</div><div class="line">        <span class="keyword">let</span> promise = <span class="keyword">this</span>.recordingTask.promise;</div><div class="line"></div><div class="line">        res.err = res.err || <span class="keyword">new</span> <span class="built_in">Error</span>(Recorder.ERR_USER_CANCELED);</div><div class="line">        circleCanvas.removeEventListener(<span class="string">'touchstart'</span>, handler);</div><div class="line">        circleCanvas.removeEventListener(<span class="string">'touchmove'</span>, handler);</div><div class="line">        <span class="built_in">document</span>.removeEventListener(<span class="string">'touchend'</span>, done);</div><div class="line">        resolve(res);</div><div class="line">        <span class="keyword">this</span>.recordingTask = <span class="literal">null</span>;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> promise;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">let</span> done = <span class="function"><span class="params">evt</span> =&gt;</span> &#123;</div><div class="line">        moveCtx.clearRect(<span class="number">0</span>, <span class="number">0</span>, moveCanvas.width, moveCanvas.height);</div><div class="line">        <span class="keyword">if</span>(!records.length) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">        circleCanvas.removeEventListener(<span class="string">'touchstart'</span>, handler);</div><div class="line">        circleCanvas.removeEventListener(<span class="string">'touchmove'</span>, handler);</div><div class="line">        <span class="built_in">document</span>.removeEventListener(<span class="string">'touchend'</span>, done);</div><div class="line"></div><div class="line">        <span class="keyword">let</span> err = <span class="literal">null</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(records.length &lt; options.minPoints)&#123;</div><div class="line">          err = <span class="keyword">new</span> <span class="built_in">Error</span>(Recorder.ERR_NOT_ENOUGH_POINTS);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//这里可以选择一些复杂的编码方式，本例子用最简单的直接把坐标转成字符串</span></div><div class="line">        <span class="keyword">let</span> res = &#123;err, <span class="attr">records</span>: records.map(<span class="function"><span class="params">o</span> =&gt;</span> o.pos.join(<span class="string">''</span>)).join(<span class="string">''</span>)&#125;;</div><div class="line"></div><div class="line">        resolve(res);</div><div class="line">        <span class="keyword">this</span>.recordingTask = <span class="literal">null</span>;</div><div class="line">      &#125;;</div><div class="line">      <span class="built_in">document</span>.addEventListener(<span class="string">'touchend'</span>, done);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    recordingTask.promise = promise;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.recordingTask = recordingTask;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> promise;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>它的几个公开的方法，recorder 负责记录绘制结果， clearPath 负责在画布上清除上一次记录的结果，cancel 负责终止记录过程，这是为后续流程准备的。</p>
<h2 id="流程设计"><a href="#流程设计" class="headerlink" title="流程设计"></a>流程设计</h2><p>接下来我们基于 Recorder 来设计设置和验证密码的流程：</p>
<h3 id="验证密码"><a href="#验证密码" class="headerlink" title="验证密码"></a>验证密码</h3><p><img src="https://p5.ssl.qhimg.com/t01c6fccad2c6c01576.png" alt=""></p>
<h3 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h3><p><img src="https://p4.ssl.qhimg.com/t0122f23e6530a7b6fb.png" alt=""></p>
<p>有了前面异步 Promise API 的 Recorder，我们不难实现上面的两个流程。</p>
<h3 id="验证密码的内部流程"><a href="#验证密码的内部流程" class="headerlink" title="验证密码的内部流程"></a>验证密码的内部流程</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span> check(password)&#123;</div><div class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>.mode !== Locker.MODE_CHECK)&#123;</div><div class="line">    <span class="keyword">await</span> <span class="keyword">this</span>.cancel();</div><div class="line">    <span class="keyword">this</span>.mode = Locker.MODE_CHECK;</div><div class="line">  &#125;  </div><div class="line"></div><div class="line">  <span class="keyword">let</span> checked = <span class="keyword">this</span>.options.check.checked;</div><div class="line"></div><div class="line">  <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="keyword">this</span>.record();</div><div class="line"></div><div class="line">  <span class="keyword">if</span>(res.err &amp;&amp; res.err.message === Locker.ERR_USER_CANCELED)&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(res);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">if</span>(!res.err &amp;&amp; password !== res.records)&#123;</div><div class="line">    res.err = <span class="keyword">new</span> <span class="built_in">Error</span>(Locker.ERR_PASSWORD_MISMATCH)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  checked.call(<span class="keyword">this</span>, res);</div><div class="line">  <span class="keyword">this</span>.check(password);</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(res);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="设置密码的内部流程"><a href="#设置密码的内部流程" class="headerlink" title="设置密码的内部流程"></a>设置密码的内部流程</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span> update()&#123;</div><div class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>.mode !== Locker.MODE_UPDATE)&#123;</div><div class="line">    <span class="keyword">await</span> <span class="keyword">this</span>.cancel();</div><div class="line">    <span class="keyword">this</span>.mode = Locker.MODE_UPDATE;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">let</span> beforeRepeat = <span class="keyword">this</span>.options.update.beforeRepeat, </div><div class="line">      afterRepeat = <span class="keyword">this</span>.options.update.afterRepeat;</div><div class="line"></div><div class="line">  <span class="keyword">let</span> first = <span class="keyword">await</span> <span class="keyword">this</span>.record();</div><div class="line"></div><div class="line">  <span class="keyword">if</span>(first.err &amp;&amp; first.err.message === Locker.ERR_USER_CANCELED)&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(first);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">if</span>(first.err)&#123;</div><div class="line">    <span class="keyword">this</span>.update();</div><div class="line">    beforeRepeat.call(<span class="keyword">this</span>, first);</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(first);   </div><div class="line">  &#125;</div><div class="line"></div><div class="line">  beforeRepeat.call(<span class="keyword">this</span>, first);</div><div class="line"></div><div class="line">  <span class="keyword">let</span> second = <span class="keyword">await</span> <span class="keyword">this</span>.record();      </div><div class="line"></div><div class="line">  <span class="keyword">if</span>(second.err &amp;&amp; second.err.message === Locker.ERR_USER_CANCELED)&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(second);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">if</span>(!second.err &amp;&amp; first.records !== second.records)&#123;</div><div class="line">    second.err = <span class="keyword">new</span> <span class="built_in">Error</span>(Locker.ERR_PASSWORD_MISMATCH);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">this</span>.update();</div><div class="line">  afterRepeat.call(<span class="keyword">this</span>, second);</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(second);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，有了 Recorder 之后，Locker 的验证和设置密码基本上就是顺着流程用 async/await 写下来就行了。</p>
<h2 id="细节问题"><a href="#细节问题" class="headerlink" title="细节问题"></a>细节问题</h2><p>实际手机触屏时，如果上下拖动，浏览器有默认行为，会导致页面上下移动，需要阻止 touchmove 的默认事件。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.container.addEventListener(<span class="string">'touchmove'</span>, </div><div class="line">      evt =&gt; evt.preventDefault(), &#123;<span class="attr">passive</span>: <span class="literal">false</span>&#125;);</div></pre></td></tr></table></figure></p>
<p>这里仍然需要注意的一点是， touchmove 事件在 chrome 下默认是一个 <a href="https://dom.spec.whatwg.org/#in-passive-listener-flag" target="_blank" rel="external">Passive Event</a>，因此 addEventListener 的时候需要传参 {passive: false}，否则的话不能 preventDefault。</p>
<h2 id="工具-amp-工程化"><a href="#工具-amp-工程化" class="headerlink" title="工具 &amp; 工程化"></a>工具 &amp; 工程化</h2><p>因为我们的代码使用了 ES6+，所以需要引入 babel 编译，我们的组件也使用 webpack 进行打包，以便于使用者在浏览器中直接引入。</p>
<p>这方面的内容，在之前的<a href="https://www.h5jun.com/post/using-webpack2-and-npm-scripts.html" target="_blank" rel="external">博客里有介绍，</a>这里就不再一一说明。</p>
<p>最后，具体的代码可以直接<a href="https://github.com/akira-cn/handlock" target="_blank" rel="external">查看 GitHub 工程</a>。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上就是今天要讲的全部内容，这里面有几个点我想再强调一下：</p>
<ol>
<li>在设计 API 的时候思考真正的需求，判断什么该开放、什么该封装</li>
<li>做好技术调研和核心方案研究，选择合适的方案</li>
<li>优化和解决细节问题</li>
</ol>
<p>最后，如有任何问题，欢迎大家在下方评论区探讨。</p>
<p>本文链接：<a href="https://www.h5jun.com/post/handlock-comp.html" target="_blank" rel="external">https://www.h5jun.com/post/handlock-comp.html</a></p>
]]></content>
      
        <categories>
            
            <category> 编程实战 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> 工程化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[实现font-size响应式]]></title>
      <url>https://dsb123dsb.github.io/2017/04/28/%E5%AE%9E%E7%8E%B0font-size%E5%93%8D%E5%BA%94%E5%BC%8F/</url>
      <content type="html"><![CDATA[<blockquote>
<p>纸上得来终觉浅，绝知此事要躬行</p>
</blockquote>
<p>前几天看阮一峰微博发了个简略的响应式字体的代码，专门搜了下文章系统地学习了一遍—–<a href="https://segmentfault.com/a/1190000006824046" target="_blank" rel="external">原文猛搓——</a><br>本文样式代码采用 SCSS。</p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>那么多的文章讲了响应式的网站如何布局，使用 CSS 如何实现，如何 Blah Blah 的。但是，我们都忘了很重要的一点——对字体大小的响应式控制。<br>现在的很多网站，从布局上来说，尽管是响应式的(当然，或许可以说成所谓响应式的)。但是，从字体上来说，却不一定是响应式的。虽然，每个网站可能会通过某些方式(比如频繁使用<code>@media</code> )来让自己的网站在不同的屏幕大小下显示不同大小的字体，但是，这样不能叫做响应式，这<em>只是一种适应式</em>的做法。</p>
<p>那么，怎么样才能对我们的 font-size 实现真正的响应式呢？</p>
<p>我们需要做的主要有以下两点：</p>
<ol>
<li><p>制定一个最大的和最小的屏幕宽度值，我们的 <code>font-size</code> 应该是在这个屏幕范围内平滑均匀的变化；<br>不可能让字体大小一直不停的变化。试想一下，自己一直缩小或者方法浏览器，字体一直变小或者变大的场景。</p>
</li>
<li><p>制定最大和最小的 <code>font-siz</code>e，屏幕大小小于最小的屏幕宽度值的时候，应用最小的 font-size，反之，应用最大的 font-size；</p>
</li>
</ol>
<p>OK，计划制定好了，那么，应该如何实施呢？我们需要用到哪些技术呢？<br>其实要用到的技术不多，只是，我们需要把脑子转一下。</p>
<ul>
<li>@media：CSS Level 3 提供的媒体查询，只要做过响应式，或者任何适应屏幕功能的肯定用过这个属性。所以，在此不过多解释此属性，详细可查看 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media" target="_blank" rel="external">@media | MDN</a></li>
<li>vw：Viewport 单位，1vw 相当于屏幕宽度的百分之一。此处也不过多解释，详细可查看<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/length" target="_blank" rel="external"> length | CSS</a></li>
<li>calc：这是 CSS 提供的一个非常强大的属性，可以用来动态计算 CSS 的值。我们的功能主要就是通过这个函数来实现。详细可查看 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/calc" target="_blank" rel="external">calc | MDN</a></li>
</ul>
<p>OK，需要的技术也齐全了。那么，现在就来一步一步实现。<br><a id="more"></a></p>
<h1 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h1><p>按照上文中所说的计划那样，我们需要定义四个值，他们分别是最小屏幕宽度，最大屏幕宽度，最小字体，最大字体<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">	$min-font-size: 14px;</div><div class="line">	$max-font-size: 18px;</div><div class="line">	$min-screen: 600px;</div><div class="line">	$max-screen: 1200px;</div><div class="line">`</div></pre></td></tr></table></figure></p>
<p>不过，使用 px 来定义字体大小显得不是很优雅，我们可以使用 rem 来定义我们的字体。那么，这时候，就需要先对网站的根元素设置字体大小了。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-pseudo">:root</span> &#123;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">10px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后，再来更新我们的变量。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$min-font-size: 1.4rem;</div><div class="line">$max-font-size: 1.8rem;</div><div class="line">$min-screen: 600px;</div><div class="line">$max-screen: 1200px;</div></pre></td></tr></table></figure></p>
<p>我们把我们的变量定义和根元素的 font-size 放在文件的顶部。在这里，我们就不写那些相关的 reset 等样式了。</p>
<h1 id="加入测试内容"><a href="#加入测试内容" class="headerlink" title="加入测试内容"></a>加入测试内容</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>This is Header.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">article</span>&gt;</span></div><div class="line">        Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</div><div class="line">    <span class="tag">&lt;/<span class="name">article</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="使用-media-对限制字体大小边界值"><a href="#使用-media-对限制字体大小边界值" class="headerlink" title="使用 @media 对限制字体大小边界值"></a>使用 <code>@media</code> 对限制字体大小边界值</h1><p>上文中说过，在我们的屏幕宽度小于 600px 的时候，字体大小为 1.4rem，屏幕宽度大于 1200px 的时候，字体大小为 1.8rem。这个功能实现起来很简单，只需要应用相应的一小段媒体查询就行了。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">media</span> (min-width: $max-screen) &#123;</div><div class="line">    <span class="selector-tag">article</span> &#123;</div><div class="line">        <span class="attribute">font-size</span>: $max-font-size;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">media</span> (max-width: $min-screen) &#123;</div><div class="line">    <span class="selector-tag">article</span> &#123;</div><div class="line">        <span class="attribute">font-size</span>: $min-font-size;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>OK，就这么一段代码，我们就可以将字体大小的边界值进行限制。在屏幕宽度小于或者大于对应的屏幕宽度值的时候，我们的字体大小都会保持在一个恒定的值。</p>
<p>那么，边界限制做好了，接下来就是要实现真正的响应式了。怎么说呢？我们要让我们的 <code>font-size</code> 在 <code>600px ~ 1200px</code> 的屏幕宽度范围内平滑的变化。当然，这还不够，并不是说，只是给 <code>font-size</code> 设置一个百分比或者任何其他的相对单位，然后让这个字体能够在放大缩小屏幕的同时也能够放大缩小。我们要做的，是要通过精确的大小控制来实现响应式。</p>
<h1 id="使用-calc-函数实现字体大小的响应式"><a href="#使用-calc-函数实现字体大小的响应式" class="headerlink" title="使用 calc 函数实现字体大小的响应式"></a>使用 <code>calc</code> 函数实现字体大小的响应式</h1><p>仔细看看上文中对字体大小边界值的限制的代码，已经有两个 <code>@media</code> 了，在这个部分，我们肯定还要加一个 <code>@media</code>，是不是显得有点多余？所以，我们可以稍微精简一下。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">article</span> &#123;</div><div class="line">    <span class="attribute">font-size</span>: $min-font-size;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">media</span> (min-width: $min-screen) and (max-width: $max-screen) &#123;</div><div class="line">    // ...</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">media</span> (min-width: $max-screen) &#123;</div><div class="line">    <span class="selector-tag">article</span> &#123;</div><div class="line">        <span class="attribute">font-size</span>: $max-font-size;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>只要两个 <code>@media</code> 其实就够了。对于不在媒体查询范围内的，只需要设置一个默认值就行了。但是，要注意的是，这个默认值一定要写在两个媒体查询规则的前面。否则，会由于 CSS 的层叠的特性，后声明的样式会覆盖掉先声明的样式，从而导致媒体查询规则不起作用。</p>
<p>那么，要实现在这个屏幕宽度范围内精确平滑的变化，肯定需要用到一点数学计算。</p>
<ol>
<li><p>font-size 变化的范围是 1.8rem - 1.4rem = 0.4rem；</p>
</li>
<li><p>屏幕宽度的变化范围是 1200px - 600px = 600px；</p>
</li>
<li><p>最小的 font-size 是 1.4rem。那么，屏幕宽度只要大于 600px，这个值肯定会增加，同时，只要屏幕宽度达到 1200px，这个值也达到 1.8rem，然后便不再变化；</p>
</li>
</ol>
<p>可以看下图：</p>
<p><img src="http://i.imgur.com/EeID4wK.jpg" alt=""></p>
<p>比如，我们现在有三种屏幕宽度，分别是 600px，1000px，1200px。那么，仔细观察左边的参考线，我们将最小的那个屏幕宽度去掉，相当于就剩下了两个值，一个是 a，一个是 b。</p>
<p>由于 <code>1200px</code> 是我们设置的屏幕宽度的最大值，那么，也就是说，b 的变化范围最大也就是 a 的长度。通俗一点说就是，可以把 a 和 b 看成进度条，a 为 100% 的长度，b 为不断增加或者减少的长度。所以，这里就存在了一个比例值，当 b 为 0 的时候，这个比例也为 0，当 b 为 100% 的时候，这个比例就是 1。</p>
<p>那么，按照这样的思路，转换到对应 font-size 的变化：变化范围是 0.4rem，这是分母，那么，分子该如何计算呢？我们怎么知道字体增加了多少呢？</p>
<p>此处肯定是没有减少的。我们是在 600px ~ 1200px 之间变化的，最小的字体为 1.4rem，无论怎么算，字体大小都不会再减小了。<br>所以，此处还有一个小小的转换。想一想，我们变化的不只是字体大小，还有屏幕宽度也在变化。所以，就像图片解释的那样，可以使用屏幕宽度的计算来得到一个相应的比例，然后，乘以 font-size 的变化范围 0.4rem，就可以得到我们增加的字体大小了。然后，在最小 font-size 的基础之上加上这个变化的范围，就可以得到在对应屏幕宽度下的精准的 font-size了。</p>
<p>所以，使用 <code>calc</code> 可以这样写：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">media</span> (min-width: $min-screen) and (max-width: $max-screen) &#123;</div><div class="line">    <span class="selector-tag">article</span> &#123;</div><div class="line">        <span class="attribute">font-size</span>: <span class="built_in">calc</span>($min-font-size + (1.8 - 1.4) * ((<span class="number">100vw</span> - $min-screen) / (<span class="number">1200</span> - <span class="number">600</span>)));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注意，<code>calc</code> 函数在计算除法的时候，/ 右边只能是数字，不能带单位。<code>*</code> 要求至少一个参数是数字。</p>
</blockquote>
<p>对这个式子我也解释一下，可以看到，其中有个表达式是 <code>100vw - 600px</code>，这是什么意思呢？<br>转换成文字：浏览器可视区域的宽度减去最小宽度。</p>
<p>其实理解起来很简单，举个例子：假设现在屏幕宽度为 <code>1000px</code>，那么，<code>100vw - 600px</code> 得到的结果为 <code>400px</code>，然后，除以 600，最后得到的是 2 / 3。然后，这个值去乘以 <code>0.4rem</code>，那么，这样就能计算出增加的字体大小值了，然后加上 <code>1.4rem</code>，就能得到最终的一个 <code>font-size</code>了。</p>
<p>所以，就这样，我们就对 <code>font-size</code> 实现了响应式。不用再通过各种屏幕大小的媒体查询来变化了。<br>值得庆幸的是，此规则对于 <code>line-height</code> 同样适用。</p>
<p>以下是完整的 SCSS 代码：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">$min-font-size: 1.4rem;</div><div class="line">$max-font-size: 1.8rem;</div><div class="line">$min-screen: 600px;</div><div class="line">$max-screen: 1200px;</div><div class="line"></div><div class="line"><span class="selector-pseudo">:root</span> &#123;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">10px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">article</span> &#123;</div><div class="line">    <span class="attribute">font-size</span>: $min-font-size;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">media</span> (min-width: $min-screen) and (max-width: $max-screen) &#123;</div><div class="line">    <span class="selector-tag">article</span> &#123;</div><div class="line">        <span class="attribute">font-size</span>: <span class="built_in">calc</span>($min-font-size + (2 - 1.4) * ((<span class="number">100vw</span> - $min-screen) / (<span class="number">1200</span> - <span class="number">800</span>)));</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">media</span> (min-width: $max-screen) &#123;</div><div class="line">    <span class="selector-tag">article</span> &#123;</div><div class="line">        <span class="attribute">font-size</span>: $max-font-size;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>References</p>
<p>   <a href="https://madebymike.com.au/writing/precise-control-responsive-typography/" target="_blank" rel="external">Precise control over responsive typography</a></p>
<p>   <a href="http://blog.typekit.com/2016/08/17/flexible-typography-with-css-locks/?utm_source=Responsive+Design+Weekly&amp;utm_campaign=dbc98f86d4-Responsive_Design_Weekly_222&amp;utm_medium=email&amp;utm_term=0_df65b6d7c8-dbc98f86d4-59087657&amp;goal=0_df65b6d7c8-dbc98f86d4-59087657&amp;mc_cid=dbc98f86d4&amp;mc_eid=142e875650" target="_blank" rel="external">Flexible typography with CSS locks</a></p>
]]></content>
      
        <categories>
            
            <category> 技术分享 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
            <tag> 响应式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vue2.0仿饿了么webApp踩坑指南]]></title>
      <url>https://dsb123dsb.github.io/2017/04/17/vue2-0%E4%BB%BF%E9%A5%BF%E4%BA%86%E4%B9%88webApp%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8D%97/</url>
      <content type="html"><![CDATA[<blockquote>
<p>纸上得来终觉浅，绝知此事要躬行</p>
</blockquote>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>对于vue之前一直都是看官方文档，做一些小的demo，没有完整做过练手项目，慕课网上看到滴滴vue.js权威指南的作者黄轶评价很好，完整的学习了一遍，对于vue的理解也有更大提高，不过视频是网上找的没有花钱买（以后有钱了一定支持作者版权）是vue1.0版本，而构建项目时已经是2.0了，而且很多npm依赖包也有升级，踩了很多坑，做下总结</p>
<h1 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h1><h2 id="html节点创建。"><a href="#html节点创建。" class="headerlink" title="html节点创建。"></a>html节点创建。</h2><p>2.0默认渲染成带有正确链接的 <code>&lt;a&gt;</code> 标签，可以通过配置 tag 属性生成别的标签，比1.0直接写死的好处(摘自官方文档):</p>
<ol>
<li>无论是<code>HTML5 history</code>模式还是<code>hash</code>模式，表现行为一致，所以，当你要切换路由模式，或者在IE9降级使用<code>hash</code>模式，无须作任何变动。</li>
<li>在 HTML5 history 模式下，<code>router-link</code> 会拦截点击事件，让浏览器不在重新加载页面。</li>
<li>当你在 HTML5 history 模式下使用 base 选项之后，所有的 to 属性都不需要写（基路径）了。</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">   <span class="comment">&lt;!-- vue-router1.0创建路由 --&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-link</span>=<span class="string">"&#123; path: '/foo' &#125;"</span>&gt;</span>Go to Foo<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-link</span>=<span class="string">"&#123; path: '/bar' &#125;"</span>&gt;</span>Go to Bar<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">   <span class="comment">&lt;!-- 2.0使用 router-link 组件来导航. --&gt;</span></div><div class="line">   <span class="comment">&lt;!-- 通过传入 `to` 属性指定链接. --&gt;</span></div><div class="line">   <span class="comment">&lt;!-- &lt;router-link&gt; 默认会被渲染成一个 `&lt;a&gt;` 标签 --&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/foo"</span>&gt;</span>Go to Foo<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/bar"</span>&gt;</span>Go to Bar<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></div><div class="line">   <span class="comment">&lt;!-- 路由出口没有神马变化 --&gt;</span></div><div class="line">   <span class="comment">&lt;!-- 路由匹配到的组件将渲染在这里 --&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></div></pre></td></tr></table></figure>
<p>值得一提的是2.0将若切换路由时要保留之前状态，将<code>keep-alive</code>属性改成<code>&lt;keep-alive&gt;&lt;/keep-alive&gt;</code>标签</p>
<h2 id="js定义路由"><a href="#js定义路由" class="headerlink" title="js定义路由"></a>js定义路由</h2><p>2.0定义路由更加方便，删除了一些方法，创建router，可以直接将组件作为一个对象传入，然后把router挂载到根实例就好<br><a id="more"></a></p>
<h1 id="v-for-遍历数组对象时的参数顺序变更"><a href="#v-for-遍历数组对象时的参数顺序变更" class="headerlink" title="v-for 遍历数组对象时的参数顺序变更"></a>v-for 遍历数组对象时的参数顺序变更</h1><p>当包含 index或key 时，之前遍历数组对象时的参数顺序是 (index, value)和(key, value)。现在是 (value, index)和(value, key) ，来和 JavaScript 的原生数组方法以及常见的对象迭代器（例如 forEach 和 map）保持一致。<br>同时使用index和key时移除了 $index 和 $key 这两个隐式声明变量，以便在 v-for 中显式定义。这可以使没有太多 Vue 开发经验的开发者更好地阅读代码，并且在处理嵌套循环时也能产生更清晰的行为。</p>
<h1 id="transition参数替换"><a href="#transition参数替换" class="headerlink" title="transition参数替换"></a>transition参数替换</h1><p>Vue 的过渡系统有了彻底的改变，现在通过使用 <code>&lt;transition&gt;</code> 和 <code>&lt;transition-group&gt;</code> 来包裹元素实现过渡效果，而不再使用 transition 属性<br>在新的过渡系统中，可以通过模板复用过渡效果。</p>
<h1 id="v-el和v-ref替换"><a href="#v-el和v-ref替换" class="headerlink" title="v-el和v-ref替换"></a>v-el和v-ref替换</h1><p> <code>v-el</code>和<code>v-ref</code>合并为一个<code>ref</code>属性了，可以在组件实例中通过 <code>$refs</code> 来调用。这意味着 <code>v-el:my-element</code> 将写成这样： <code>ref=&quot;myElement&quot;</code>， <code>v-ref:my-component</code> 变成了这样： <code>ref=&quot;myComponent&quot;</code>。绑定在一般元素上时，<code>ref</code> 指<code>DOM</code>元素，绑定在组件上时，<code>ref</code> 为一组件实例。<br>因为 <code>v-ref</code> 不再是一个指令了而是一个特殊的属性，它也可以被动态定义了。这样在和<code>v-for</code> 结合的时候是很有用的：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span> <span class="attr">v-bind:ref</span>=<span class="string">"'item' + item.id"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>以前 <code>v-el/v-ref</code> 和<code>v-for</code> 一起使用将产生一个<code>DOM</code>数组或者组件数组，因为没法给每个元素一个特定名字。现在你还仍然可以这样做，给每个元素一个同样的<code>ref</code>：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span> <span class="attr">ref</span>=<span class="string">"items"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>和 1.x 中不同， <code>$refs</code> 不是响应的，因为它们在渲染过程中注册/更新。只有监听变化并重复渲染才能使它们响应。<br>另一方面，设计<code>$refs</code>主要是提供给 <code>js</code> 程序访问的，并不建议在模板中过度依赖使用它。因为这意味着在实例之外去访问实例状态，违背了 Vue 数据驱动的思想。</p>
<h1 id="dispatch-和-broadcast-替换"><a href="#dispatch-和-broadcast-替换" class="headerlink" title="$dispatch 和 $broadcast 替换"></a>$dispatch 和 $broadcast 替换</h1><p><code>$dispatch</code> 和 <code>$broadcast</code> 已经被弃用。可使用更多简明清晰的组件间通信和更好的状态管理方案，如：Vuex.<br>基于组件树结构的事件流方式实在是让人难以理解，并且在组件结构扩展的过程中会变得越来越脆弱。这种事件方式确实不太好，$dispatch 和 $broadcast 也没有解决兄弟组件间的通信问题。<br>对于$dispatch 和 $broadcast最简单的升级方式就是：通过使用事件中心，允许组件自由交流，无论组件处于组件树的哪一层。<strong>由于 Vue 实例实现了一个事件分发接口，你可以通过实例化一个空的 Vue 实例来实现这个目的</strong>。<br>这些方法的最常见用途之一是父子组件的相互通信。在这些情况下，你可以使用 v-on监听子组件上 $emit 的变化。这可以允许你很方便的添加事件显性。<br>然而，如果是跨多层父子组件通信的话， $emit 并没有什么用。相反，用集中式的事件中间件可以做到简单的升级。这会让组件之间的通信非常顺利，即使是兄弟组件。因为 Vue 通过事件发射器接口执行实例，实际上你可以使用一个空的 Vue 实例。</p>
<h1 id="生命周期钩子"><a href="#生命周期钩子" class="headerlink" title="生命周期钩子"></a>生命周期钩子</h1><h2 id="ready-替换"><a href="#ready-替换" class="headerlink" title="ready 替换"></a>ready 替换</h2><p>使用新的 mounted 钩子函数替代。应该注意的是，使用 mounted 并不能保证钩子函数中的 this.$el 在 document 中。为此还应该引入 <code>Vue.nextTick</code>/<code>vm.$nextTick</code>。</p>
<h1 id="stylus"><a href="#stylus" class="headerlink" title="stylus"></a>stylus</h1><p>有一次<code>stylus</code>中tab空格中手动输入了一个空格，导致页面一直渲染不出来，eslint也没很好检查出来，记得卡了一晚上，最后才发现，这应该是我印象最深刻得了<br>下面这幅图是正常的情况<br><img src="http://i.imgur.com/62qCsXA.png" alt=""></p>
<p>这里是我不小心手动输入的一个空格，注意红色方框部分<br><img src="http://i.imgur.com/xMX1qcH.png" alt=""></p>
<p>上面两幅图都是把代码选中是的显示，如果不选中，是一模一样的，其实就算选中也很难注意到，而且我是直接在第一幅图的代码基础上手动插入的一个空格，但是我们看到代码并没有因为我多输入一个空格和代码也相应后移，所以这是很难发现的问题</p>
<p>最后放一张自己做完的效果图：</p>
<p><img src="http://i.imgur.com/Ww7HXAo.png" alt=""></p>
<p>总结：当时vue的迁移变化我踩坑是并不知道官方有个专门的迁移指南，全是查找的文档对比区别的，现在才是看的官方迁移指南文档总结的，也算自己踩坑印象更加深刻吧，后面再有新的发现会继续添加</p>
]]></content>
      
        <categories>
            
            <category> 编程实战 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue.js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[图片放大镜效果实现]]></title>
      <url>https://dsb123dsb.github.io/2017/04/03/%E5%9B%BE%E7%89%87%E6%94%BE%E5%A4%A7%E9%95%9C%E6%95%88%E6%9E%9C%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<blockquote>
<p>纸上得来终觉浅，绝知此事要躬行</p>
</blockquote>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前放大镜效果都是用jquery的插件，具体实现也没认真想过，看到一个demo感觉不错，mark下来，<a href="http://www.cnblogs.com/ys-ys/p/6642304.html" target="_blank" rel="external">原来地址猛戳</a></p>
<p>由项目需要，原生写了个详情页图片放大镜的效果，扔上代码供学习分享，也作为日常笔记…</p>
<p>效果如图(例子中偷偷链了张天猫的图片，希望没啥事 -。-)：</p>
<p><img src="http://i.imgur.com/He1ZJU4.gif" alt=""><br><a id="more"></a></p>
<h1 id="实现过程教简单css"><a href="#实现过程教简单css" class="headerlink" title="实现过程教简单css"></a>实现过程教简单css</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/* 图片容器 */</span></div><div class="line"><span class="selector-class">.imgBox</span>&#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">200px</span>; <span class="comment">/* 各位大老爷们看着办 */</span></div><div class="line">  <span class="attribute">height</span>: <span class="number">200px</span>; <span class="comment">/* 各位大老爷们看着办 */</span></div><div class="line">  <span class="attribute">position</span>: relative; <span class="comment">/* 必需 */</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 图片标签 */</span></div><div class="line"><span class="selector-class">.mainImg</span>&#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100%</span>; <span class="comment">/* 各位大老爷们看着办，尽量100%好看些[斜眼笑] */</span></div><div class="line">  <span class="attribute">height</span>: <span class="number">100%</span>; <span class="comment">/* 各位大老爷们看着办，尽量100%好看些[斜眼笑] */</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 遮罩层-既放大区域 */</span></div><div class="line"><span class="selector-class">.glass</span>&#123;</div><div class="line">  <span class="attribute">position</span>: absolute; <span class="comment">/* 必需 */</span></div><div class="line">  <span class="attribute">width</span>: <span class="number">50px</span>; <span class="comment">/* 遮罩层宽度 此处是放大4倍，所以为200/4=50 */</span></div><div class="line">  <span class="attribute">height</span>: <span class="number">50px</span>; <span class="comment">/* 遮罩层高度 此处是放大4倍，所以为200/4=50  */</span></div><div class="line">  <span class="attribute">top</span>: -<span class="number">9999px</span>; <span class="comment">/* 绝对位置，先放远些 */</span></div><div class="line">  <span class="attribute">left</span>: -<span class="number">9999px</span>; <span class="comment">/* 绝对位置，先放远些 */</span></div><div class="line">  <span class="attribute">cursor</span>: move; <span class="comment">/* 鼠标样式，好看些 */</span></div><div class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(0,0,180,0.5); <span class="comment">/* 遮罩层样式，好看些 */</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 大图所在的容器 */</span></div><div class="line"><span class="selector-class">.imgMax</span>&#123;</div><div class="line">  <span class="attribute">position</span>: absolute;  <span class="comment">/* 必需 */</span></div><div class="line">  <span class="attribute">overflow</span>: hidden; <span class="comment">/* 必需，盖掉超出的大图[斜眼笑] */</span></div><div class="line">  <span class="attribute">left</span>: <span class="number">210px</span>; <span class="comment">/* 必需，此处为距原图左边10像素 */</span></div><div class="line">  <span class="attribute">top</span>: <span class="number">0</span>; <span class="comment">/* 必需，此处为距上边0像素 */</span></div><div class="line">  <span class="attribute">width</span>: <span class="number">200px</span>; <span class="comment">/* 放大图片容器的宽度 此处此处是放大4倍，为200，保持和原图容器一般大，若此处为400，则是放大2*4倍，那么相应的放大图片应该是200*4*2=1600 */</span></div><div class="line">  <span class="attribute">height</span>: <span class="number">200px</span>; <span class="comment">/* 放大图片容器的高度 此处此处是放大4倍，为200，保持和原图容器一般大，若此处为400，则是放大2*4倍，那么相应的放大图片应该是200*4*2=1600 */</span></div><div class="line">  <span class="attribute">display</span>: none; <span class="comment">/* 先隐藏 */</span></div><div class="line">&#125;</div><div class="line"><span class="selector-class">.maxImg</span>&#123;</div><div class="line">  <span class="attribute">position</span>: absolute; <span class="comment">/* 必需 */</span></div><div class="line">  <span class="attribute">width</span>: <span class="number">800px</span>; <span class="comment">/* 此处是放大4倍，所以为200*4=800  受放大图片所在的容器影响，规则如上 */</span></div><div class="line">  <span class="attribute">height</span>: <span class="number">800px</span>; <span class="comment">/* 此处是放大4倍，所以为200*4=800  受放大图片所在的容器影响，规则如上 */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面css中需要注意的就是几个position和缩放比例，注意调整下即可</p>
<h1 id="来看看布局-html"><a href="#来看看布局-html" class="headerlink" title="来看看布局-html"></a>来看看布局-html</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">&lt;!-- 图片容器 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"J_imgBox imgBox"</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 需要放大的图片-原始图 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"J_mainImg mainImg"</span> <span class="attr">src</span>=<span class="string">"http://img.alicdn.com/bao/uploaded/i7/TB1Xpe_NXXXXXXRXFXXGTq09XXX_035318.jpg_430x430q90.jpg"</span> /&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 遮罩-既放大的区域 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"J_glass glass"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 大图的容器 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"J_imgMax imgMax"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 大图 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"J_maxImg maxImg"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="主要的js代码"><a href="#主要的js代码" class="headerlink" title="主要的js代码"></a>主要的js代码</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">/* 放大镜函数</span></div><div class="line"><span class="comment">    ** @imgContainer  需要实现放大镜效果的图片容器  此处是 class 为 J_imgBox 的 div</span></div><div class="line"><span class="comment">    */</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">imgZoom</span>(<span class="params">imgContainer</span>)</span>&#123;</div><div class="line"></div><div class="line">      <span class="comment">// 取大图url，不知道淘宝图片规则如何，反正看了详情页的大图和小图url对比，随便写了个替换</span></div><div class="line">      <span class="keyword">var</span> imgUrl = imgContainer.querySelector(<span class="string">'.J_mainImg'</span>).src.replace(<span class="regexp">/\.(jpg|jpeg|png|gif)(_)(\d+)(x)(\d+)(q90)?/g</span>,<span class="string">''</span>);</div><div class="line"></div><div class="line">      <span class="comment">// 取大图标签的节点</span></div><div class="line">      <span class="keyword">var</span> maxImg = imgContainer.querySelector(<span class="string">'.J_maxImg'</span>);</div><div class="line"></div><div class="line">      <span class="comment">// 给该节点的src属性赋值为大图的url</span></div><div class="line">      maxImg.src = imgUrl;</div><div class="line"></div><div class="line">      <span class="comment">// 取大图所在的容器</span></div><div class="line">      <span class="keyword">var</span> maxImgContainer = imgContainer.querySelector(<span class="string">'.J_imgMax'</span>);</div><div class="line"></div><div class="line">      <span class="comment">// 取遮罩块</span></div><div class="line">      <span class="keyword">var</span> glassBlock = imgContainer.querySelector(<span class="string">'.J_glass'</span>);</div><div class="line"></div><div class="line">      <span class="comment">// 取消放大镜效果</span></div><div class="line">      <span class="keyword">var</span> hideMaxImg = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        glassBlock.style.top = <span class="string">'-9999px'</span>;</div><div class="line">        glassBlock.style.left = <span class="string">'-9999px'</span>;</div><div class="line">        maxImgContainer.style.display = <span class="string">'none'</span>;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">// 鼠标移出图片区域，取消放大镜效果</span></div><div class="line">      imgContainer.onmouseout = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">        event.stopPropagation();</div><div class="line">        hideMaxImg();</div><div class="line">      &#125;;</div><div class="line"></div><div class="line">      <span class="comment">// 鼠标在图片区域内移动事件</span></div><div class="line">      imgContainer.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">        event.stopPropagation();</div><div class="line"></div><div class="line">        <span class="comment">// 取图片容器的大小及其相对于视口的位置，需要实时取，所以放在move事件里</span></div><div class="line">        <span class="keyword">var</span> clientRect = event.currentTarget.getBoundingClientRect();</div><div class="line"></div><div class="line">        <span class="comment">// 获取距鼠标距的上和左的坐标</span></div><div class="line">        <span class="keyword">var</span> leftX = event.clientX - clientRect.left;</div><div class="line">        <span class="keyword">var</span> leftY = event.clientY - clientRect.top;</div><div class="line"></div><div class="line">        <span class="comment">// 动态设置遮罩块的left和top位置  这里需要减去遮罩层的一半，因为鼠标位于遮罩块中心点</span></div><div class="line">        <span class="keyword">var</span> pointerLeft = leftX - <span class="number">25</span>;</div><div class="line">        <span class="keyword">var</span> pointerTop = leftY - <span class="number">25</span>;</div><div class="line"></div><div class="line">        <span class="comment">// 如果鼠标坐标移动超出原始图片区域边缘 则取消放大镜效果  因为这里存在快速移动鼠标到大图区域时，鼠标仍处在外层的图片区域内，并不会触发mouseout事件(虽然中间隔了小小的间距，但是快速移动仍能产生这个bug,如代码下面的图所示)</span></div><div class="line">        <span class="keyword">if</span>((pointerLeft+<span class="number">25</span>) &gt; clientRect.width || pointerLeft &lt; <span class="number">0</span> - <span class="number">25</span> || (pointerTop+<span class="number">25</span>) &gt; clientRect.height || pointerTop &lt; <span class="number">0</span> - <span class="number">25</span>)&#123;</div><div class="line">          hideMaxImg();</div><div class="line">          <span class="keyword">return</span> !<span class="number">1</span>;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="comment">// 遮罩块在最左边的时候，鼠标仍在图片区域内，可在遮罩块左边缘至中心线区域内移动，且这时遮罩块为距左0像素</span></div><div class="line">        <span class="keyword">if</span>(pointerLeft &lt; <span class="number">0</span>)&#123;</div><div class="line">          pointerLeft = <span class="number">0</span>;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="comment">// 同上 右边限制</span></div><div class="line">        <span class="keyword">if</span>(pointerLeft &gt; clientRect.width - <span class="number">50</span>)&#123;</div><div class="line">          pointerLeft = clientRect.width - <span class="number">50</span>;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="comment">// 同上 顶部限制</span></div><div class="line">        <span class="keyword">if</span>(pointerTop &lt; <span class="number">0</span>)&#123;</div><div class="line">          pointerTop = <span class="number">0</span>;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="comment">// 同上 底部限制</span></div><div class="line">        <span class="keyword">if</span>(pointerTop &gt; clientRect.height - <span class="number">50</span>)&#123;</div><div class="line">          pointerTop = clientRect.height - <span class="number">50</span>;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="comment">// 设置遮罩块的位置</span></div><div class="line">        glassBlock.style.left = pointerLeft+<span class="string">'px'</span>;</div><div class="line">        glassBlock.style.top = pointerTop+<span class="string">'px'</span>;</div><div class="line"></div><div class="line">        <span class="comment">// 取遮罩快距离左边的位置和图片区域的宽高比，用于计算大图偏移距离，展示遮罩块所对应的图片区域</span></div><div class="line">        <span class="keyword">var</span> percentLeft = pointerLeft/clientRect.width;</div><div class="line">        <span class="keyword">var</span> percentHeight = pointerTop/clientRect.height;</div><div class="line"></div><div class="line">        <span class="comment">// 设置大图偏移距离 因为其父元素存在 overflow:hidden 所以只会展示对应区块</span></div><div class="line">        maxImg.style.left = -(percentLeft*maxImg.clientWidth)+<span class="string">'px'</span>;</div><div class="line">        maxImg.style.top = -(percentHeight*maxImg.clientHeight)+<span class="string">'px'</span>;</div><div class="line">		maxImgContainer.style.display = <span class="string">'block'</span>;<span class="comment">//显示大图容器</span></div><div class="line">      &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> elem = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.J_imgBox'</span>);</div><div class="line"></div><div class="line">    elem.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item,idx</span>)</span>&#123;</div><div class="line">      imgZoom(item)</div><div class="line">    &#125;)</div><div class="line">  &#125;)()</div></pre></td></tr></table></figure>
<h1 id="出来在平常开发中比较实用的知识"><a href="#出来在平常开发中比较实用的知识" class="headerlink" title="出来在平常开发中比较实用的知识"></a>出来在平常开发中比较实用的知识</h1><ol>
<li>Element.getBoundingClientRect()<br>Element.getBoundingClientRect()方法返回元素的大小及其相对于视口的位置</li>
<li>event.target 和 event.currentTarget<ul>
<li>target：指向触发事件的元素</li>
<li>currentTarget：指向被绑定事件句柄的元素,只有当绑定的事件处理程序与触发该事件处理程序都为同一个对象的时候，两者相同</li>
</ul>
</li>
<li>event.preventDefault() &amp; event.stopPropagation()<ul>
<li>preventDefault：如果事件可取消，则取消该事件，而不停止事件的进一步传播</li>
<li>stopPropagation：阻止捕获和冒泡阶段中当前事件的进一步传播</li>
</ul>
</li>
<li>event.stopPropagation() &amp;event.stopImmediatePropagation()<ul>
<li>stopPropagation：阻止捕获和冒泡阶段中当前事件的进一步传播</li>
<li>stopImmediatePropagation：阻止元素上调用相同事件的其他事件监听并阻止冒泡</li>
</ul>
</li>
</ol>
<p>虽然都是些简单的知识点，在平常开发中也是很实用的，希望能从细节出发，没事多复习复习 -。-~</p>
<p>后来一时兴起将放大镜写的更傻瓜式配置的插件了… <a href="https://github.com/Program-Monkey/imageZoom/blob/master/imageZoom.js" target="_blank" rel="external">点我看代码(github地址)</a></p>
<h1 id="imageZoom-js"><a href="#imageZoom-js" class="headerlink" title="imageZoom.js"></a>imageZoom.js</h1><p>最后我把作者封装的插件代码写在下面<br>只需要使用者写一个标签和写图片大小即可的了 0.0 , 只需要配置imgContainer的大小和必须的position:relative，然后写个div ，写上对应class和 图片地址data-src，然后js里调用下imageZoom就行了<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">window</span>)</span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">imageZoom</span>(<span class="params">elem,options</span>)</span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> settings = &#123;</div><div class="line">      imgZoom : options &amp;&amp; options.imgZoom || <span class="number">2</span>,</div><div class="line">      marginLeft: options &amp;&amp; options.marginLeft || <span class="number">0</span>,</div><div class="line">      marginTop: options &amp;&amp; options.marginTop || <span class="number">0</span>,</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 获取图片节点</span></div><div class="line">    <span class="keyword">var</span> imgContainer = elem;</div><div class="line"></div><div class="line">    <span class="comment">// 获取图片url</span></div><div class="line">    <span class="keyword">var</span> imgUrl = imgContainer.getAttribute(<span class="string">'data-src'</span>)</div><div class="line">    </div><div class="line">    <span class="comment">//  you need to write your own RegExp to replace my RegExp . This is important ！！！</span></div><div class="line">    <span class="comment">// 用自己的正则代替这里的  因为对图片处理的参数不尽相同，比如我们公司就是?imageView/w/300/h/300</span></div><div class="line">    <span class="keyword">var</span> originalUrl = imgUrl.replace(<span class="regexp">/\.(jpg|jpeg|png|gif)(_)(\d+)(x)(\d+)(q90)?/g</span>,<span class="string">''</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 获取图片节点位置</span></div><div class="line">    <span class="keyword">var</span> elemClientRect = imgContainer.getBoundingClientRect();</div><div class="line"></div><div class="line">    <span class="comment">// 生成小图html</span></div><div class="line">    <span class="keyword">var</span> minImgHtml = <span class="string">'&lt;img style="width:100%;height:100%" src="'</span> + imgUrl + <span class="string">'" /&gt;'</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(!settings.marginLeft &amp;&amp; !settings.marginTop)&#123;</div><div class="line">      settings.marginLeft = elemClientRect.width+<span class="number">10</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 生成遮罩html</span></div><div class="line">    <span class="keyword">var</span> glassWidth = elemClientRect.width/settings.imgZoom;</div><div class="line">    <span class="keyword">var</span> glassHeight = elemClientRect.height/settings.imgZoom;</div><div class="line">    <span class="keyword">var</span> glassStyle = <span class="string">'width:'</span> + glassWidth + <span class="string">'px;height:'</span> + glassHeight + <span class="string">'px;'</span>+<span class="string">'position:absolute;top: -9999px;left: -9999px;cursor: move;background: rgba(0,0,180,0.5);'</span></div><div class="line">    <span class="keyword">var</span> glassHtml = <span class="string">'&lt;div class="J_glass" style="'</span> + glassStyle + <span class="string">'" &gt;&lt;/div&gt;'</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 生成大图</span></div><div class="line">    <span class="keyword">var</span> maxImgStyle = <span class="string">'position:absolute;width:'</span> + (elemClientRect.width * settings.imgZoom) + <span class="string">'px;height:'</span> + (elemClientRect.height * settings.imgZoom) + <span class="string">'px;'</span>;</div><div class="line">    <span class="keyword">var</span> maxImgHtml = <span class="string">'&lt;img class="J_maxImg" src="'</span> + originalUrl + <span class="string">'" style="'</span> + maxImgStyle + <span class="string">'" /&gt;'</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 生成大图容器</span></div><div class="line">    <span class="keyword">var</span> maxContainerStyle = <span class="string">'position:absolute;left:'</span> + settings.marginLeft + <span class="string">'px;top:'</span>+ settings.marginTop +<span class="string">'px;width:'</span> + elemClientRect.width + <span class="string">';height:'</span> + elemClientRect.height + <span class="string">';overflow:hidden;display:none'</span>;</div><div class="line">    <span class="keyword">var</span> maxContainerHtml = <span class="string">'&lt;div class="J_imgMax" style="'</span> + maxContainerStyle + <span class="string">'"&gt;'</span> + maxImgHtml + <span class="string">'&lt;/div&gt;'</span>;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> contentHtml = minImgHtml + glassHtml + maxContainerHtml;</div><div class="line"></div><div class="line">    imgContainer.innerHTML = contentHtml;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> maxImgContainer = imgContainer.querySelector(<span class="string">'.J_imgMax'</span>);</div><div class="line">    <span class="keyword">var</span> glassBlock = imgContainer.querySelector(<span class="string">'.J_glass'</span>);</div><div class="line">    <span class="keyword">var</span> maxImg = imgContainer.querySelector(<span class="string">'.J_maxImg'</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 隐藏大图&amp;遮罩</span></div><div class="line">    <span class="keyword">var</span> hideMaxImg = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        glassBlock.style.top = <span class="string">'-9999px'</span>;</div><div class="line">        glassBlock.style.left = <span class="string">'-9999px'</span>;</div><div class="line">        maxImgContainer.style.display = <span class="string">'none'</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    imgContainer.onmouseover = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">      event.stopPropagation();</div><div class="line">      maxImgContainer.style.display = <span class="string">'block'</span>;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    imgContainer.onmouseout = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">      event.stopPropagation();</div><div class="line">      hideMaxImg();</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    imgContainer.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">      event.stopPropagation();</div><div class="line">      <span class="keyword">var</span> clientRect = event.currentTarget.getBoundingClientRect();</div><div class="line">      <span class="comment">// 获取左右上下坐标</span></div><div class="line">      <span class="keyword">var</span> leftX = event.clientX - clientRect.left;</div><div class="line">      <span class="keyword">var</span> leftY = event.clientY - clientRect.top;</div><div class="line">      <span class="comment">// 动态设置遮罩范围值</span></div><div class="line">      <span class="keyword">var</span> pointerLeft = leftX - glassWidth/<span class="number">2</span>;</div><div class="line">      <span class="keyword">var</span> pointerTop = leftY - glassHeight/<span class="number">2</span>;</div><div class="line">      <span class="keyword">if</span>((pointerLeft+glassWidth/<span class="number">2</span>) &gt; clientRect.width || pointerLeft &lt; <span class="number">0</span> - glassWidth/<span class="number">2</span> || (pointerTop+glassHeight/<span class="number">2</span>) &gt; clientRect.height || pointerTop &lt; <span class="number">0</span> - glassHeight/<span class="number">2</span>)&#123;</div><div class="line">        hideMaxImg();</div><div class="line">        <span class="keyword">return</span> !<span class="number">1</span>;</div><div class="line">      &#125;;</div><div class="line">      <span class="keyword">if</span>(pointerLeft &lt; <span class="number">0</span>)&#123;</div><div class="line">        pointerLeft = <span class="number">0</span>;</div><div class="line">      &#125;;</div><div class="line">      <span class="keyword">if</span>(pointerLeft &gt; clientRect.width - glassWidth)&#123;</div><div class="line">        pointerLeft = clientRect.width - glassWidth;</div><div class="line">      &#125;;</div><div class="line">      <span class="keyword">if</span>(pointerTop &lt; <span class="number">0</span>)&#123;</div><div class="line">        pointerTop = <span class="number">0</span>;</div><div class="line">      &#125;;</div><div class="line">      <span class="keyword">if</span>(pointerTop &gt; clientRect.height - glassHeight)&#123;</div><div class="line">        pointerTop = clientRect.height - glassHeight;</div><div class="line">      &#125;;</div><div class="line">      glassBlock.style.left = pointerLeft;</div><div class="line">      glassBlock.style.top = pointerTop;</div><div class="line">      <span class="keyword">var</span> percentLeft = pointerLeft/clientRect.width;</div><div class="line">      <span class="keyword">var</span> percentHeight = pointerTop/clientRect.height;</div><div class="line">      maxImg.style.left = -(percentLeft*maxImg.clientWidth)+<span class="string">'px'</span>;</div><div class="line">      maxImg.style.top = -(percentHeight*maxImg.clientHeight)+<span class="string">'px'</span>;</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">window</span>.imageZoom = imageZoom;<span class="comment">//挂载到全局对象</span></div><div class="line">&#125;)(<span class="built_in">window</span>)</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 编程实战 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[仿百度搜索框智能提示实现]]></title>
      <url>https://dsb123dsb.github.io/2017/03/26/%E4%BB%BF%E7%99%BE%E5%BA%A6%E6%90%9C%E7%B4%A2%E6%A1%86%E6%99%BA%E8%83%BD%E6%8F%90%E7%A4%BA%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<blockquote>
<p>纸上得来终觉浅，绝知此事要躬行</p>
</blockquote>
<p>找工作难，找实习难，找实习这段时间对自己心里磨砺也是很大，要多写、多看、多温故。前段时间做了到笔试编程题目要求编写类似百度搜索自动完成控件，当时没有写的很完善，花了点时间仔细整理写了下<br>具体题目要求如图：</p>
<p><img src="http://i.imgur.com/uv8rCAP.jpg" alt=""></p>
<p>具体思路：</p>
<ol>
<li>HTML的oninput事件可以监控input输入，不过题目要求兼容IE8,当时并没有想到，回来查资料有个onproperty事件可以</li>
<li>自动完成的列表项使用fragement文档片段插入，这要比逐个插入效率高很多，<code>visibility</code>设置<code>hidden</code>，当用监控到户输入匹配项时，更改为<code>visible</code>，</li>
<li>提示列表鼠标悬浮变色：css伪类<code>li：hover</code></li>
<li>点击列表项时，值插入输入框：采用事件委托绑定click事件<a id="more"></a>
</li>
</ol>
<p>代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//js部分</span></div><div class="line"><span class="keyword">var</span> EventUntil=&#123;<span class="comment">//跨浏览器事件处理</span></div><div class="line">	addhandler:<span class="function"><span class="keyword">function</span>(<span class="params">element,type,handler</span>)</span>&#123;</div><div class="line">		<span class="keyword">if</span>(element.addEventListener)&#123;</div><div class="line">			element.addEventListener(type,handler,<span class="literal">false</span>);</div><div class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(element.attachEvent)&#123;</div><div class="line">			element.attachEvent(<span class="string">'on'</span>+type,handler);</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			element[<span class="string">'on'</span>+type]=handler;</div><div class="line">		&#125;</div><div class="line">	&#125;,</div><div class="line">	getEvent:<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> event?event:<span class="built_in">window</span>.event;</div><div class="line">	&#125;,</div><div class="line">	getTarget:<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> event.target||event.srcElement;</div><div class="line">	&#125;,</div><div class="line">	preventDefeault:<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">		<span class="keyword">if</span>(preventDefeault)&#123;</div><div class="line">			event.preventDefeault();</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			event.returnValue=<span class="literal">false</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;,</div><div class="line">	removhandler:<span class="function"><span class="keyword">function</span>(<span class="params">element,type,handler</span>)</span>&#123;</div><div class="line">		<span class="keyword">if</span>(event.removeEventListener)&#123;</div><div class="line">			element.removeEventListener(type,handler,<span class="literal">false</span>);</div><div class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(element.detachEvent)&#123;</div><div class="line">			element.detachEvent(<span class="string">'on'</span>+type,handler);</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			element[<span class="string">'on'</span>+type]=<span class="literal">null</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;,</div><div class="line">	stopPropagation:<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">		<span class="keyword">if</span>(event.stopPropagation)&#123;</div><div class="line">			event.stopPropagation();</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			event.cancelBubble=<span class="literal">true</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"><span class="comment">//具体逻辑代码</span></div><div class="line"><span class="keyword">var</span> arr=[<span class="string">"前端学习路线"</span>,<span class="string">"前端工程师"</span>,<span class="string">"前端开发"</span>,<span class="string">"前端框架"</span>],</div><div class="line">	box=<span class="built_in">document</span>.getElementById(<span class="string">"input"</span>),</div><div class="line">	dis=<span class="built_in">document</span>.getElementById(<span class="string">"dis"</span>);</div><div class="line"><span class="keyword">var</span> el=<span class="literal">false</span>;<span class="comment">//标识已经插入</span></div><div class="line">EventUntil.addhandler(box,<span class="string">'input'</span>,(event)=&gt;&#123;<span class="comment">//1.监听键盘输入</span></div><div class="line">	event=EventUntil.getEvent(event);</div><div class="line">	<span class="built_in">console</span>.log(event);</div><div class="line">	<span class="keyword">if</span>(box.value==<span class="string">"前端"</span>)&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">"显示候选"</span>);</div><div class="line">		<span class="keyword">var</span> frageMent=<span class="built_in">document</span>.createDocumentFragment(),</div><div class="line">			ul=<span class="built_in">document</span>.getElementById(<span class="string">"ul"</span>);</div><div class="line">		<span class="keyword">if</span>(el===<span class="literal">false</span>)&#123;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;<span class="comment">//2.插入文档</span></div><div class="line">					<span class="keyword">var</span> texNode=<span class="built_in">document</span>.createTextNode(arr[i]);</div><div class="line">					<span class="keyword">var</span> li=<span class="built_in">document</span>.createElement(<span class="string">"li"</span>);</div><div class="line">					li.id=i;</div><div class="line">					li.appendChild(texNode);</div><div class="line">					frageMent.appendChild(li);</div><div class="line">			&#125;</div><div class="line">			ul.appendChild(frageMent);						</div><div class="line">		&#125;</div><div class="line">		el=<span class="literal">true</span>;</div><div class="line">		ul.onclick=<span class="function">(<span class="params">event</span>)=&gt;</span>&#123;<span class="comment">//事件委托  点击插入并且提示消失</span></div><div class="line">				box.value=arr[event.target.id];</div><div class="line">				dis.style.visibility=<span class="string">"hidden"</span>;</div><div class="line">			&#125;	</div><div class="line">		dis.style.visibility=<span class="string">"visible"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;);</div><div class="line">box.onporpertychange=<span class="function">(<span class="params">event</span>)=&gt;</span>&#123;<span class="comment">//1.监听键盘输入（兼容ie8）</span></div><div class="line">	<span class="built_in">console</span>.log(event);</div><div class="line">	<span class="keyword">if</span>(box.value==<span class="string">"a"</span>)&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">"显示候选"</span>)</div><div class="line">		dis.style.visibility=<span class="string">"visible"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//html部分</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"input"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"百度一下，你就知道"</span> <span class="attr">id</span>=<span class="string">"input"</span> <span class="attr">name</span>=<span class="string">""</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"dis"</span> <span class="attr">class</span>=<span class="string">"insert"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"ul"</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">//css部分</div><div class="line"><span class="selector-class">.container</span>&#123;</div><div class="line">	<span class="attribute">position</span>: absolute;</div><div class="line">         	<span class="attribute">top</span>: <span class="number">0</span>; <span class="attribute">left</span>: <span class="number">0</span>; <span class="attribute">bottom</span>: <span class="number">0</span>; <span class="attribute">right</span>: <span class="number">0</span>; </div><div class="line">	<span class="attribute">margin</span>: auto;</div><div class="line">	<span class="attribute">height</span>: <span class="number">60px</span>;</div><div class="line">	<span class="attribute">width</span>: <span class="number">50%</span>			</div><div class="line">&#125;</div><div class="line">.input&#123;;</div><div class="line">	<span class="selector-tag">height</span>: 45<span class="selector-tag">px</span>;</div><div class="line">	<span class="selector-tag">width</span>: 100%;</div><div class="line">	<span class="selector-tag">margin</span>: 0;</div><div class="line">	<span class="selector-tag">padding</span>: 0;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.insert</span>&#123;</div><div class="line">	<span class="attribute">position</span>: absolute;</div><div class="line">	<span class="attribute">top</span>: <span class="number">50px</span>;</div><div class="line">	<span class="attribute">width</span>: <span class="number">100.7%</span>;</div><div class="line">	<span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">	<span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">	<span class="attribute">visibility</span>: hidden;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">ul</span> &#123;</div><div class="line">	<span class="attribute">list-style-type</span>: none;</div><div class="line">	<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</div><div class="line">	<span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">	<span class="attribute">padding</span>:<span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*悬浮变色，替代 鼠标事件*/</span></div><div class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:hover</span>&#123;</div><div class="line">	<span class="attribute">background</span>: <span class="number">#eea</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后实现效果<br><img src="http://i.imgur.com/3EHyVLS.gif" alt=""></p>
<p>总结：做完感觉需求挺简单的，可是写的时候发现细节还是蛮多，查api测试算下来也花了将近两个小时才完善，汗颜。。而且写的也只是一个很简单的demo，继续努力fighting</p>
]]></content>
      
        <categories>
            
            <category> 编程实战 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 笔试 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[笔记-网易游戏笔试题目]]></title>
      <url>https://dsb123dsb.github.io/2017/03/11/%E7%AC%94%E8%AE%B0-%E7%BD%91%E6%98%93%E6%B8%B8%E6%88%8F%E7%AC%94%E8%AF%95%E9%A2%98%E7%9B%AE/</url>
      <content type="html"><![CDATA[<blockquote>
<p>纸上得来终觉浅，绝知此事要躬行</p>
</blockquote>
<ol>
<li><p>给定一个字符串，请你将字符串重新编码，将连续的字符替换成“连续出现的个数+字符”。比如字符串AAAABCCDAA会被编码成4A1B2C1D2A。</p>
<ul>
<li><p>常规解法：遍历字符串</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> key=<span class="string">"AAAABCCDAA"</span>,</div><div class="line">	result=<span class="string">""</span>,</div><div class="line">	lastKey=<span class="string">""</span>,</div><div class="line">	lastCount=<span class="number">0</span>,</div><div class="line">	currentKey;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;key.length;i++)&#123;</div><div class="line">	currentKey=key.substr(i,<span class="number">1</span>);<span class="comment">//获取当前字符</span></div><div class="line">	<span class="keyword">if</span>(lastKey==curentKey)&#123;<span class="comment">//判断当前字符是否读取完毕</span></div><div class="line">		lastCount++;<span class="comment">//读取当前字符个数</span></div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		<span class="keyword">if</span>(lastKey!=<span class="string">""</span>)&#123;</div><div class="line">			result+=lastKCount+lastKey;<span class="comment">//保存当前字符状态</span></div><div class="line">		&#125;</div><div class="line">		lastKey=currentKey;<span class="comment">//开始或者当前字符读取完毕重置为下个字符</span></div><div class="line">		lastCount=<span class="number">1</span>;<span class="comment">//开始或者重置下个字符个数</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//最后一个字符类别补全</span></div><div class="line">result += lastKeyCount + lastKey;</div><div class="line"><span class="built_in">console</span>.log(result);</div></pre></td></tr></table></figure>
</li>
<li><p>正则解法：<br>第二种方法，<code>replace</code>方法不多做解释，正则表达式中\1表示原子组，既第一个捕获组，*号表示匹配零个或者多个\1,replace方法第二个参数是个函数，函数两个参数分别为匹配项和第一个捕获组</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> key=<span class="string">"AAAABCCDAA"</span>;</div><div class="line"><span class="keyword">var</span> result=key.replace(<span class="regexp">/(\w)\1*/ig</span>,<span class="function"><span class="keyword">function</span>(<span class="params">s,v</span>)</span>&#123;<span class="keyword">return</span> s.length+v;&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<a id="more"></a>
]]></content>
      
        <categories>
            
            <category> 基础杂谈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 笔试 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[实现一个函数clone，可以对JavaScript中的5种主要数据类型进行值复制]]></title>
      <url>https://dsb123dsb.github.io/2017/03/09/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0clone%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%AF%B9JavaScript%E4%B8%AD%E7%9A%845%E7%A7%8D%E4%B8%BB%E8%A6%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BF%9B%E8%A1%8C%E5%80%BC%E5%A4%8D%E5%88%B6/</url>
      <content type="html"><![CDATA[<p>数据类型：（包括Number、String、Object、Array、Boolean、Null）;<br>主要思路typeof判断基本数据类型，然后对判定同属object的null、Array和object进行单独复制（遍历数组和对象并调用自身clone克隆内部成员）<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> o;</div><div class="line">	<span class="keyword">switch</span>(<span class="keyword">typeof</span> obj)&#123;</div><div class="line">		<span class="keyword">case</span> <span class="string">"undefined"</span>:</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> <span class="string">"string"</span>:</div><div class="line">			o=obj+<span class="string">""</span>;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> <span class="string">"number"</span>:</div><div class="line">			o=obj<span class="number">-0</span>;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> <span class="string">"object"</span>:<span class="comment">//object具体 分两种情况 对象（Object）或数组（Array）</span></div><div class="line">			<span class="keyword">if</span>(obj===<span class="literal">null</span>)&#123;</div><div class="line">				o=<span class="literal">null</span>;</div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">				<span class="keyword">if</span>(<span class="built_in">Object</span>.prototype.toString.call(obj).slice(<span class="number">8</span>,<span class="number">-1</span>)===<span class="string">"Array"</span>)&#123;</div><div class="line">					o=[];</div><div class="line">					<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;obj.length;i++)&#123;</div><div class="line">						o.push(clone(obj[i]));<span class="comment">//调用自身克隆数组对象内部成员</span></div><div class="line">					&#125;</div><div class="line">				&#125;<span class="keyword">else</span>&#123;</div><div class="line">					o=&#123;&#125;;</div><div class="line">					<span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> obj)&#123;</div><div class="line">						o[k]=clone(obj[k]);<span class="comment">//调用自身克隆对象内部成员</span></div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">default</span>;</div><div class="line">			o=obj;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> o;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 基础杂谈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js实现冒泡排序以及优化]]></title>
      <url>https://dsb123dsb.github.io/2017/03/07/js%E5%AE%9E%E7%8E%B0%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E4%BB%A5%E5%8F%8A%E4%BC%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<blockquote>
<p>纸上得来终觉浅，绝知此事要躬行</p>
</blockquote>
<h1 id="基本思想："><a href="#基本思想：" class="headerlink" title="基本思想："></a>基本思想：</h1><p>在要排序的一组数中，对当前还未排好序的范围内的全部数，自上而下对相邻的两个数依次进行比较和调整，让较大的数往下沉，较小的往上冒。即：每当两相邻的数比较后发现它们的排序与排序要求相反时，就将它们互换。</p>
<h1 id="算法的实现："><a href="#算法的实现：" class="headerlink" title="算法的实现："></a>算法的实现：</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//冒泡排序</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span>(<span class="params">arr</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> len=arr.length;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;len<span class="number">-1</span>;i++)&#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;len-i<span class="number">-1</span>;j++)&#123;</div><div class="line">			<span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</div><div class="line">			<span class="keyword">var</span> tmp=arr[j];arr[j]=arr[j+<span class="number">1</span>];arr[j+<span class="number">1</span>]=tmp;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> arr;</div><div class="line">&#125;</div><div class="line">bubbleSort([<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">92</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">111</span>,<span class="number">1</span>,<span class="number">9</span>])</div></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="冒泡排序算法的改进"><a href="#冒泡排序算法的改进" class="headerlink" title="冒泡排序算法的改进"></a>冒泡排序算法的改进</h1><p>对冒泡排序常见的改进方法是加入一标志性变量exchange，用于标志某一趟排序过程中是否有数据交换，如果进行某一趟排序时并没有进行数据交换，则说明数据已经按要求排列好，可立即结束排序，避免不必要的比较过程。本文再提供以下两种改进算法</p>
<p>1.设置一标志性变量pos,用于记录每趟排序中最后一次进行交换的位置。由于pos位置之后的记录均已交换到位,故在进行下一趟排序时只要扫描到pos位置即可。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//优化</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort1</span>(<span class="params">arr</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> i=arr.length<span class="number">-1</span>;<span class="comment">//初始时,最后位置保持不变  </span></div><div class="line">	<span class="keyword">while</span>(i&gt;<span class="number">0</span>)&#123;</div><div class="line">		<span class="keyword">var</span> pos=<span class="number">0</span>;<span class="comment">//每趟开始时,无记录交换</span></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;i;j++)&#123;</div><div class="line">			<span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</div><div class="line">			<span class="keyword">var</span> tmp=arr[j];arr[j]=arr[j+<span class="number">1</span>];arr[j+<span class="number">1</span>]=tmp;</div><div class="line">			pos=j;<span class="comment">//记录最后交换的位置  </span></div><div class="line">			&#125;			</div><div class="line">		&#125;</div><div class="line">		i=pos;<span class="comment">//为下一趟排序作准备</span></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> arr;</div><div class="line">&#125;</div><div class="line">bubbleSort1([<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">92</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">111</span>,<span class="number">1</span>,<span class="number">90</span>])</div></pre></td></tr></table></figure></p>
<p>2．传统冒泡排序中每一趟排序操作只能找到一个最大值或最小值,我们考虑利用在每趟排序中进行正向和反向两遍冒泡的方法一次可以得到两个最终值(最大者和最小者) , 从而使排序趟数几乎减少了一半。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//优化</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort2</span>(<span class="params">arr</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> low=<span class="number">0</span>;</div><div class="line">	<span class="keyword">var</span> high=arr.length<span class="number">-1</span>;<span class="comment">//设置变量的初始值 </span></div><div class="line">	<span class="keyword">while</span>(low&lt;high)&#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> i=low;i&lt;high;i++)&#123;<span class="comment">//正向冒泡,找到最大者  </span></div><div class="line">			<span class="keyword">if</span>(arr[i]&gt;arr[i+<span class="number">1</span>])&#123;</div><div class="line">				<span class="keyword">var</span> tmp=arr[i];arr[i]=arr[i+<span class="number">1</span>];arr[i+<span class="number">1</span>]=tmp;				</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		--high;<span class="comment">//修改high值, 前移一位 ，最大已经找到一位</span></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> j=high;j&gt;low;j--)&#123;</div><div class="line">			<span class="keyword">if</span>(arr[j]&lt;arr[j<span class="number">-1</span>])&#123;</div><div class="line">				<span class="keyword">var</span> tmp=arr[j];arr[j]=arr[j<span class="number">-1</span>];arr[j<span class="number">-1</span>]=tmp;			</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		--low;<span class="comment">//修改low值,后移一位</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">bubbleSort1([<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">92</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">111</span>,<span class="number">1</span>,<span class="number">99</span>])</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 基础杂谈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习笔记-Symbol数据类型]]></title>
      <url>https://dsb123dsb.github.io/2017/03/05/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Symbol%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>ES5的对象属性名都是字符串，这容易造成属性名的冲突。ES6引入了一种新的原始数据类型Symbol，表示独一无二的值。它是JavaScript语言的第七种数据类型，前六种:Undefined、Null、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object）。<br>1.Symbol值可以通过<code>Symbol</code>函数生成。既对象的属性名可以有两种类型：原来的字符串、新增的Symbol类型，后者是独一无二的，保证不会与其它属性名产生冲突。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> s=<span class="built_in">Symbol</span>();	</div><div class="line"><span class="keyword">typeof</span> s<span class="comment">//"Symbol"</span></div></pre></td></tr></table></figure></p>
<p>2.值得注意的是<code>Symbol</code>函数前不能使用<code>new</code>命令，否则会报错。因为生成的Symbol是一个原始数据类型的值，不是对象。也就是说由于Symbol不是对象，所以不能添加属性。<br>3.<code>Symbol</code>函数可以接受一个字符串作为参数，表示对<code>Symbol</code>实例的描述，主要是为了在控制台显示，或者转为字符串时，比较容易区分。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s1=<span class="built_in">Symbol</span>(<span class="string">'foo'</span>);</div><div class="line"><span class="keyword">var</span> s2=<span class="built_in">Symbol</span>(<span class="string">'bar'</span>);</div><div class="line">s1<span class="comment">//Symbol(foo)</span></div><div class="line">s2<span class="comment">//Symbol(bar)</span></div><div class="line">s1.toString()<span class="comment">//"Symbol(foo)"</span></div><div class="line">s2.toString()<span class="comment">//"Symbol(bar)"</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>上面代码，s1和s2是两个<code>Symbol</code>值。如果不加参数，在控制台输出都是<code>Symbol()</code>，注意，参数只是表示对于当前<code>Symbol</code>的描述，因此相同参数的<code>Symbol</code>函数的返回值是不相等的。<br>4.Symbol值不能与其它类型的值进行计算，会报错,但是可以显示转化为字符串、布尔值，不能转为数值<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> sym=<span class="built_in">Symbol</span>(<span class="string">'My symbol'</span>);</div><div class="line"><span class="string">'your symbol is '</span>+sym</div><div class="line"><span class="comment">//报错</span></div><div class="line"><span class="string">`your symbol is <span class="subst">$&#123;sym&#125;</span>`</span></div><div class="line"><span class="comment">//报错</span></div><div class="line"></div><div class="line"><span class="built_in">String</span>(sym)<span class="comment">//'Symbol(My symbol)'</span></div><div class="line">sym.toString()<span class="comment">//'Symbol(My symbol)'</span></div><div class="line"></div><div class="line"><span class="built_in">Boolean</span>(sym)<span class="comment">//true</span></div><div class="line">!sym<span class="comment">//false</span></div><div class="line"></div><div class="line"><span class="keyword">if</span>(sym)&#123;</div><div class="line"><span class="comment">//...&#125;</span></div><div class="line"></div><div class="line"><span class="built_in">Number</span>(sym)<span class="comment">//报错</span></div><div class="line">sym+<span class="number">2</span><span class="comment">//报错</span></div></pre></td></tr></table></figure></p>
<h1 id="作为属性名的Symbol"><a href="#作为属性名的Symbol" class="headerlink" title="作为属性名的Symbol"></a>作为属性名的Symbol</h1><p>Symbol值作为标识符，用于对象的属性名，能保证不会出现同名属性。对于一个对象有多个模块构成的情况下，能防止一个键不小心改写或覆盖<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mySymbol=<span class="built_in">Symbol</span>();</div><div class="line"><span class="comment">//第一种写法</span></div><div class="line"><span class="keyword">var</span> a=&#123;&#125;;</div><div class="line">a[mySymbol]=<span class="string">'hello'</span>;</div><div class="line"></div><div class="line"><span class="comment">//第二种写法</span></div><div class="line"><span class="keyword">var</span> a=&#123;</div><div class="line">	[mySymbol]:<span class="string">'hello'</span>	</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//第三种写法</span></div><div class="line"><span class="keyword">var</span> a=[];</div><div class="line"><span class="built_in">Object</span>.defineProperty(a,mySymbol,&#123;<span class="attr">value</span>:<span class="string">'hello&#125;);</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">//以上写法都得到同样结果哦</span></div><div class="line"><span class="string">a[mySymbol]//'</span>hello<span class="string">'</span></div></pre></td></tr></table></figure></p>
<p>注意，Symbol值作为对象属性名是，不能用点运算符。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mySymbol=<span class="built_in">Symbol</span>();</div><div class="line"><span class="keyword">var</span> a=&#123;&#125;;	</div><div class="line">a.mySymbol=<span class="string">'hello'</span>;</div><div class="line">a[mySymbol]<span class="comment">//undefined</span></div><div class="line">a[<span class="string">'mySymbol'</span>]<span class="comment">//'hello'</span></div></pre></td></tr></table></figure></p>
<p>上面代码中，因为点运算符后面总是字符串，所以不会读取<code>mySymbol</code>作为标识名所指代的那个值，导致a的属性名实际上是一个字符串，而不是Symbol值，同样在对象内部，使用Symbol值定义属性时，Symbol值必须放在括号之中，否则会被认为字符串<br><code>let s=Symbol();let obj={[s](arg){}}//增强对象写法</code></p>
<h1 id="属性名的遍历"><a href="#属性名的遍历" class="headerlink" title="属性名的遍历"></a>属性名的遍历</h1><p>Symbol作为属性名，该属性不会出现在<code>for...in</code>、<code>for...of</code>循环中，也不会被<code>Object.keys()</code>、<code>Object.getOwnPropertyNames</code>返回。但是它也不是私有属性，<code>Object.getOwnPropertySymbols</code>方法，获取指定对象的所有Symbol属性名（一个数组），另一个新的API<code>Reflect.ownKeys</code>方法可以返回所有类型的键名。我们可以利用这个特性，为对象定义一些非私有的、但又希望只用于内部的方法（不会被常规方法访问到）。</p>
<h1 id="Symbol-for-Symbol-keyFor"><a href="#Symbol-for-Symbol-keyFor" class="headerlink" title="Symbol.for(),Symbol.keyFor()"></a>Symbol.for(),Symbol.keyFor()</h1><p>有时，我们希望重新使用同一个<code>Symbol</code>值，<code>Symbol.for</code>方法可以做到这一点。它接受一个字符串作为参数，然后搜索有没有以该参数作为名称的Symbol值。如果有，就返回这个Symbol值，否则就新建并返回一个以该字符串为名称的Symbol值。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s1=<span class="built_in">Symbol</span>(<span class="string">'foo'</span>);</div><div class="line"><span class="keyword">var</span> s2=<span class="built_in">Symbol</span>(<span class="string">'foo'</span>);	</div><div class="line">s1===s2<span class="comment">//true</span></div></pre></td></tr></table></figure></p>
<p>上面代码中，s1和s2都是Symbol值，但是它们都是同样参数<code>Symbol.for</code>方法生成的，所以实际上是同一个值，它生成的值会被登记在全局环境中供搜索，Symbol()不会，所以每次调用都会返回一个不同的值。</p>
<p><code>Symbol.keyFor()</code>方法返回一个已经登记的Symbol类型值的key<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s1=<span class="built_in">Symbol</span>.for(<span class="string">'foo'</span>);</div><div class="line"><span class="built_in">Symbol</span>.keyFor(s1)<span class="comment">//'foo'</span></div><div class="line"><span class="comment">//未登记	</span></div><div class="line"><span class="keyword">var</span> s2=<span class="built_in">Symbol</span>(<span class="string">'foo'</span>);</div><div class="line"><span class="built_in">Symbol</span>.keyFor(s2);<span class="comment">//undefined</span></div></pre></td></tr></table></figure></p>
<p>上面代码，变量s2属于未被登记的Symbol值，所以返回undefined。</p>
<p>注意：<code>Symbol.for</code>为Symbol值登记的名字，是全局环境的额，可以在不同的iframe或service worker中取到同一个值<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">iframe=<span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</div><div class="line">iframe.src=<span class="built_in">String</span>(<span class="built_in">window</span>.location);</div><div class="line"><span class="built_in">document</span>.body.appendChild(iframe);	</div><div class="line">iframe.contentWindow.Symbol.for(<span class="string">'foo'</span>)===<span class="built_in">Symbol</span>.for(<span class="string">'foo'</span>)<span class="comment">//true</span></div></pre></td></tr></table></figure></p>
<h1 id="实例：模块的Singleton模式"><a href="#实例：模块的Singleton模式" class="headerlink" title="实例：模块的Singleton模式"></a>实例：模块的Singleton模式</h1><p>Singleton模式指的是调用一个类，任何时候返回的都是同一个实例<br>对于Node来说，模块文件可以看成是一个类。怎么保证每次执行这个模块文件，返回的都是同一个实例呢？<br>很容易想到，可以把实例放到顶层对象<code>global</code>。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//mod.js</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">this</span>.foo=<span class="string">'hello'</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(!global._foo)&#123;</div><div class="line">	global._foo=<span class="keyword">new</span> A();</div><div class="line">&#125;</div><div class="line"><span class="built_in">module</span>.exports=global._foo</div><div class="line"></div><div class="line"><span class="comment">//加载上面mod.js</span></div><div class="line"><span class="keyword">var</span> a=<span class="built_in">require</span>(<span class="string">'./mod.js'</span>);</div><div class="line"><span class="built_in">console</span>.log(a.foo);</div></pre></td></tr></table></figure></p>
<p>上面代码中，变量a任何时候加载的都是A的同一个实例，但是问题在于，全局变量<code>global._foo</code>是可写的。任何文件都可以修改它。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a=<span class="built_in">require</span>(<span class="string">'./mod.js'</span>);</div><div class="line">global._foo=<span class="number">123</span>;</div></pre></td></tr></table></figure></p>
<p>上面的代码，会使得别的脚本加载mod.js脚本都失真。防止这种情况可以使用Symbol<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> FOO_KEY=<span class="built_in">Symbol</span>.for(<span class="string">'foo'</span>);<span class="comment">//1.</span></div><div class="line"><span class="comment">//const FOO_KEY=Symbol('foo');//2.</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">this</span>.foo=<span class="string">'hello'</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(!global._foo)&#123;</div><div class="line">	global[FOO_KEY]=<span class="keyword">new</span> A();</div><div class="line">&#125;</div><div class="line"><span class="built_in">module</span>.exports=global[FOO_kEY];</div></pre></td></tr></table></figure></p>
<p>Symbol.for()生成可以保证不会被无意覆盖，但还是可以被改写，Symbol方法生成的话，外部将无法引用这个值，当然无法改写，但这样也有个问题，如果多次执行这个脚本，每次得到FOO_KEY都是不一样的。虽然Node会将脚本执行结果缓存，一般形况下，不会多次执行同一个脚本，但是用户可以手动清除缓存，所以也不是完全可靠。</p>
<h1 id="内置Symbol值"><a href="#内置Symbol值" class="headerlink" title="内置Symbol值"></a>内置Symbol值</h1><p>内置Symbol值共11个，仅列出以下三个</p>
<ol>
<li>Symbol.hasInstance：对象的<code>Symbol.hasInstance</code>属性，指向一个内部方法。当其他对象使用<code>instanceof</code>运算符，判断是否为该对象的实例时，会调用这个方法。比如，<code>foo instanceof Foo在</code>语言内部，实际调用的是<code>Foo[Symbol.hasInstance](foo)</code></li>
<li>Symbol.isConcatSpreadable：对象的Symbol.isConcatSpreadable属性等于一个布尔值，表示该对象使用<code>Array.prototype.concat()</code>时，是否可以展开，可以手动修改。对于一个类来说，<code>Symbol.isConcatSpreadable</code>属性必须写成实例的属性</li>
<li>Symbol.species：对象的<code>Symbol.species</code>属性，指向当前对象的构造函数。创造实例时，默认会调用这个方法，即使用这个属性返回的函数当作构造函数，来创造新的实例对象。定义<code>Symbol.species</code>属性要采用get读取器。默认的<code>Symbol.species</code>属性等同于下面的写法。<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> get [<span class="built_in">Symbol</span>.species]()&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li>
</ol>
]]></content>
      
        <categories>
            
            <category> 基础杂谈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Symbol </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习笔记-高性能JavaScript]]></title>
      <url>https://dsb123dsb.github.io/2017/02/18/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E9%AB%98%E6%80%A7%E8%83%BDJavaScript/</url>
      <content type="html"><![CDATA[<blockquote>
<p>纸上得来终觉浅，绝知此事要躬行</p>
</blockquote>
<p>两天把买的很久的《高性能JavaScript》看完了，失败果然是催人奋进最好良药，如果早些研究这本书，我想猪场面试也能表现更好吧，虽然一直在学习，并没有付出哪怕60%的全部努力，不能等到机会来了才知道要好好努力，说了这么多给自己听的题外话，正题：把书中优化js性能的方法略作总结（写完最后看了一下竟然将近一万六千字，mark下，<em>纯手工 打造，哈哈</em>）。</p>
<h1 id="加载和执行"><a href="#加载和执行" class="headerlink" title="加载和执行"></a>加载和执行</h1><p>多数浏览器使用单一进程来处理用户界面（UI）刷新和Javascript脚本执行，所以同一时刻只能做一件事情-javaScript的阻塞特性，javaScript执行过程好事越久，浏览器等待响应时间越长。<br><a id="more"></a></p>
<h2 id="脚本位置"><a href="#脚本位置" class="headerlink" title="脚本位置"></a>脚本位置</h2><p><code>&lt;/body&gt;</code>闭合标签之前，将所有<code>&lt;script&gt;</code>标签放到页面底部。这能确保脚本执行前页面已经完成渲染。</p>
<h2 id="组织脚本"><a href="#组织脚本" class="headerlink" title="组织脚本"></a>组织脚本</h2><p>合并脚本，页面中的<code>&lt;script&gt;</code>标签越少，加载也就越快，响应也跟更迅速。无论外链文件还是内嵌脚本。</p>
<h2 id="无阻塞的脚本"><a href="#无阻塞的脚本" class="headerlink" title="无阻塞的脚本"></a>无阻塞的脚本</h2><h3 id="延迟的脚本"><a href="#延迟的脚本" class="headerlink" title="延迟的脚本"></a>延迟的脚本</h3><p>使用<code>&lt;script&gt;</code>标签的defer属性：页面解析到带有defer属性的<code>&lt;script&gt;</code>标签时开始下载，但<em>并不会执行</em>（无论内嵌还是外嵌），指导dom加载完成（onload事件被触发前）。当一个带有defer属性的Javascript文件下载时，它不会阻塞浏览器的其他进程，因为此类文件可以与页面中其他资源并行下载（html5中引入async属性，和defer都是并行下载，下载不会阻塞，区别在于执行时机，async是加载完成后自动执行，defer则等待页面完成执行）</p>
<h3 id="动态脚本元素"><a href="#动态脚本元素" class="headerlink" title="动态脚本元素"></a>动态脚本元素</h3><p>使用动态创建的<code>&lt;script&gt;</code>元素来下载并执行代码</p>
<p>下面的函数封装了标准和IE特有的实现方法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadScript</span>(<span class="params">url,callback</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> script=<span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</div><div class="line">	script.type=<span class="string">"text/javascript"</span>;</div><div class="line">	<span class="keyword">if</span>(script.readyState)&#123;<span class="comment">//IE</span></div><div class="line">		script.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="keyword">if</span>(script.readyState==<span class="string">"loaded"</span>||script.readyState==<span class="string">"complete"</span>)&#123;</div><div class="line">				script.onreadystatechange=<span class="literal">null</span>;</div><div class="line">				callback();</div><div class="line">			&#125;</div><div class="line">		&#125;;</div><div class="line"></div><div class="line">	&#125;<span class="keyword">else</span>&#123;<span class="comment">//其他浏览器</span></div><div class="line">		script.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			callback();</div><div class="line">		&#125;;</div><div class="line">	&#125;</div><div class="line">	script.scr=url;</div><div class="line">	<span class="built_in">document</span>.getElementByTagName(<span class="string">"head"</span>)[<span class="number">0</span>].appendChild(script);		</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="XMLHttpRequest脚本注入"><a href="#XMLHttpRequest脚本注入" class="headerlink" title="XMLHttpRequest脚本注入"></a>XMLHttpRequest脚本注入</h3><p>使用XHR对象下载javaScript代码并注入页面</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> xhr=<span class="keyword">new</span> XMLHttpReuqest();</div><div class="line">xhr.open(<span class="string">"get"</span>,<span class="string">"file.js"</span>,<span class="literal">true</span>);</div><div class="line">xhr.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">if</span>(xhr.readyState==<span class="number">4</span>)&#123;</div><div class="line">		<span class="keyword">if</span>(xhr.status&gt;=<span class="number">200</span>&amp;&amp;xhr.status&lt;<span class="number">300</span>||xhr.status==<span class="number">304</span>)&#123;</div><div class="line">			<span class="keyword">var</span> script=<span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</div><div class="line">			script.type=<span class="string">"tetx/javascript"</span>;</div><div class="line">			script.text=xhr.responseText;</div><div class="line">			<span class="built_in">document</span>.body.appendChild(script);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line">xhr.send(<span class="literal">null</span>);</div></pre></td></tr></table></figure>
<p>这种方法的主要优点：可以下载js代码，但不立即执行（代码是在<code>&lt;sript&gt;</code>之外返回的）；同时所有主流浏览器都可以运行。</p>
<h1 id="数据存取"><a href="#数据存取" class="headerlink" title="数据存取"></a>数据存取</h1><p>计算机科学中有个经典问题是通过改变数据的存储位置来获取最佳的读写性能，它关系到代码执行过程中数据的检索速度。js中这个问题相对简单，因为javaScript中只有四种基本数据存取位置：1.字面量：只代表自身，不存储特定位置，字符串、数字、布尔值、对象、数组、函数；2.本地变量：开发人员使用关键字var定义的数据存储单元；3.数组元素：存储在javaScript数组对象内部，以数字作为索引；4.对象成员：存储在javaScript对象内部，以字符串作为索引。<br>总的来说字面量和局部变量的访问速度快于数组项和对象成员的访问速度。</p>
<h2 id="管理作用域"><a href="#管理作用域" class="headerlink" title="管理作用域"></a>管理作用域</h2><p>1.由于局部变量存在于作用域链的起始位置，因此访问局部变量比访问跨作用域变量更快。变量在作用域链中的位置越深，访问所需时间就越长。由于全局变量总处于作用域链的最末端，因此访问速度也是最慢的。<br>2.避免使用with语句，因为他会改变执行环境作用域链。同样try-catch语句中的catch子句也有同样的影响。</p>
<h2 id="对象成员"><a href="#对象成员" class="headerlink" title="对象成员"></a>对象成员</h2><p>嵌套的对象成员明显影响性能，尽量少用；属性和方法在原型链中的位置越深，访问它的速度也越慢；通常可以把常用的对象成员、数组元素、跨域变量保存在局部变量中来改善javaScript性能，因为局部变量访问速度更快。</p>
<h1 id="DOM编程"><a href="#DOM编程" class="headerlink" title="DOM编程"></a>DOM编程</h1><h2 id="浏览器中的DOM"><a href="#浏览器中的DOM" class="headerlink" title="浏览器中的DOM"></a>浏览器中的DOM</h2><p>文档对象模型（DOM）是一个独立于语言，用于操作XML和HTML文档的程序接口（API），尽管如此，它在浏览器中的接口却是用javaScript实现的。<br>浏览器通常会把DOM和javaScript独立实现，这意味着两个相互独立的功能只要通过接口彼此连接，就会产生消耗，推荐的做法是尽可能减少DOM的访问次数。</p>
<h2 id="DOM访问与修改"><a href="#DOM访问与修改" class="headerlink" title="DOM访问与修改"></a>DOM访问与修改</h2><p>相比与DOM访问的消耗，修改DOM元素则更为昂贵，因为他会导致浏览器重新计算页面的几何变化，最坏的情况是在循环中访问和修改元素。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//demo1</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">innerHTMLLoop</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> count=<span class="number">0</span>;count&lt;<span class="number">15000</span>;count++)&#123;</div><div class="line">		<span class="built_in">document</span>.getElementById(<span class="string">"here"</span>).innerHTML+=<span class="string">"a"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//demo2</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">innerHTMLLoop2</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> content=<span class="string">""</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> count=<span class="number">0</span>;count&lt;<span class="number">15000</span>;count++)&#123;</div><div class="line">		content+=<span class="string">"a"</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">document</span>.getElementById(<span class="string">"here"</span>).innerHTML+=content;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>demo1中每次循环迭代，该元素都被访问两次：一次读取innerHTML属性值，一次重写它。<br>demo2采用了更加高效的方法：用局部变量存储修改中的内容，在循环结束后一次性写入<br>因此通用的经验法则是：减少DOM的访问次数，把运算尽量留在ECMAScript这一端处理</p>
<h3 id="修改页面区域方法"><a href="#修改页面区域方法" class="headerlink" title="修改页面区域方法"></a>修改页面区域方法</h3><ol>
<li>innerHTML</li>
<li>原生DOM方法：document.createElement()和document.createTextNode()</li>
<li>节点克隆：element.cloneNode()<br>如果对于一个性能有着苛刻要求的操作中更新一大段HTML，推荐使用innerHTML,因为它在绝大部分浏览器中都运行的更快。但对于大多数日常操作而言，并没有太大区别，所以更应该根据可读性<br>稳定性、团队习惯你、代码风格来综合决定使用哪种方式。</li>
</ol>
<h3 id="HTML集合"><a href="#HTML集合" class="headerlink" title="HTML集合"></a>HTML集合</h3><p>HTML集合是包含了DOM节点引用的类数组对象</p>
<ol>
<li>以下方法的返回值就是一个集合：<ul>
<li>document.getElementsByName()</li>
<li>document.getElementsByClass()</li>
<li>document.getElementsByTagName()</li>
</ul>
</li>
<li>下面的属性同样返回HTML集合：<ul>
<li>document.images:页面中所有的img元素</li>
<li>document.links:所有a元素</li>
<li>document.forms:所有表单元素</li>
<li>document.forms.elements:页面中第一个表单的所有字段<br>以上方法和属性的返回值为HTML集合对象，是类似数组的列表。不是真正的数组（没有push()或slice()之类方法），但是提供了一个类似数组中的length属性，并且还能以数字索引的方式访问列表中的元素。<br>事实上，HTML集合一直与文档保持着连接，每次你需要最新的信息时，都会重复执行查询过程，这正是低效之源。</li>
</ul>
</li>
</ol>
<h4 id="演示集合的实时性"><a href="#演示集合的实时性" class="headerlink" title="演示集合的实时性"></a>演示集合的实时性</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//1.一个意外的死循环</span></div><div class="line"><span class="keyword">var</span> alldivs=<span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;alldivs.length;i++)&#123;</div><div class="line">	<span class="built_in">document</span>.body.appendChild(<span class="built_in">document</span>.createElement(<span class="string">"div"</span>))</div><div class="line">&#125;</div><div class="line"><span class="comment">//2.将HTML集合拷贝到普通数组</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">toArray</span>(<span class="params">coll</span>)</span>&#123;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,a=[],len=coll.length;i&lt;len;i++)&#123;</div><div class="line">		a[i]=coll[i];</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> a;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> coll=<span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>);</div><div class="line"><span class="keyword">var</span> arr=toArray(coll);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loopCopiedArray</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> count=<span class="number">0</span>;count&lt;arr.length;count++)&#123;</div><div class="line">		<span class="comment">/*代码处理*/</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//3.集合长度缓存到一个局部变量</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loopCacheLengthCollention</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> coll=<span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>),</div><div class="line">		len=coll.length;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> count=<span class="number">0</span>;count&lt;length;count++)&#123;</div><div class="line">		<span class="comment">/*代码处理*/</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>1中死循环，因为循环的退出条件alldivs.length在每次迭代时都会增加，它反映的是底层文档的当前状态；对于2，3很多情况下如果只需要遍历一个相对较小的集合，那么3中缓存length就够了，但是要记住遍历数组比遍历集合要快，经常需要操作集合建议缓存集合到数组。</p>
<h4 id="访问集合元素时使用局部变量"><a href="#访问集合元素时使用局部变量" class="headerlink" title="访问集合元素时使用局部变量"></a>访问集合元素时使用局部变量</h4><p><code>var coll=document.getElementsByTagName(&quot;div&quot;);</code><br>使用<code>coll[count].nodeName</code>代替<code>document.getElementsByTagName(&quot;div&quot;)[count].nodeName</code></p>
<h4 id="遍历DOM"><a href="#遍历DOM" class="headerlink" title="遍历DOM"></a>遍历DOM</h4><ol>
<li>获取DOM元素：使用childNodes得到元素集合，或者nextSibling来获取每个相邻元素</li>
<li>选择器API：querySelectorAll()和querySelector()原生DOM方法</li>
</ol>
<h2 id="重绘和重排"><a href="#重绘和重排" class="headerlink" title="重绘和重排"></a>重绘和重排</h2><p>浏览器下载完页面中所有组件之后会解析生成两个数据结构1.DOM数：表示页面结构，2.渲染树：表示DOM节点如何显示</p>
<p>当DOM变化影响了元素的几何属性，浏览器需要重新计算元素的几何属性，同样其他元素的几何属性和位置也会因此受到影响。浏览器会使渲染树中受到影响的部分失效，并重新构造渲染树，这个过程称为“重排（reflow）”。完成重排后，浏览器会重新绘制受影响的部分到屏幕中，该过程称为“重绘（repaint）”</p>
<h3 id="重排何时发生"><a href="#重排何时发生" class="headerlink" title="重排何时发生"></a>重排何时发生</h3><p>并不是所有的DOM变化都会影响几何属性，比如改变背景色并不会影响它的宽和高，只会发生一次重绘<br>下述情况发生重排：</p>
<ul>
<li>添加或删除可见的DOM元素</li>
<li>元素位置改变</li>
<li>元素尺寸改变</li>
<li>元素内容改变</li>
<li>页面渲染器初始化</li>
<li>浏览器窗口尺寸改变</li>
</ul>
<h3 id="渲染树变化的排队与刷新"><a href="#渲染树变化的排队与刷新" class="headerlink" title="渲染树变化的排队与刷新"></a>渲染树变化的排队与刷新</h3><p>由于每次重排都会产生计算消耗，大多数浏览器通过队列变化修改并批量执行来优化重排过程<br>获取布局信息操作会导致队列刷新：</p>
<ul>
<li>offsetTop,offsetLeft,offsetwidth,offsetHeight</li>
<li>scrollTop,scrollLeft,scrollWidth,scrollHeight</li>
<li>clientTop,clientLeft,clientWidth,clientHeight</li>
<li>getComputedStyle()(currentStyle in IE)<br>在修改样式的过程中，最好避免使用上面列出的属性。它们都会刷新渲染列队，即使是在获取最近未发生的或者与最新改变无关的布局信息。</li>
</ul>
<h3 id="最小化重绘和重排"><a href="#最小化重绘和重排" class="headerlink" title="最小化重绘和重排"></a>最小化重绘和重排</h3><p>合并多次对DOM和样式的修改，然后一次处理掉</p>
<h4 id="改变样式"><a href="#改变样式" class="headerlink" title="改变样式"></a>改变样式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//1.多次属性改变</span></div><div class="line"><span class="keyword">var</span> el=<span class="built_in">document</span>.getElementById(<span class="string">"mydiv"</span>);</div><div class="line">el.style.borderLeft=<span class="string">"1px"</span>;</div><div class="line">el.style.borderRight=<span class="string">"2px"</span>;</div><div class="line">el.style.padding=<span class="string">"5px"</span>;</div><div class="line"><span class="comment">//2.合并所有改变然后一次处理</span></div><div class="line">el.style.cssText=<span class="string">"border-left:1px;border-right:2px;padding:5px;"</span>;</div><div class="line"><span class="comment">//如果想保留现在样式，可附加cssText字符串后面</span></div><div class="line">el.style.cssText+=<span class="string">";border-left:1px;"</span>;</div><div class="line"><span class="comment">//3.修改样式css的class名称</span></div><div class="line">el.className=<span class="string">"active"</span>;</div></pre></td></tr></table></figure>
<p>1.中可能发生三次重排，并且四次访问DOM，2.中使用cssText属性一次实现,3.适用于那些不依赖与运行环境逻辑和计算的情况，易于维护</p>
<h4 id="批量修改DOM"><a href="#批量修改DOM" class="headerlink" title="批量修改DOM"></a>批量修改DOM</h4><p>可通过以下步骤来减少重绘和重排的次数：</p>
<ol>
<li>使元素脱离文档流</li>
<li>对其应用多重改变</li>
<li>把元素带回文档中</li>
</ol>
<p>有三种基本方法可以使DOM脱离文档：</p>
<ul>
<li>隐藏元素，应用修改，重新显示</li>
<li>使用文档片段（document fragment）在当前DOM之外构建一个子树，再把它拷贝回文档</li>
<li>将原始元素拷贝到一个脱离文档的节点中，修改副本，完成后再替换原始元素（拷贝需要修改节点，对副本操作，然后替换原始）</li>
</ul>
<p>推荐尽可能使用文档片段（第二种方案），因为它们所产生的DOM遍历和重排次数最少</p>
<h4 id="缓存布局信息"><a href="#缓存布局信息" class="headerlink" title="缓存布局信息"></a>缓存布局信息</h4><p>在timeout循环体中使用下面两种方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//低效的</span></div><div class="line">myElement.style.left=<span class="number">1</span>+myElement.offsetLeft+<span class="string">"px"</span>;</div><div class="line">myElement.style.top=<span class="number">1</span>+myElement.offsetLeft+<span class="string">"px"</span>;</div><div class="line"><span class="keyword">if</span>(myElement.offsetLeft&gt;=<span class="number">500</span>)&#123;</div><div class="line">	stopAnimation();</div><div class="line">&#125;</div><div class="line"><span class="comment">//缓存布局信息</span></div><div class="line"><span class="keyword">var</span> current=myElement.offsetLeft;</div><div class="line">current++;</div><div class="line">myElement.style.left=current+<span class="string">"px"</span>;</div><div class="line">myElement.style.top=current+<span class="string">"px"</span>;</div><div class="line"><span class="keyword">if</span>(current&gt;=<span class="number">500</span>)&#123;</div><div class="line">	stopAnimation();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="让元素脱离动画流"><a href="#让元素脱离动画流" class="headerlink" title="让元素脱离动画流"></a>让元素脱离动画流</h4><p>一般来说，重排只影响渲染树中的一小部分，但也可能影响很大一部分，甚至整个渲染树。比如当页面顶部一个动画推移页面整个余下部分时，会导致一次代价昂贵的大规模重排，让用户感到页面一顿一顿<br>使用以下步骤可以避免页面中大部分重排：</p>
<ol>
<li>使用绝对定位页面上的动画元素，将其脱离文档流</li>
<li>让元素动起来，当扩大时，会临时覆盖部分页面。但这只是页面一个小区域的重绘</li>
<li>当动画结束时恢复定位，从而只会下移一次文档的其他元素</li>
</ol>
<h2 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h2><p>事件委托可减少事件处理器数量，它基于这样事实：事件逐层冒泡并能被父元素捕获。使用事件代理，只需要给外层元素绑定一个处理器，就可以处理其子元素上触发的所有事件</p>
<h1 id="算法和流程控制"><a href="#算法和流程控制" class="headerlink" title="算法和流程控制"></a>算法和流程控制</h1><p>代码数量少并不意味着运行速度快，数量多也不意味着运行速度一定慢，代码的组织结构和解决具体问题的思路是影响代码性能的主要因素</p>
<h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><p>for、while和do-while循环性能相当；避免使用for-in循环，除非你需要遍历一个属性数量未知的对象：因为每次迭代操作会同时搜索实例或原型属性，才生更多开销<br>改善循环性能的最佳方式是减少每次迭代的运算量（存储查找属性到局部变量）和减少循环迭代次数（颠倒数组顺序）</p>
<h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><ol>
<li>大多数形况下switch比if-else运行的要快，但只有当条件数量很大时才快的明显。因此在条件数量较少时使用if-eles,而在数量较大时使用switch</li>
<li>优化if-else<ul>
<li>确保最可能出现的条件放在首位</li>
<li>把if-else组织成一系列嵌套的if-else语句</li>
</ul>
</li>
<li>查找表：当有大量离散值需要测试时，if-else和switch比使用查找表慢得多。javaScript中可以使用数组和普通对象来构建查找表</li>
</ol>
<h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>使用递归可以使复杂的算法简单，比如阶乘函数：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">if</span>(n==<span class="number">0</span>)&#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		<span class="keyword">return</span> n*factorial(n<span class="number">-1</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>递归函数的潜在问题是终止条件不明确或缺少终止条件会导致函数长时间运行，使用户界面处于假死状态。还可能遇到浏览器“调用栈大小限制”<br>如果遇到栈溢出错误，可将方法改为迭代，或使用 Memoizaition来避免重复计算</p>
<h1 id="字符串和正则表达式"><a href="#字符串和正则表达式" class="headerlink" title="字符串和正则表达式"></a>字符串和正则表达式</h1><h2 id="字符串连接"><a href="#字符串连接" class="headerlink" title="字符串连接"></a>字符串连接</h2><p>+和+=操作符；数组字符串合并：Array.prototype.join()，String.prototype.concat()</p>
<h2 id="正则表达式优化"><a href="#正则表达式优化" class="headerlink" title="正则表达式优化"></a>正则表达式优化</h2><p>本人对正则表达式研究不是很深入，不做过多阐述<br>回溯既是正则表达式匹配功能的基本组成部分，也是正则表达式的低效之源；回溯失控发生在正则表达式本应快速匹配的地方，但因为某些特殊的字符串匹配动作导致运行缓慢甚至浏览器崩溃。避免这一问题方法：使相邻的字元互斥，避免嵌套量词对同一字符串的相同部分多次匹配，通过重复利用预查的原子组去除不必要的回溯。</p>
<h2 id="去除字符串首尾空白"><a href="#去除字符串首尾空白" class="headerlink" title="去除字符串首尾空白"></a>去除字符串首尾空白</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">if</span>(!<span class="built_in">String</span>.prtotype.trim)&#123;</div><div class="line">	<span class="built_in">String</span>.prototype.trim=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> str=<span class="keyword">this</span>.replace(<span class="regexp">/^\s+/</span>,<span class="string">""</span>),</div><div class="line">			end=str.length<span class="number">-1</span>,</div><div class="line">			ws=<span class="regexp">/\s/</span>;</div><div class="line">		<span class="keyword">while</span>(ws.test(str.chartAt(end)))&#123;</div><div class="line">			end--;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> str.slice(<span class="number">0</span>,end+<span class="number">1</span>);</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先检查浏览器本身有无trim（）方法，然后在自定义：利用正则表达式方法过滤头部空白，用非正则表达式的方法过滤尾部字符</p>
<h1 id="快速响应的用户-界面"><a href="#快速响应的用户-界面" class="headerlink" title="快速响应的用户 界面"></a>快速响应的用户 界面</h1><p>大多数浏览器让一个单线程共用于执行javaScript和更新用户界面，意味着当javaScript代码正在执行时用户界面无法响应输入，反之亦然。管理好javaScript运行时间对Web应用的性能非常重要。</p>
<h2 id="浏览器UI线程"><a href="#浏览器UI线程" class="headerlink" title="浏览器UI线程"></a>浏览器UI线程</h2><p>用于执行javaScript和更新用户界面的进程通常被称为“浏览器UI线程”。UI线程的工作基于一个简单的队列系统，任务会被保存到队列中直到进程空闲。一旦空闲，队列中的下一个任务就被重新提取出来运行。</p>
<p><strong>浏览器限制</strong>：浏览器限制了javaScript任务的运行时间。单个javaScript操作花费的总时间不应该超过100毫秒，超过意味着用户会感觉自己与界面失去联系。同时当脚本执行时，UI不随用户交互而更新。</p>
<h2 id="使用浏览器让出时间片段"><a href="#使用浏览器让出时间片段" class="headerlink" title="使用浏览器让出时间片段"></a>使用浏览器让出时间片段</h2><p>难免会有一些复杂的javaScript任务不能在100毫秒或者更短时间内完成。理想的方法是让出UI线程控制权，使UI可以更新，也意味着停止执行javaScript。定时器此时走进我们的视野。</p>
<ol>
<li>定时器代码只有在创建他的函数执行完成之后，才有可能执行。定时器会重置所有相关的浏览器限制，包括长时间运行脚本定时器。此外，调用栈也会在定时器代码中重置为0。这一特性使得定时器成为长时间运行javaScript代码的理想跨浏览器解决方案</li>
<li>在Windows系统中定时器分辨率为15毫秒，也就是说一个延时15毫秒的定时器将根据最后一次系统时间刷新而转换为0或15，所以建议延迟最小25毫秒以确保有15毫秒延迟</li>
<li><p>常见的一种造成长时间运行脚本的起因使耗时过长的循环，如果已经尝试循环优化技术还是没能减少足够运行时间，可以把循环工作分解到一系列定时器中。</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">	</div><div class="line"><span class="keyword">var</span> todo=items.concat();<span class="comment">//克隆原数组</span></div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="comment">//取得数组的下一个元素并进行处理</span></div><div class="line">	process(todo.shift());</div><div class="line">	<span class="comment">//如果还有需要处理的元素，创建另一个定时器</span></div><div class="line">	<span class="keyword">if</span>(todo.length&gt;<span class="number">0</span>)&#123;</div><div class="line">		setTimeout(<span class="built_in">arguments</span>.callee,<span class="number">25</span>);<span class="comment">//参数arguments。callee指向当前正在运行的匿名函数</span></div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		callback(items);</div><div class="line">	&#125;</div><div class="line">&#125;,<span class="number">25</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>如果一个函数运行时间太长，那么检查是否可以把它拆分为一系列能在较短时间内完成的子函数</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">saveDocument</span>(<span class="params">id</span>)</span>&#123;</div><div class="line">	<span class="comment">//保存文档</span></div><div class="line">openDocument(id);</div><div class="line">writeText(id);</div><div class="line">closeDocument(id);</div><div class="line"><span class="comment">//将成功信息更新至界面</span></div><div class="line">updateUI(id);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 如果上面函数运行时间太长，可以拆分成一系列更小的步骤，把独立的方法放在定时器中调用。将每个函数都放入一个数组</p>
<pre><code><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">saveDocument</span>(<span class="params">id</span>)</span>&#123;</div><div class="line"><span class="keyword">var</span> tasks=[openDocument,writeText,closeDocument,updateUI];</div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="comment">//执行下一个任务</span></div><div class="line">	<span class="keyword">var</span> task=tasks.shift();</div><div class="line">	task(id);</div><div class="line">	<span class="comment">//检查是否还有其他任务</span></div><div class="line">	<span class="keyword">if</span>(tasks.length&gt;<span class="number">0</span>)&#123;</div><div class="line">		setTimeout(<span class="built_in">arguments</span>.callee,<span class="number">25</span>);</div><div class="line">	&#125;</div><div class="line">&#125;,<span class="number">25</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><p> 还可以封装起来使用</p>
<pre><code><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">multistep</span>(<span class="params">steps,args,callback</span>)</span>&#123;</div><div class="line"><span class="keyword">var</span> tasks=steps.concat();<span class="comment">//克隆数组</span></div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="comment">//执行下一个任务</span></div><div class="line">	<span class="keyword">var</span> task=tasks.shift();</div><div class="line">	task.apply(<span class="literal">null</span>,args||[]);</div><div class="line">	<span class="comment">//检查是否还有其他任务</span></div><div class="line">	<span class="keyword">if</span>(tasks.length&gt;<span class="number">0</span>)&#123;</div><div class="line">		setTimeout(<span class="built_in">arguments</span>.callee,<span class="number">25</span>);</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		callback();</div><div class="line">	&#125;</div><div class="line">&#125;,<span class="number">25</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre></li>
<li><p>有时每次执行一个任务效率并不高，例如处理长度为1000项的数组，每处理一项需时1毫秒。如果每个定时器只处理一项，且在两次处理之间产生25毫秒的延迟。还记得javaScript可以持续运行时间最长100毫秒，建议减半,下面通过时间检测机制，使得定时器能处理多个数组条目：</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">timedProcessArray</span>(<span class="params">items,process,callback</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> todo=items.concat();<span class="comment">//克隆原始数组</span></div><div class="line">	setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> start=+<span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">		<span class="keyword">do</span>&#123;</div><div class="line">			process(todo.shift());	</div><div class="line">		&#125;<span class="keyword">while</span>(todo.length&gt;<span class="number">0</span>&amp;&amp;(+<span class="keyword">new</span> <span class="built_in">Date</span>()-start)&lt;<span class="number">50</span>);</div><div class="line">		<span class="keyword">if</span>(todo.length&gt;<span class="number">0</span>)&#123;</div><div class="line">			setTimeout(<span class="built_in">arguments</span>.callee,<span class="number">25</span>);</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			callback(items);</div><div class="line">		&#125;</div><div class="line">	&#125;,<span class="number">25</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Web-Workers"><a href="#Web-Workers" class="headerlink" title="Web Workers"></a>Web Workers</h2><p>Web Workers引入了一个接口，能使代码运行且不占用浏览器UI线程的时间，这给Web应用带来了潜在的巨大性能提升，因为每个新的Worker都在自己的线程中运行代码，Worker运行代码不仅不会影响浏览器UI，也不会影响其他Worker中运行的代码。</p>
<ol>
<li><p><strong>Worker运行环境</strong>：</p>
<ul>
<li>一个navigator对象，只包括四个属性：appName、appVersion、userAgent、platform</li>
<li>一个locaction对象（与全局window.location相同，不过所有属性只是只读的）</li>
<li>一个self对象，指向全局Worker对象。</li>
<li>一个importScripts()方法，用来加载Worker所用到的外部javascript文件</li>
<li>所有的ECMAScript对象，诸如：Object、Array、Date</li>
<li>XMLHttpRequest构造器</li>
<li>setTimeout()和setInterbal()方法</li>
<li>一个close()方法，他能立刻停止Worker运行<br><code>var worker=new Worker(&quot;code.js&quot;);</code>此代码一旦执行，将为这个文件创建一个新的线程和一个新的Worker运行环境。该文件会被异步下载，直到文件下载完成后才会启动此Worker</li>
</ul>
</li>
<li><p><strong>与Worker通信</strong>:网页代码postMessage()方法给Worker传递数据,Worker用onmessage()方法来接收信息，Worker内部也是如此,消息系统使网页和Worker通信的唯一途径。</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//网页代码</span></div><div class="line"><span class="keyword">var</span> worker=<span class="keyword">new</span> Worker(<span class="string">"code.js"</span>);</div><div class="line">worker.onmessage=<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">	alert(event.data);</div><div class="line">&#125;;</div><div class="line">wokrer.postMessage(<span class="string">"Nicholas"</span>);</div><div class="line"><span class="comment">//code.js代码</span></div><div class="line">self.onmessage=<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">	self.postMessage(<span class="string">"Hello"</span>+event.data+<span class="string">"!"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><strong>实际应用</strong>： 适用于纯数据处理或与浏览器无关的长时间运行脚本</p>
<ul>
<li>编码/解码大字符串</li>
<li>复杂数学运算</li>
<li>大数组排序</li>
</ul>
</li>
</ol>
<p>任何超过100毫秒的处理过程，都应当考虑Worker方案是不是比基于定时器的方案更为合适</p>
<h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><p>AJax使高性能javaScript的基础，他可以通过延迟下载体积较大的资源文件来使的页面加载更快，选择合适的传输方式和最有效的数据格式，可以显著改善用户和网站的交互体验。</p>
<h2 id="数据传输"><a href="#数据传输" class="headerlink" title="数据传输"></a>数据传输</h2><p>Ajax，从基本的层面来说，是一种与服务器通信而无须重载页面的方法；数据可以从服务器获取或者发送给服务器。</p>
<h3 id="请求数据"><a href="#请求数据" class="headerlink" title="请求数据"></a>请求数据</h3><p>有五种常用技术用于向服务器请求数据（常用前三种）</p>
<ol>
<li><strong>XMLHttpRequset(XHR)</strong><br>通过xhr对象onreadystatechange事件监听readystate值为3、4表示正在与服务器响应进行交互和整个响应已接收完毕；XHR不能从外域请求数据</li>
<li><strong>Dynamic script tag insertion（动态脚本注入）</strong><br>克服了XHR的最大限制：他能跨域请求数据;但是只能使用GET方式<br><code>var scriptElement=document.createElement(&quot;script&quot;);</code><br><code>scriptElement.src=&quot;http://any-domain.com/javascript/lib.js&quot;;</code><br><code>document.getElementByTagName(&quot;head&quot;)[0].appendChild(scriptElement);</code></li>
<li><strong>iframes</strong><br>MXHR允许客户端只用一个HTTP请求就可以从服务端向客户端传送多个资源。它通过在服务端将资源(CSS文件、HTML片段、javaScript代码或base64编码的图片)打包成一个双方约定的字符串分割的长字符串并发送到客户端。不过其最大缺点是以这种方式获得的资源不能被欸浏览器缓存（因为合并后的资源是作为字符串传输的，然后被javaScript代码分解成片段）</li>
<li><strong>Comet</strong>    </li>
<li><strong>Multipart XHR</strong></li>
</ol>
<h3 id="发送数据"><a href="#发送数据" class="headerlink" title="发送数据"></a>发送数据</h3><p>当数据只需要发送到服务器时，有两种广泛使用的技术：XHR和信标（beacons）</p>
<ol>
<li><strong>XMLHttpRequest</strong><br>当使用XHR发送数据到服务器时，get会更快，因为对于少量数据而言，一个GET请求往服务器只发送一个数据包。而一个post请求，至少发送两个，一个装载头信息，另一个装载正文。POST更适合发送大量数据到服务器</li>
<li><p><strong>Beacons</strong><br>这项技术非常类似动态脚本注入。使用javaScript创建一个新的Image对象，并把scr属性设置为服务器上脚本的URL。该URL包含了我们要通过GET传回的键值对数据；可以监听Image对象load事件，判定服务器是否成功接收数据。还可以检查服务器返回图片宽度和高度并使用数字通知你服务器的状态（宽度1表示成功，2表示重试）</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> url=<span class="string">"/status_tracker.php"</span>;</div><div class="line"><span class="keyword">var</span> params=[</div><div class="line">	<span class="string">'step=2'</span>,</div><div class="line">	<span class="string">'time=124455555'</span></div><div class="line">	]</div><div class="line"><span class="keyword">var</span> beacon=<span class="keyword">new</span> Image();</div><div class="line">beacon.src=url+<span class="string">'?'</span>+params.join(<span class="string">'&amp;'</span>);</div><div class="line">beacon.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">if</span>(<span class="keyword">this</span>.width==<span class="number">1</span>)&#123;</div><div class="line">		<span class="comment">//成功</span></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.width==<span class="number">2</span>)&#123;</div><div class="line">		<span class="comment">//失败，请重试并创建另一个信标</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">beacon.onerror=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="comment">//出错哦，请重试并创建另一个信标</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>优点：服务器会接收到数据并保存下来，他无需向客户端发送任何回馈信息。这是给服务器回传信息最有效的方式。它的性能消耗很小，而且服务端错误完全不会影响到客户端。<br>缺点：无法发送POST数据；数据长度被限制的相当小</p>
</li>
</ol>
<h2 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h2><p>当考虑数据传输技术时，你必须考虑：功能集、兼容性、性能以及方向。当考虑数据格式时，唯一需要比较的就是速度。<br>没有哪种数据格式会始终比其他格式好。优劣取决于要传输的数据以及它在页面上的用途，一种可能下载更快，另一种可能解析更快</p>
<ol>
<li><strong>XML</strong><br>相比其他格式XML极其冗长；每个单独数据片段都依赖大量结构，有效数据的比列非常低。解析XML除了要提前知道详细结构外，还必须确切地知道如何解析这个结构并费力地将它重组到JavaScript对象中。有个优化方法是使用子标签，使用属性时文件更小，解析速度更快。不过总而言之，在高性能Ajax中，XML没有立足之地。</li>
<li><strong>JSON</strong><br>JSON是由javsaScript对象和数组直接量编写地轻量级且易于解析地数据格式。<br>json字符串转换成json对象：<code>var obj=eval(&#39;(&#39;+str+&#39;)&#39;);var obj=str.parseJSON();var obj=JSON.parse(str);</code><br>json对象转换为json字符串：<code>var last =obj.toJSONString(); var last=JSON.stringify(obj);</code></li>
<li><p>JSON-P<br>JSON可以本地执行会导致几个重要的性能影响。当使用XHR时JSON数据被当成字符串返回，紧接着被转换成原生对象。而在使用动态脚本注入时，JSON数据被当成另一个JavaScript文件并作为原生代码执行（无需解析）。为实现这一点这些数据必须封装在一个回调函数里。即所谓“JSON填充”</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//本地文件</span></div><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt; </div><div class="line"><span class="comment">// 得到航班信息查询结果后的回调函数 </span></div><div class="line"><span class="keyword">var</span> flightHandler = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123; </div><div class="line">alert(<span class="string">'你查询的航班结果是：票价 '</span> + data.price + <span class="string">' 元，'</span> + <span class="string">'余票 '</span> + data.tickets + <span class="string">' 张。'</span>); </div><div class="line">&#125;; </div><div class="line"><span class="comment">// 提供jsonp服务的url地址（不管是什么类型的地址，最终生成的返回值都是一段javascript代码） </span></div><div class="line"><span class="keyword">var</span> url = <span class="string">"http://flightQuery.com/jsonp/flightResult.aspx?code=CA1998&amp;callback=flightHandler"</span>; <span class="comment">//告诉服务器回调函数名</span></div><div class="line"><span class="comment">// 创建script标签，设置其属性 </span></div><div class="line"><span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>); </div><div class="line">script.setAttribute(<span class="string">'src'</span>, url); </div><div class="line"><span class="comment">// 把script标签加入head，此时调用开始 </span></div><div class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>].appendChild(script); </div><div class="line">&lt;<span class="regexp">/script&gt; </span></div><div class="line"><span class="regexp">/</span><span class="regexp">/远程服务器跨域调用本地函数并传入json参数</span></div><div class="line"><span class="regexp">flightHandler(&#123; </span></div><div class="line"><span class="regexp">"code": "CA1998", </span></div><div class="line"><span class="regexp">"price": 1780, </span></div><div class="line"><span class="regexp">"tickets": 5 </span></div><div class="line"><span class="regexp">&#125;);</span></div></pre></td></tr></table></figure>
<p> 不要把任何敏感数据编码在JSON-P中，一因为你无法确认它是否保有私有调用状态。它可能被任何人调用并使用动态脚本注入技术插入到任何网站。</p>
</li>
<li><strong>HTML</strong><br>既臃肿又缓慢</li>
<li><strong>自定义数据格式</strong><br>理想的数据格式应该只包含必要的结构，以便你可以分解出每一个独立的字段。可以定义一种把数据用分隔符链接的格式。split()是最快的字符串操作方式之一。创建自定义i数据格式，最重要的的决定是采用哪种分隔符。</li>
</ol>
<h2 id="Ajax性能指南"><a href="#Ajax性能指南" class="headerlink" title="Ajax性能指南"></a>Ajax性能指南</h2><p>最快的Ajax请求就是没有请求。有两种方式可避免发送不必要的请求：</p>
<ul>
<li>在服务端，设置HTTP头信息以确保你的响应会被浏览器缓存</li>
<li>在客户端，把获取到的信息存储到本地，从而避免再次请求（把响应文本保存到一个对象中，以URL键值作为索引）</li>
</ul>
<p>第一种技术使用最简单而且好维护，第二种则给你最大的控制权。</p>
<h1 id="编程实践"><a href="#编程实践" class="headerlink" title="编程实践"></a>编程实践</h1><h2 id="避免双重求值"><a href="#避免双重求值" class="headerlink" title="避免双重求值"></a>避免双重求值</h2><h2 id="使用Object-Array直接量"><a href="#使用Object-Array直接量" class="headerlink" title="使用Object/Array直接量"></a>使用Object/Array直接量</h2><h2 id="避免重复工作"><a href="#避免重复工作" class="headerlink" title="避免重复工作"></a>避免重复工作</h2><h2 id="使用速度快的部分"><a href="#使用速度快的部分" class="headerlink" title="使用速度快的部分"></a>使用速度快的部分</h2>]]></content>
      
        <categories>
            
            <category> 技术分享 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 高性能js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[寒假总结]]></title>
      <url>https://dsb123dsb.github.io/2017/02/11/%E5%AF%92%E5%81%87%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<blockquote>
<p>纸上得来终觉浅，绝知此事要躬行</p>
</blockquote>
<p>2.6号回公司上班，到今天辞职终于静下心来好好回顾下这个寒假、或者去年暑假以来的学习历程，想写总结，却有着不知从何下笔，可能成果并不令自己满意又或者过去太久失去了当初要记录的心情。<br><img src="http://i.imgur.com/LpVMnLA.jpg" alt=""><br><a id="more"></a><br>似乎别人问我为什么转行码农，自己总是迎合他们他们想要的答案，诸如：工资高、跟随潮流，之类，似乎扯上热爱在这个务实的社会里显得有些虚伪，我并不知道自己对于编程有多热爱，是否有编程改变世界的梦想，也许很多人转行前对于程序员的雾里看花，程序员的哥哥却让我知道那个曾经遥远世界的真实模样，自己也会在某些时刻想到如果不是哥哥当初说家里不要有两个程序员，也许本科我就已经走上码农的道路，可能有些人走来走去终究会走到自己该走的道路上，现在虽然走的迟了些，但是我想会走的更加稳和耐心，在25岁那个年龄还能做出些折腾的尝试，骨子也许就是个爱折腾的人，现在写的代码时也渐渐会感到与整个世界隔离又仿佛拥有另一个完整世界，自己好像很享受在两个世界来回穿梭的感觉。</p>
<p>扯了这么多没用的，这个寒假红宝书又从头到尾看来了一遍，阮一峰老师的ES6也看完了，刷了很多校招笔试题目，至于娱乐看了西部世界，也在寒假结束的时候下定了某些决心，做出了一些决定，想想自己学习前端以来除了自认为js基础掌握还可以，似乎没有什么拿得出像样的作品，blog网站是用的别人的框架，用juqery和bootstrap做了几个静态网站，却也不敢说自己对于他们有多精通，github上面star了一堆项目却几乎好好研究过的，也看过vue.js、react.js,却也是一瓶子不满半瓶子咣当，转眼就到了要找工作和毕业的时候，面临这毕业压力，只希望自己能始终不放弃自己喜爱、让自己充满激情的事情，永远不要做生活的提线木偶。</p>
<p>编程的世界，道路很多，我相信前端的路上走的越深、越稳、越久，自己的路也会越宽，离其他道路也会越近，愿自己始终有着一颗学习的心，这可能是读研以来最大的收获。</p>
]]></content>
      
        <categories>
            
            <category> 生活随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 实习 </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ES6学习笔记-编程风格总结]]></title>
      <url>https://dsb123dsb.github.io/2017/01/24/ES6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%BC%96%E7%A8%8B%E9%A3%8E%E6%A0%BC%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<blockquote>
<p>纸上得来终觉浅，绝知此事要躬行</p>
</blockquote>
<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>拖拖拉拉好几个月了，终于在假期第一天集中精力把阮老师的<strong>ECMAScript 6 入门</strong>剩余的几章看完了（不得不吐槽，为了支持开源书籍特意买了纸质版，真是排版让人蛋疼，还是电子版舒服）,感觉21章对实践颇有益处，略作摘抄，<a href="http://es6.ruanyifeng.com/#docs/style" target="_blank" rel="external">原文传送门猛戳</a></p>
<h1 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h1><h2 id="let-取代-var"><a href="#let-取代-var" class="headerlink" title="let 取代 var"></a>let 取代 var</h2><p>ES6提出了两个新的声明变量的命令：let和const。其中，let完全可以取代var，因为两者语义相同，而且let没有副作用。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</div><div class="line">  <span class="keyword">let</span> x = <span class="string">'hello'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">  <span class="built_in">console</span>.log(i);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面代码如果用var替代let，实际上就声明了两个全局变量，这显然不是本意。变量应该只在其声明的代码块内有效，var命令做不到这一点。</p>
<p>var命令存在变量提升效用，let命令没有这个问题。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</div><div class="line">  <span class="built_in">console</span>.log(x); <span class="comment">// ReferenceError</span></div><div class="line">  <span class="keyword">let</span> x = <span class="string">'hello'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面代码如果使用var替代let，console.log那一行就不会报错，而是会输出undefined，因为变量声明提升到代码块的头部。这违反了变量先声明后使用的原则。</p>
<p>所以，建议不再使用var命令，而是使用let命令取代。<br><a id="more"></a></p>
<h2 id="全局常量和线程安全"><a href="#全局常量和线程安全" class="headerlink" title="全局常量和线程安全"></a>全局常量和线程安全</h2><p>在let和const之间，建议优先使用const，尤其是在全局环境，不应该设置变量，只应设置常量。</p>
<p>const优于let有几个原因。一个是const可以提醒阅读程序的人，这个变量不应该改变；另一个是const比较符合函数式编程思想，运算不改变值，只是新建值，而且这样也有利于将来的分布式运算；最后一个原因是 JavaScript 编译器会对const进行优化，所以多使用const，有利于提供程序的运行效率，也就是说let和const的本质区别，其实是编译器内部的处理不同。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>, b = <span class="number">2</span>, c = <span class="number">3</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">const</span> a = <span class="number">1</span>;</div><div class="line"><span class="keyword">const</span> b = <span class="number">2</span>;</div><div class="line"><span class="keyword">const</span> c = <span class="number">3</span>;</div><div class="line"></div><div class="line"><span class="comment">// best</span></div><div class="line"><span class="keyword">const</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div></pre></td></tr></table></figure></p>
<p>const声明常量还有两个好处，一是阅读代码的人立刻会意识到不应该修改这个值，二是防止了无意间修改变量值所导致的错误。</p>
<p>所有的函数都应该设置为常量。</p>
<p>长远来看，JavaScript可能会有多线程的实现（比如Intel的River Trail那一类的项目），这时let表示的变量，只应出现在单线程运行的代码中，不能是多线程共享的，这样有利于保证线程安全。</p>
<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><p>静态字符串一律使用单引号或反引号，不使用双引号。动态字符串使用反引号。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> a = <span class="string">"foobar"</span>;</div><div class="line"><span class="keyword">const</span> b = <span class="string">'foo'</span> + a + <span class="string">'bar'</span>;</div><div class="line"></div><div class="line"><span class="comment">// acceptable</span></div><div class="line"><span class="keyword">const</span> c = <span class="string">`foobar`</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">const</span> a = <span class="string">'foobar'</span>;</div><div class="line"><span class="keyword">const</span> b = <span class="string">`foo<span class="subst">$&#123;a&#125;</span>bar`</span>;</div><div class="line"><span class="keyword">const</span> c = <span class="string">'foobar'</span>;</div></pre></td></tr></table></figure></p>
<h1 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h1><p>使用数组成员对变量赋值时，优先使用解构赋值。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> first = arr[<span class="number">0</span>];</div><div class="line"><span class="keyword">const</span> second = arr[<span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">const</span> [first, second] = arr;</div></pre></td></tr></table></figure></p>
<p>函数的参数如果是对象的成员，优先使用解构赋值。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">user</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> firstName = user.firstName;</div><div class="line">  <span class="keyword">const</span> lastName = user.lastName;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> &#123; firstName, lastName &#125; = obj;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// best</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">&#123; firstName, lastName &#125;</span>) </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果函数返回多个值，优先使用对象的解构赋值，而不是数组的解构赋值。这样便于以后添加返回值，以及更改返回值的顺序。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">processInput</span>(<span class="params">input</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> [left, right, top, bottom];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">processInput</span>(<span class="params">input</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123; left, right, top, bottom &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> &#123; left, right &#125; = processInput(input);</div></pre></td></tr></table></figure></p>
<h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><p>单行定义的对象，最后一个成员不以逗号结尾。多行定义的对象，最后一个成员以逗号结尾。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> a = &#123; <span class="attr">k1</span>: v1, <span class="attr">k2</span>: v2, &#125;;</div><div class="line"><span class="keyword">const</span> b = &#123;</div><div class="line">  k1: v1,</div><div class="line">  k2: v2</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">const</span> a = &#123; <span class="attr">k1</span>: v1, <span class="attr">k2</span>: v2 &#125;;</div><div class="line"><span class="keyword">const</span> b = &#123;</div><div class="line">  k1: v1,</div><div class="line">  k2: v2,</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>对象尽量静态化，一旦定义，就不得随意添加新的属性。如果添加属性不可避免，要使用Object.assign方法。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> a = &#123;&#125;;</div><div class="line">a.x = <span class="number">3</span>;</div><div class="line"></div><div class="line"><span class="comment">// if reshape unavoidable</span></div><div class="line"><span class="keyword">const</span> a = &#123;&#125;;</div><div class="line"><span class="built_in">Object</span>.assign(a, &#123; <span class="attr">x</span>: <span class="number">3</span> &#125;);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">const</span> a = &#123; <span class="attr">x</span>: <span class="literal">null</span> &#125;;</div><div class="line">a.x = <span class="number">3</span>;</div></pre></td></tr></table></figure></p>
<p>如果对象的属性名是动态的，可以在创造对象的时候，使用属性表达式定义。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> obj = &#123;</div><div class="line">  id: <span class="number">5</span>,</div><div class="line">  name: <span class="string">'San Francisco'</span>,</div><div class="line">&#125;;</div><div class="line">obj[getKey(<span class="string">'enabled'</span>)] = <span class="literal">true</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">const</span> obj = &#123;</div><div class="line">  id: <span class="number">5</span>,</div><div class="line">  name: <span class="string">'San Francisco'</span>,</div><div class="line">  [getKey(<span class="string">'enabled'</span>)]: <span class="literal">true</span>,</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>上面代码中，对象obj的最后一个属性名，需要计算得到。这时最好采用属性表达式，在新建obj的时候，将该属性与其他属性定义在一起。这样一来，所有属性就在一个地方定义了。</p>
<p>另外，对象的属性和方法，尽量采用简洁表达法，这样易于描述和书写。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ref = <span class="string">'some value'</span>;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> atom = &#123;</div><div class="line">  ref: ref,</div><div class="line"></div><div class="line">  value: <span class="number">1</span>,</div><div class="line"></div><div class="line">  addValue: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> atom.value + value;</div><div class="line">  &#125;,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">const</span> atom = &#123;</div><div class="line">  ref,</div><div class="line"></div><div class="line">  value: <span class="number">1</span>,</div><div class="line"></div><div class="line">  addValue(value) &#123;</div><div class="line">    <span class="keyword">return</span> atom.value + value;</div><div class="line">  &#125;,</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>使用扩展运算符（…）拷贝数组。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> len = items.length;</div><div class="line"><span class="keyword">const</span> itemsCopy = [];</div><div class="line"><span class="keyword">let</span> i;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">  itemsCopy[i] = items[i];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">const</span> itemsCopy = [...items];</div></pre></td></tr></table></figure></p>
<p>使用Array.from方法，将类似数组的对象转为数组。</p>
<pre><code>const foo = document.querySelectorAll(&apos;.foo&apos;);
const nodes = Array.from(foo);
</code></pre><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>立即执行函数可以写成箭头函数的形式。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Welcome to the Internet.'</span>);</div><div class="line">&#125;)();</div><div class="line">那些需要使用函数表达式的场合，尽量用箭头函数代替。因为这样更简洁，而且绑定了<span class="keyword">this</span>。</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> x * x;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> x * x;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// best</span></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="params">x</span> =&gt;</span> x * x);</div></pre></td></tr></table></figure></p>
<p>箭头函数取代Function.prototype.bind，不应再用self/_this/that绑定 this。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> self = <span class="keyword">this</span>;</div><div class="line"><span class="keyword">const</span> boundMethod = <span class="function"><span class="keyword">function</span>(<span class="params">...params</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> method.apply(self, params);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// acceptable</span></div><div class="line"><span class="keyword">const</span> boundMethod = method.bind(<span class="keyword">this</span>);</div><div class="line"></div><div class="line"><span class="comment">// best</span></div><div class="line"><span class="keyword">const</span> boundMethod = <span class="function">(<span class="params">...params</span>) =&gt;</span> method.apply(<span class="keyword">this</span>, params);</div></pre></td></tr></table></figure></p>
<p>简单的、单行的、不会复用的函数，建议采用箭头函数。如果函数体较为复杂，行数较多，还是应该采用传统的函数写法。</p>
<p>所有配置项都应该集中在一个对象，放在最后一个参数，布尔值不可以直接作为参数。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">divide</span>(<span class="params">a, b, option = false </span>) </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">divide</span>(<span class="params">a, b, &#123; option = false &#125; = &#123;&#125;</span>) </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>不要在函数体内使用arguments变量，使用rest运算符（…）代替。因为rest运算符显式表明你想要获取参数，而且arguments是一个类似数组的对象，而rest运算符可以提供一个真正的数组。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">concatenateAll</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</div><div class="line">  <span class="keyword">return</span> args.join(<span class="string">''</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">concatenateAll</span>(<span class="params">...args</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> args.join(<span class="string">''</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用默认值语法设置函数参数的默认值。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleThings</span>(<span class="params">opts</span>) </span>&#123;</div><div class="line">  opts = opts || &#123;&#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleThings</span>(<span class="params">opts = &#123;&#125;</span>) </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="Map结构"><a href="#Map结构" class="headerlink" title="Map结构"></a>Map结构</h1><p>注意区分Object和Map，只有模拟现实世界的实体对象时，才使用Object。如果只是需要key: value的数据结构，使用Map结构。因为Map有内建的遍历机制。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>(arr);</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> map.keys()) &#123;</div><div class="line">  <span class="built_in">console</span>.log(key);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> map.values()) &#123;</div><div class="line">  <span class="built_in">console</span>.log(value);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> map.entries()) &#123;</div><div class="line">  <span class="built_in">console</span>.log(item[<span class="number">0</span>], item[<span class="number">1</span>]);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h1><p>总是用Class，取代需要prototype的操作。因为Class的写法更简洁，更易于理解。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Queue</span>(<span class="params">contents = []</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>._queue = [...contents];</div><div class="line">&#125;</div><div class="line">Queue.prototype.pop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> value = <span class="keyword">this</span>._queue[<span class="number">0</span>];</div><div class="line">  <span class="keyword">this</span>._queue.splice(<span class="number">0</span>, <span class="number">1</span>);</div><div class="line">  <span class="keyword">return</span> value;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(contents = []) &#123;</div><div class="line">    <span class="keyword">this</span>._queue = [...contents];</div><div class="line">  &#125;</div><div class="line">  pop() &#123;</div><div class="line">    <span class="keyword">const</span> value = <span class="keyword">this</span>._queue[<span class="number">0</span>];</div><div class="line">    <span class="keyword">this</span>._queue.splice(<span class="number">0</span>, <span class="number">1</span>);</div><div class="line">    <span class="keyword">return</span> value;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用extends实现继承，因为这样更简单，不会有破坏instanceof运算的危险。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> inherits = <span class="built_in">require</span>(<span class="string">'inherits'</span>);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">PeekableQueue</span>(<span class="params">contents</span>) </span>&#123;</div><div class="line">  Queue.apply(<span class="keyword">this</span>, contents);</div><div class="line">&#125;</div><div class="line">inherits(PeekableQueue, Queue);</div><div class="line">PeekableQueue.prototype.peek = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>._queue[<span class="number">0</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PeekableQueue</span> <span class="keyword">extends</span> <span class="title">Queue</span> </span>&#123;</div><div class="line">  peek() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._queue[<span class="number">0</span>];</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h1><p>首先，Module语法是JavaScript模块的标准写法，坚持使用这种写法。使用import取代require。(ES6模块加载的机制，与CommonJS模块完全不同。CommonJS模块输出的是一个值的拷贝，而ES6模块输出的是值的引用。)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// bad</div><div class="line">const moduleA = require(&apos;moduleA&apos;);</div><div class="line">const func1 = moduleA.func1;</div><div class="line">const func2 = moduleA.func2;</div><div class="line"></div><div class="line">// good</div><div class="line">import &#123; func1, func2 &#125; from &apos;moduleA&apos;;</div></pre></td></tr></table></figure></p>
<p>使用export取代module.exports。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// commonJS的写法</span></div><div class="line"><span class="keyword">var</span> React = <span class="built_in">require</span>(<span class="string">'react'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> Breadcrumbs = React.createClass(&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">nav</span> /&gt;</span>;</span></div><div class="line"><span class="xml">  &#125;</span></div><div class="line"><span class="xml">&#125;);</span></div><div class="line"><span class="xml"></span></div><div class="line"><span class="xml">module.exports = Breadcrumbs;</span></div></pre></td></tr></table></figure></p>
<p>// ES6的写法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">import React from &apos;react&apos;;</div><div class="line"></div><div class="line">const Breadcrumbs = React.createClass(&#123;</div><div class="line">  render() &#123;</div><div class="line">    return &lt;nav /&gt;;</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">export default Breadcrumbs</div></pre></td></tr></table></figure></p>
<p>如果模块只有一个输出值，就使用export default，如果模块有多个输出值，就不使用export default，不要export default与普通的export同时使用。</p>
<p>不要在模块输入中使用通配符。因为这样可以确保你的模块之中，有一个默认输出（export default）。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> myObject <span class="string">'./importModule'</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">import</span> myObject <span class="keyword">from</span> <span class="string">'./importModule'</span>;</div></pre></td></tr></table></figure></p>
<p>如果模块默认输出一个函数，函数名的首字母应该小写。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeStyleGuide</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> makeStyleGuide;</div></pre></td></tr></table></figure></p>
<p>如果模块默认输出一个对象，对象名的首字母应该大写。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> StyleGuide = &#123;</div><div class="line">  es6: &#123;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> StyleGuide;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 基础杂谈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ES5和ES6中的继承]]></title>
      <url>https://dsb123dsb.github.io/2017/01/14/ES5%E5%92%8CES6%E4%B8%AD%E7%9A%84%E7%BB%A7%E6%89%BF/</url>
      <content type="html"><![CDATA[<blockquote>
<p>纸上得来终觉浅，绝知此事要躬行</p>
</blockquote>
<p>Javascript中的继承一直是个比较麻烦的问题，prototype、constructor、<strong>proto</strong>在构造函数，实例和原型之间有的复杂的关系，不仔细捋下很难记得牢固。ES6中又新增了class和extends，和ES5搅在一起，加上平时很少自己写继承，简直乱成一锅粥。不过还好，画个图一下就清晰了，下面不说话了，直接上图，上代码。</p>
<h1 id="ES5"><a href="#ES5" class="headerlink" title="ES5"></a>ES5</h1><p>ES5中的继承，先看代码在看图：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Super</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">Sub.prototype = <span class="keyword">new</span> Super();</div><div class="line">Sub.prototype.constructor = Sub;</div><div class="line"> </div><div class="line"><span class="keyword">var</span> sub = <span class="keyword">new</span> Sub();</div><div class="line"> </div><div class="line">Sub.prototype.constructor === Sub; <span class="comment">// ② true</span></div><div class="line">sub.constructor === Sub; <span class="comment">// ④ true</span></div><div class="line">sub.__proto__ === Sub.prototype; <span class="comment">// ⑤ true</span></div><div class="line">Sub.prototype.__proto__ == Super.prototype; <span class="comment">// ⑦ true</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p><img src="http://i.imgur.com/WEOv2Ud.png" alt=""></p>
<p>ES5中这种最简单的继承，实质上就是将子类的原型设置为父类的实例。</p>
<h1 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h1><p>ES6中的继承，看图：</p>
<p><img src="http://i.imgur.com/Iq4UcDX.png" alt=""><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Super</span> </span>&#123;&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Super</span> </span>&#123;&#125;</div><div class="line"> </div><div class="line"><span class="keyword">var</span> sub = <span class="keyword">new</span> Sub();</div><div class="line"> </div><div class="line">Sub.prototype.constructor === Sub; <span class="comment">// ② true</span></div><div class="line">sub.constructor === Sub; <span class="comment">// ④ true</span></div><div class="line">sub.__proto__ === Sub.prototype; <span class="comment">// ⑤ true</span></div><div class="line">Sub.__proto__ === Super; <span class="comment">// ⑥ true</span></div><div class="line">Sub.prototype.__proto__ === Super.prototype; <span class="comment">// ⑦ true</span></div></pre></td></tr></table></figure></p>
<h1 id="所以"><a href="#所以" class="headerlink" title="所以"></a>所以</h1><p>ES6和ES5的继承是一模一样的，只是多了<code>class</code> 和<code>extends</code> ，ES6的子类和父类，子类原型和父类原型，通过<code>__proto__</code> 连接。</p>
<p>图文参考自：<a href="http://keenwon.com/1524.html" target="_blank" rel="external">http://keenwon.com/1524.html</a></p>
]]></content>
      
        <categories>
            
            <category> 技术分享 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> 继承 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何写出好的Javascript-浅谈API设计]]></title>
      <url>https://dsb123dsb.github.io/2017/01/06/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%A6%82%E4%BD%95%E5%86%99%E5%87%BA%E5%A5%BD%E7%9A%84Javascript-%E6%B5%85%E8%B0%88API%E8%AE%BE%E8%AE%A1/</url>
      <content type="html"><![CDATA[<blockquote>
<p>写在前面-最近学习Es6的异步操作和Async函数，然后就看着这篇文章，自己也做了些改进和思考，也体验一把一种需求的各种实现！！</p>
</blockquote>
<p>原文出处：<a href="https://www.h5jun.com/post/how-to-write-better-js-code.html" target="_blank" rel="external">十年踪迹</a></p>
<p>这是 <a href="https://t.75team.com/" target="_blank" rel="external">奇舞前端特训营</a> <a href="http://ppt.baomitu.com/display?slide_id=abd5083a#/21" target="_blank" rel="external">JavaScript 培训课程</a> 的节选。很多同学觉得写 JavaScript 很简单，只要能写出功能来，效果能实现就好。还有一些培训机构，专门教人写各种“炫酷特效”，以此让许多人觉得这些培训很“牛逼”。然而事实上，能写 JavaScript 和写好 JavaScript 这中间还有很遥远的距离。成为专业前端，注定在 JavaScript 路途上需要一步步扎实的修炼，没有捷径。<br><img src="https://p3.ssl.qhimg.com/t0111abe7db051d82e7.jpg" alt=""><br><a id="more"></a></p>
<h1 id="看一个简单的例子："><a href="#看一个简单的例子：" class="headerlink" title="看一个简单的例子："></a>看一个简单的例子：</h1><p>实现一个类似于“交通灯”的效果，让三个不同颜色的圆点每隔 2 秒循环切换。</p>
<h2 id="对应的-HTML-和-CSS-如下："><a href="#对应的-HTML-和-CSS-如下：" class="headerlink" title="对应的 HTML 和 CSS 如下："></a>对应的 HTML 和 CSS 如下：</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">XHTML</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"traffic"</span> <span class="attr">class</span>=<span class="string">"wait"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"traffic"</span> <span class="attr">class</span>=<span class="string">"wait"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">	<span class="selector-id">#traffic</span> &gt; <span class="selector-tag">li</span>&#123;</div><div class="line">	  <span class="attribute">display</span>: block;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="selector-id">#traffic</span> <span class="selector-tag">span</span>&#123;</div><div class="line">	  <span class="attribute">display</span>: inline-block;</div><div class="line">	  <span class="attribute">width</span>: <span class="number">50px</span>;</div><div class="line">	  <span class="attribute">height</span>: <span class="number">50px</span>;</div><div class="line">	  <span class="attribute">background-color</span>: gray;</div><div class="line">	  <span class="attribute">margin</span>: <span class="number">5px</span>;</div><div class="line">	  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="selector-id">#traffic</span><span class="selector-class">.stop</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(1)</span> <span class="selector-tag">span</span>&#123;</div><div class="line">	  <span class="attribute">background-color</span>: <span class="number">#a00</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="selector-id">#traffic</span><span class="selector-class">.wait</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(2)</span> <span class="selector-tag">span</span>&#123;</div><div class="line">	  <span class="attribute">background-color</span>: <span class="number">#aa0</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="selector-id">#traffic</span><span class="selector-class">.pass</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(3)</span> <span class="selector-tag">span</span>&#123;</div><div class="line">	  <span class="attribute">background-color</span>: <span class="number">#0a0</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="selector-id">#traffic</span> &gt; <span class="selector-tag">li</span>&#123;</div><div class="line">	  <span class="attribute">display</span>: block;</div><div class="line">	&#125;</div><div class="line">	 </div><div class="line">	<span class="selector-id">#traffic</span> <span class="selector-tag">span</span>&#123;</div><div class="line">	  <span class="attribute">display</span>: inline-block;</div><div class="line">	  <span class="attribute">width</span>: <span class="number">50px</span>;</div><div class="line">	  <span class="attribute">height</span>: <span class="number">50px</span>;</div><div class="line">	  <span class="attribute">background-color</span>: gray;</div><div class="line">	  <span class="attribute">margin</span>: <span class="number">5px</span>;</div><div class="line">	  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</div><div class="line">	&#125;</div><div class="line">	 </div><div class="line">	<span class="selector-id">#traffic</span><span class="selector-class">.stop</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(1)</span> <span class="selector-tag">span</span>&#123;</div><div class="line">	  <span class="attribute">background-color</span>: <span class="number">#a00</span>;</div><div class="line">	&#125;</div><div class="line">	 </div><div class="line">	<span class="selector-id">#traffic</span><span class="selector-class">.wait</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(2)</span> <span class="selector-tag">span</span>&#123;</div><div class="line">	  <span class="attribute">background-color</span>: <span class="number">#aa0</span>;</div><div class="line">	&#125;</div><div class="line">	 </div><div class="line">	<span class="selector-id">#traffic</span><span class="selector-class">.pass</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(3)</span> <span class="selector-tag">span</span>&#123;</div><div class="line">	  <span class="attribute">background-color</span>: <span class="number">#0a0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>那么这一功能的 JavaScript 该如何实现呢？</p>
<h1 id="版本一-定时器嵌套"><a href="#版本一-定时器嵌套" class="headerlink" title="版本一 定时器嵌套"></a>版本一 定时器嵌套</h1><p>有的同学说，这个实现还不简单嘛？直接用几个定时器一下切换不就好了：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">const</span> traffic = <span class="built_in">document</span>.getElementById(<span class="string">"traffic"</span>);</div><div class="line"></div><div class="line">(<span class="function"><span class="keyword">function</span> <span class="title">reset</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  traffic.className = <span class="string">"wait"</span>;</div><div class="line"></div><div class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      traffic.className = <span class="string">"stop"</span>;</div><div class="line">      setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        traffic.className = <span class="string">"pass"</span>;</div><div class="line">        setTimeout(reset, <span class="number">2000</span>)</div><div class="line">      &#125;, <span class="number">2000</span>)</div><div class="line">  &#125;, <span class="number">2000</span>);</div><div class="line">&#125;)();</div><div class="line"></div><div class="line"><span class="keyword">const</span> traffic = <span class="built_in">document</span>.getElementById(<span class="string">"traffic"</span>);</div><div class="line"> </div><div class="line">(<span class="function"><span class="keyword">function</span> <span class="title">reset</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  traffic.className = <span class="string">"wait"</span>;</div><div class="line"> </div><div class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      traffic.className = <span class="string">"stop"</span>;</div><div class="line">      setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        traffic.className = <span class="string">"pass"</span>;</div><div class="line">        setTimeout(reset, <span class="number">2000</span>)</div><div class="line">      &#125;, <span class="number">2000</span>)</div><div class="line">  &#125;, <span class="number">2000</span>);</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p>没错，就这个功能本身，这样实现就 OK 了。但是这样实现有什么问题呢？</p>
<p>首先是过程耦合，状态切换是wait-&gt;stop-&gt;pass 循环，在上面的设计里，实际上操作顺序是耦合在一起的，要先 ‘wait’，然后等待 2000 毫秒再 ‘stop’，然后再等待 2000 毫秒在 ‘pass’，这中间的顺序一旦有调整，需求有变化，代码都需要修改。</p>
<p>其次，这样的异步嵌套是会产生 callback hell 的，如果需求不是三盏灯，而是五盏灯、十盏灯，代码的嵌套结构就很深，看起来就很难看了。</p>
<p>所以我们说，版本一方法虽然直接，但因为抽象程度很低（几乎没有提供任何抽象 API），它的扩展性很不好，因为异步问题没处理，代码结构也很不好。如果只能写这样的代码，是不能说就写好了 JavaScript 的。</p>
<h1 id="版本二-数据抽象"><a href="#版本二-数据抽象" class="headerlink" title="版本二 数据抽象"></a>版本二 数据抽象</h1><p>要解决版本一的过程耦合问题，最简单的思路是将状态[‘wait’,’stop’,’pass’]抽象出来：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">const</span> traffic = <span class="built_in">document</span>.getElementById(<span class="string">"traffic"</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> stateList = [<span class="string">"wait"</span>, <span class="string">"stop"</span>, <span class="string">"pass"</span>];</div><div class="line"></div><div class="line"><span class="keyword">var</span> currentStateIndex = <span class="number">0</span>;</div><div class="line"></div><div class="line">setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> state = stateList[currentStateIndex];</div><div class="line">  traffic.className = state;</div><div class="line">  currentStateIndex = (currentStateIndex + <span class="number">1</span>) % stateList.length;</div><div class="line">&#125;, <span class="number">2000</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> traffic = <span class="built_in">document</span>.getElementById(<span class="string">"traffic"</span>);</div><div class="line"> </div><div class="line"><span class="keyword">var</span> stateList = [<span class="string">"wait"</span>, <span class="string">"stop"</span>, <span class="string">"pass"</span>];</div><div class="line"> </div><div class="line"><span class="keyword">var</span> currentStateIndex = <span class="number">0</span>;</div><div class="line"> </div><div class="line">setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> state = stateList[currentStateIndex];</div><div class="line">  traffic.className = state;</div><div class="line">  currentStateIndex = (currentStateIndex + <span class="number">1</span>) % stateList.length;</div><div class="line">&#125;, <span class="number">2000</span>);</div></pre></td></tr></table></figure>
<p>这是一种数据抽象的思路，应用它我们得到了上面的这个版本。</p>
<p>这一版本比前一版本要好很多，但是它也有问题，最大的问题就是封装性很差，它把 stateList 和 currentStateIndex 都暴露出来了，而且以全局变量的形式，这么做很不好，需要优化。</p>
<h1 id="版本三-良好封装"><a href="#版本三-良好封装" class="headerlink" title="版本三 良好封装"></a>版本三 良好封装</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">const</span> traffic = <span class="built_in">document</span>.getElementById(<span class="string">"traffic"</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params">traffic, stateList</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> currentStateIndex = <span class="number">0</span>;</div><div class="line"></div><div class="line">  setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> state = stateList[currentStateIndex];</div><div class="line">    traffic.className = state;</div><div class="line">    currentStateIndex = (currentStateIndex + <span class="number">1</span>) % stateList.length;</div><div class="line">  &#125;, <span class="number">2000</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">start(traffic, [<span class="string">"wait"</span>, <span class="string">"stop"</span>, <span class="string">"pass"</span>]);</div><div class="line"></div><div class="line"><span class="keyword">const</span> traffic = <span class="built_in">document</span>.getElementById(<span class="string">"traffic"</span>);</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params">traffic, stateList</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> currentStateIndex = <span class="number">0</span>;</div><div class="line"> </div><div class="line">  setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> state = stateList[currentStateIndex];</div><div class="line">    traffic.className = state;</div><div class="line">    currentStateIndex = (currentStateIndex + <span class="number">1</span>) % stateList.length;</div><div class="line">  &#125;, <span class="number">2000</span>);</div><div class="line">&#125;</div><div class="line"> </div><div class="line">start(traffic, [<span class="string">"wait"</span>, <span class="string">"stop"</span>, <span class="string">"pass"</span>]);</div></pre></td></tr></table></figure>
<p>版本三是中规中矩的一版，也是一般我们在工作中比较常用的思路。应该将暴露出来的 API 暴露出来（本例中的 stateList）。将不应该暴露出来的数据或状态隐藏（本例中的 currentStateIndex）。</p>
<p>有许多同学觉得说写出这一版本来已经很不错的。的确，应该也还不错，但这一版的抽象程度其实也不是很高，或者说，如果考虑适用性，这版已经很好了，但是如果考虑可复用性的话，这版依然有改进空间。</p>
<p>我们再看一个思路上较有意思的版本。</p>
<h1 id="版本四-过程抽象"><a href="#版本四-过程抽象" class="headerlink" title="版本四 过程抽象"></a>版本四 过程抽象</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">const</span> traffic = <span class="built_in">document</span>.getElementById(<span class="string">"traffic"</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">poll</span>(<span class="params">...fnList</span>)</span>&#123;</div><div class="line">  <span class="keyword">let</span> stateIndex = <span class="number">0</span>;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>)</span>&#123;</div><div class="line">    <span class="keyword">let</span> fn = fnList[stateIndex++ % fnList.length];</div><div class="line">    <span class="keyword">return</span> fn.apply(<span class="keyword">this</span>, args);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setState</span>(<span class="params">state</span>)</span>&#123;</div><div class="line">  traffic.className = state;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> trafficStatePoll = poll(setState.bind(<span class="literal">null</span>, <span class="string">"wait"</span>),</div><div class="line">                            setState.bind(<span class="literal">null</span>, <span class="string">"stop"</span>),</div><div class="line">                            setState.bind(<span class="literal">null</span>, <span class="string">"pass"</span>));</div><div class="line"></div><div class="line">setInterval(trafficStatePoll, <span class="number">2000</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> traffic = <span class="built_in">document</span>.getElementById(<span class="string">"traffic"</span>);</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">poll</span>(<span class="params">...fnList</span>)</span>&#123;</div><div class="line">  <span class="keyword">let</span> stateIndex = <span class="number">0</span>;</div><div class="line"> </div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>)</span>&#123;</div><div class="line">    <span class="keyword">let</span> fn = fnList[stateIndex++ % fnList.length];</div><div class="line">    <span class="keyword">return</span> fn.apply(<span class="keyword">this</span>, args);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setState</span>(<span class="params">state</span>)</span>&#123;</div><div class="line">  traffic.className = state;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">let</span> trafficStatePoll = poll(setState.bind(<span class="literal">null</span>, <span class="string">"wait"</span>),</div><div class="line">                            setState.bind(<span class="literal">null</span>, <span class="string">"stop"</span>),</div><div class="line">                            setState.bind(<span class="literal">null</span>, <span class="string">"pass"</span>));</div><div class="line"> </div><div class="line">setInterval(trafficStatePoll, <span class="number">2000</span>);</div></pre></td></tr></table></figure>
<p>这一版用的是过程抽象的思路，而过程抽象，是函数式编程的基础。在这里，我们抽象出了一个 poll(…fnList) 的高阶组合函数，它将一个函数列表组合起来，每次调用时依次轮流执行列表里的函数。</p>
<p>我们说，程序设计的本质是抽象，而过程抽象是一种与数据抽象对应的思路，它们是两种不同的抽象模型。数据抽象比较基础，而过程抽象相对高级一些，也更灵活一些。数据抽象是研究函数如何操作数据，而过程抽象则在此基础上研究函数如何操作函数。所以说如果把抽象比作数学，那么数据抽象是初等数学，过程抽象则是高等数学。同一个问题，既可以用初等数学来解决，又可以用高等数学来解决。用什么方法解决，取决于问题的模型和难度等等。</p>
<p>好了，上面我们有了四个版本，那么是否考虑了这些版本就足够了呢？</p>
<p>并不是。因为需求是会变更的。假设现在需求变化了：</p>
<p>需求变更：让 wait、stop、pass 状态的持续时长不相等，分别改成 1秒、2秒、3秒。<br><img src="http://jbcdn2.b0.upaiyun.com/2017/01/5356e9d0260caf148eb70627496345d8.jpg" alt=""></p>
<p>那么，我们发现 ——</p>
<p>除了版本一之外，版本二、三、四全都跪了……</p>
<p>那是否意味着我们要回归到版本一呢？</p>
<p>当然并不是。</p>
<h1 id="版本五-需求升级"><a href="#版本五-需求升级" class="headerlink" title="版本五 需求升级"></a>版本五 需求升级</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">const</span> traffic = <span class="built_in">document</span>.getElementById(<span class="string">"traffic"</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">wait</span>(<span class="params">time</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> setTimeout(resolve, time));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setState</span>(<span class="params">state</span>)</span>&#123;</div><div class="line">  traffic.className = state;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">reset</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">Promise</span>.resolve()</div><div class="line">    .then(setState.bind(<span class="literal">null</span>, <span class="string">"wait"</span>))</div><div class="line">    .then(wait.bind(<span class="literal">null</span>, <span class="number">1000</span>))</div><div class="line">    .then(setState.bind(<span class="literal">null</span>, <span class="string">"stop"</span>))</div><div class="line">    .then(wait.bind(<span class="literal">null</span>, <span class="number">2000</span>))</div><div class="line">    .then(setState.bind(<span class="literal">null</span>, <span class="string">"pass"</span>))</div><div class="line">    .then(wait.bind(<span class="literal">null</span>, <span class="number">3000</span>))</div><div class="line">    .then(reset);</div><div class="line">&#125;</div><div class="line"></div><div class="line">reset();</div><div class="line"></div><div class="line"><span class="keyword">const</span> traffic = <span class="built_in">document</span>.getElementById(<span class="string">"traffic"</span>);</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">wait</span>(<span class="params">time</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> setTimeout(resolve, time));</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setState</span>(<span class="params">state</span>)</span>&#123;</div><div class="line">  traffic.className = state;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">reset</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">Promise</span>.resolve()</div><div class="line">    .then(setState.bind(<span class="literal">null</span>, <span class="string">"wait"</span>))</div><div class="line">    .then(wait.bind(<span class="literal">null</span>, <span class="number">1000</span>))</div><div class="line">    .then(setState.bind(<span class="literal">null</span>, <span class="string">"stop"</span>))</div><div class="line">    .then(wait.bind(<span class="literal">null</span>, <span class="number">2000</span>))</div><div class="line">    .then(setState.bind(<span class="literal">null</span>, <span class="string">"pass"</span>))</div><div class="line">    .then(wait.bind(<span class="literal">null</span>, <span class="number">3000</span>))</div><div class="line">    .then(reset);</div><div class="line">&#125;</div><div class="line"> </div><div class="line">reset();</div></pre></td></tr></table></figure>
<p>版本五的思路是，既然我们需要考虑不同的持续时间，那么我们需要将等待时间抽象出来：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">wait</span>(<span class="params">time</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> setTimeout(resolve, time));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">wait</span>(<span class="params">time</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> setTimeout(resolve, time));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这一版本里我们用了 Promise 来处理回调问题，当然对 ES6 之前的版本，可以用 shim 或 polyfill、第三方库，也可以选择不用 Promise。</p>
<p>版本五抽象出的 wait 方法也还比较通用，可以用在其他地方。这是版本五好的一点。</p>
<h1 id="版本5-1-更加易读"><a href="#版本5-1-更加易读" class="headerlink" title="版本5.1 更加易读"></a>版本5.1 更加易读</h1><p>把Promise改成async和await</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> traffic=<span class="built_in">document</span>.getElementById(<span class="string">'traffic'</span>);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">wait</span>(<span class="params">time</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span>=&gt;</span>setTimeout(resolve,time));</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setState</span>(<span class="params">state</span>)</span>&#123;</div><div class="line">	traffic.className=state;</div><div class="line">&#125;</div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncPrint</span>(<span class="params">time1,time2,time3</span>) </span>&#123;</div><div class="line">	setState(<span class="string">'wait'</span>);</div><div class="line">  	<span class="keyword">await</span> wait(time1);</div><div class="line">  setState(<span class="string">'stop'</span>);</div><div class="line">  	<span class="keyword">await</span> wait(time2);</div><div class="line">  setState(<span class="string">'pass'</span>);</div><div class="line">  	<span class="keyword">await</span> wait(time3);</div><div class="line">    asyncPrint(<span class="number">1000</span>, <span class="number">2000</span>,<span class="number">3000</span>);</div><div class="line">&#125;</div><div class="line">asyncPrint(<span class="number">1000</span>, <span class="number">2000</span>,<span class="number">3000</span>);</div></pre></td></tr></table></figure>
<h1 id="版本六-我放大招了"><a href="#版本六-我放大招了" class="headerlink" title="版本六 我放大招了"></a>版本六 我放大招了</h1><p>我们还可以进一步抽象，设计出版本六，或者类似的对象模型：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">const</span> trafficEl = <span class="built_in">document</span>.getElementById(<span class="string">"traffic"</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">TrafficProtocol</span>(<span class="params">el, reset</span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.subject = el;</div><div class="line">  <span class="keyword">this</span>.autoReset = reset;</div><div class="line">  <span class="keyword">this</span>.stateList = [];</div><div class="line">&#125;</div><div class="line"></div><div class="line">TrafficProtocol.prototype.putState = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.stateList.push(fn);</div><div class="line">&#125;</div><div class="line"></div><div class="line">TrafficProtocol.prototype.reset = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">let</span> subject = <span class="keyword">this</span>.subject;</div><div class="line"></div><div class="line">  <span class="keyword">this</span>.statePromise = <span class="built_in">Promise</span>.resolve();</div><div class="line">  <span class="keyword">this</span>.stateList.forEach(<span class="function">(<span class="params">stateFn</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">this</span>.statePromise = <span class="keyword">this</span>.statePromise.then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</div><div class="line">        stateFn(subject, resolve);</div><div class="line">      &#125;);</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>.autoReset)&#123;</div><div class="line">    <span class="keyword">this</span>.statePromise.then(<span class="keyword">this</span>.reset.bind(<span class="keyword">this</span>));</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">TrafficProtocol.prototype.start = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.reset();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> traffic = <span class="keyword">new</span> TrafficProtocol(trafficEl, <span class="literal">true</span>);</div><div class="line"></div><div class="line">traffic.putState(<span class="function"><span class="keyword">function</span>(<span class="params">subject, next</span>)</span>&#123;</div><div class="line">  subject.className = <span class="string">"wait"</span>;</div><div class="line">  setTimeout(next, <span class="number">1000</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">traffic.putState(<span class="function"><span class="keyword">function</span>(<span class="params">subject, next</span>)</span>&#123;</div><div class="line">  subject.className = <span class="string">"stop"</span>;</div><div class="line">  setTimeout(next, <span class="number">2000</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">traffic.putState(<span class="function"><span class="keyword">function</span>(<span class="params">subject, next</span>)</span>&#123;</div><div class="line">  subject.className = <span class="string">"pass"</span>;</div><div class="line">  setTimeout(next, <span class="number">3000</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">traffic.start();</div><div class="line"><span class="keyword">const</span> trafficEl = <span class="built_in">document</span>.getElementById(<span class="string">"traffic"</span>);</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">TrafficProtocol</span>(<span class="params">el, reset</span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.subject = el;</div><div class="line">  <span class="keyword">this</span>.autoReset = reset;</div><div class="line">  <span class="keyword">this</span>.stateList = [];</div><div class="line">&#125;</div><div class="line"> </div><div class="line">TrafficProtocol.prototype.putState = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.stateList.push(fn);</div><div class="line">&#125;</div><div class="line"> </div><div class="line">TrafficProtocol.prototype.reset = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">let</span> subject = <span class="keyword">this</span>.subject;</div><div class="line"> </div><div class="line">  <span class="keyword">this</span>.statePromise = <span class="built_in">Promise</span>.resolve();</div><div class="line">  <span class="keyword">this</span>.stateList.forEach(<span class="function">(<span class="params">stateFn</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">this</span>.statePromise = <span class="keyword">this</span>.statePromise.then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</div><div class="line">        stateFn(subject, resolve);</div><div class="line">      &#125;);</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>.autoReset)&#123;</div><div class="line">    <span class="keyword">this</span>.statePromise.then(<span class="keyword">this</span>.reset.bind(<span class="keyword">this</span>));</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">TrafficProtocol.prototype.start = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.reset();</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">var</span> traffic = <span class="keyword">new</span> TrafficProtocol(trafficEl, <span class="literal">true</span>);</div><div class="line"> </div><div class="line">traffic.putState(<span class="function"><span class="keyword">function</span>(<span class="params">subject, next</span>)</span>&#123;</div><div class="line">  subject.className = <span class="string">"wait"</span>;</div><div class="line">  setTimeout(next, <span class="number">1000</span>);</div><div class="line">&#125;);</div><div class="line"> </div><div class="line">traffic.putState(<span class="function"><span class="keyword">function</span>(<span class="params">subject, next</span>)</span>&#123;</div><div class="line">  subject.className = <span class="string">"stop"</span>;</div><div class="line">  setTimeout(next, <span class="number">2000</span>);</div><div class="line">&#125;);</div><div class="line"> </div><div class="line">traffic.putState(<span class="function"><span class="keyword">function</span>(<span class="params">subject, next</span>)</span>&#123;</div><div class="line">  subject.className = <span class="string">"pass"</span>;</div><div class="line">  setTimeout(next, <span class="number">3000</span>);</div><div class="line">&#125;);</div><div class="line"> </div><div class="line">traffic.start();</div></pre></td></tr></table></figure>
<p>这一版本里，我们设计了一个 TrafficProtocol 类，它有 putState、reset、start 三个方法：</p>
<p>putState 接受一个函数作为参数，这个函数自身有两个参数，一个是 subject，是由 TrafficProtocol 对象初始化时设定的 DOM 元素，一个是 next，是一个函数，表示结束当前 state，进入下一个 state。<br>reset 结束当前状态循环，开始新的循环。<br>start 开始执行循环，这里的实现是直接调用 reset。<br>看一下 reset 的实现思路：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">TrafficProtocol.prototype.reset = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">let</span> subject = <span class="keyword">this</span>.subject;</div><div class="line"></div><div class="line">  <span class="keyword">this</span>.statePromise = <span class="built_in">Promise</span>.resolve();</div><div class="line">  <span class="keyword">this</span>.stateList.forEach(<span class="function">(<span class="params">stateFn</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">this</span>.statePromise = <span class="keyword">this</span>.statePromise.then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</div><div class="line">        stateFn(subject, resolve);</div><div class="line">      &#125;);</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>.autoReset)&#123;</div><div class="line">    <span class="keyword">this</span>.statePromise.then(<span class="keyword">this</span>.reset.bind(<span class="keyword">this</span>));</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">TrafficProtocol.prototype.reset = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">let</span> subject = <span class="keyword">this</span>.subject;</div><div class="line"> </div><div class="line">  <span class="keyword">this</span>.statePromise = <span class="built_in">Promise</span>.resolve();</div><div class="line">  <span class="keyword">this</span>.stateList.forEach(<span class="function">(<span class="params">stateFn</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">this</span>.statePromise = <span class="keyword">this</span>.statePromise.then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</div><div class="line">        stateFn(subject, resolve);</div><div class="line">      &#125;);</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>.autoReset)&#123;</div><div class="line">    <span class="keyword">this</span>.statePromise.then(<span class="keyword">this</span>.reset.bind(<span class="keyword">this</span>));</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这里我们创建一个 statePromise，然后将 stateList 中的方法（通过 putState 添加的）依次绑定到 promise 上。如果设置了 autoReset，那么我们在 promise 的最后绑定 reset 自身，这样就实现了循环切换。</p>
<p>有了这个模型，我们要添加新的状态，只需要通过 putState 添加一个新的状态就好了。这一模型不仅仅可以用在这个需求里，还可以用在任何需要顺序执行异步请求的地方。</p>
<p>最后，我们看到，版本六用到了面向对象、过程抽象、Promise等模式，它的优点是 API 设计灵活，通用性和扩展性好。但是版本六也有缺点，它的实现复杂度比前面的几个版本都高，我们在做这样的设计时，也需要考虑是否有过度设计的嫌疑。<br><a href="https://jsfiddle.net/dsb123dsb/02fzwe4z/6/" target="_blank" rel="external">代码地址</a></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li>设计是把双刃剑，繁简需要权衡，尺度需要把握。</li>
<li>写代码简单，程序设计不易，需要走心。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 技术分享 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> ES6 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js实现快速排序（in-place）简述]]></title>
      <url>https://dsb123dsb.github.io/2016/12/27/js%E5%AE%9E%E7%8E%B0%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%EF%BC%88in-place%EF%BC%89%E7%AE%80%E8%BF%B0/</url>
      <content type="html"><![CDATA[<blockquote>
<p>快速排序，又称划分交换排序。以分治法为策略实现的快速排序算法。</p>
</blockquote>
<p>本文主要要谈的是利用javascript实现in-place思想的快速排序</p>
<h1 id="分治法："><a href="#分治法：" class="headerlink" title="分治法："></a>分治法：</h1><p>在<a href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6" target="_blank" rel="external">计算机科学</a>中，分治法是建基于<a href="https://zh.wikipedia.org/wiki/%E9%80%92%E5%BD%92" target="_blank" rel="external">多项分支递归</a>的一种很重要的算法<a href="https://zh.wikipedia.org/wiki/%E8%8C%83%E5%BC%8F" target="_blank" rel="external">范式</a>。字面上的解释是“分而治之”，就是把一个复杂的问题分成两个或更多的相同或相似的子问题，直到最后子问题可以简单的直接求解，原问题的解即子问题的解的合并。（摘自维基百科）</p>
<h1 id="快速排序的思想"><a href="#快速排序的思想" class="headerlink" title="快速排序的思想"></a>快速排序的思想</h1><p>数组中指定一个元素作为标尺，比它大的放到该元素后面，比它小的放到该元素前面，如此重复直至全部正序排列。<br><a id="more"></a><br>快速排序分三步：</p>
<ol>
<li>选基准：在数据结构中选择一个元素作为基准(pivot)</li>
<li>划分区：参照基准元素值的大小，划分无序区，所有小于基准元素的数据放入一个区间，所有大于基准元素的数据放入另一区间，分区操作结束后，基准元素所处的位置就是最终排序后它应该所处的位置</li>
<li>递归：对初次划分出来的两个无序区间，递归调用第 1步和第 2步的算法，直到所有无序区间都只剩下一个元素为止。</li>
</ol>
<h2 id="现在先说说普遍的实现方法（没有用到原地算法）"><a href="#现在先说说普遍的实现方法（没有用到原地算法）" class="headerlink" title="现在先说说普遍的实现方法（没有用到原地算法）"></a>现在先说说普遍的实现方法（没有用到原地算法）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (arr.length &lt;= <span class="number">1</span>) <span class="keyword">return</span> ;</div><div class="line">    </div><div class="line">    <span class="comment">//取数组最接近中间的数位基准，奇数与偶数取值不同，但不印象，当然，你可以选取第一个，或者最后一个数为基准，这里不作过多描述</span></div><div class="line">    <span class="keyword">var</span> pivotIndex = <span class="built_in">Math</span>.floor(arr.length / <span class="number">2</span>);</div><div class="line">    <span class="keyword">var</span> pivot = arr.splice(pivotIndex, <span class="number">1</span>)[<span class="number">0</span>];</div><div class="line">    <span class="comment">//左右区间，用于存放排序后的数</span></div><div class="line">    <span class="keyword">var</span> left = [];</div><div class="line">    <span class="keyword">var</span> right = [];</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'基准为：'</span> + pivot + <span class="string">' 时'</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'分区操作的第 '</span> + (i + <span class="number">1</span>) + <span class="string">' 次循环：'</span>);</div><div class="line">        <span class="comment">//小于基准，放于左区间，大于基准，放于右区间</span></div><div class="line">        <span class="keyword">if</span> (arr[i] &lt; pivot) &#123;</div><div class="line">            left.push(arr[i]);</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'左边：'</span> + (arr[i]))</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            right.push(arr[i]);</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'右边：'</span> + (arr[i]))</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//这里使用concat操作符，将左区间，基准，右区间拼接为一个新数组</span></div><div class="line">    <span class="comment">//然后递归1，2步骤，直至所有无序区间都 只剩下一个元素 ，递归结束</span></div><div class="line">    <span class="keyword">return</span> quickSort(left).concat([pivot], quickSort(right));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> arr = [<span class="number">14</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">76</span>, <span class="number">11</span>];</div><div class="line"><span class="built_in">console</span>.log(quickSort(arr));</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> * 基准为7时，第一次分区得到左右两个子集[ 3, 2,]   7   [14, 15, 76, 11];</span></div><div class="line"><span class="comment"> * 以基准为2，对左边的子集[3,2]进行划分区排序,得到[2] 3。左子集排序全部结束</span></div><div class="line"><span class="comment"> * 以基准为76，对右边的子集进行划分区排序,得到[14, 15, 11] 76</span></div><div class="line"><span class="comment"> * 此时对上面的[14, 15, 11]以基准为15再进行划分区排序， [14, 11] 15</span></div><div class="line"><span class="comment"> * 此时对上面的[14, 11]以基准为11再进行划分区排序， 11  [14]</span></div><div class="line"><span class="comment"> * 所有无序区间都只剩下一个元素，递归结束</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> */</span></div></pre></td></tr></table></figure>
<p>通过断点调试，可得出结果。</p>
<h2 id="弊端："><a href="#弊端：" class="headerlink" title="弊端："></a>弊端：</h2><p>它需要Ω(n)的额外存储空间，跟归并排序一样不好。在生产环境中，需要额外的内存空间，影响性能。</p>
<p>同时，很多人认为上边的就是真正的快速排序了。 所以，在下面，很有必要的推荐in-place算法的快速排序</p>
<p>有关于原地算法可参考<a href="https://zh.wikipedia.org/wiki/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95" target="_blank" rel="external">维基百科</a>，被墙的同学，百度也差不多。</p>
<h1 id="in-place"><a href="#in-place" class="headerlink" title="in-place"></a>in-place</h1><p>快速排序一般是用递归实现，最关键是partition分割函数，它将数组划分为两部分，一部分小于pivot，另一部分大于pivot。具体原理上边提过</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">    <span class="comment">// 交换</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">arr, a, b</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> temp = arr[a];</div><div class="line">        arr[a] = arr[b];</div><div class="line">        arr[b] = temp;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 分区</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">partition</span>(<span class="params">arr, left, right</span>) </span>&#123;</div><div class="line">        <span class="comment">/**</span></div><div class="line"><span class="comment">         * 开始时不知最终pivot的存放位置，可以先将pivot交换到后面去</span></div><div class="line"><span class="comment">         * 这里直接定义最右边的元素为基准</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        <span class="keyword">var</span> pivot = arr[right];</div><div class="line">        <span class="comment">/**</span></div><div class="line"><span class="comment">         * 存放小于pivot的元素时，是紧挨着上一元素的，否则空隙里存放的可能是大于pivot的元素，</span></div><div class="line"><span class="comment">         * 故声明一个storeIndex变量，并初始化为left来依次紧挨着存放小于pivot的元素。</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        <span class="keyword">var</span> storeIndex = left;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = left; i &lt; right; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (arr[i] &lt; pivot) &#123;</div><div class="line">                <span class="comment">/**</span></div><div class="line"><span class="comment">                 * 遍历数组，找到小于的pivot的元素，（大于pivot的元素会跳过）</span></div><div class="line"><span class="comment">                 * 将循环i次时得到的元素，通过swap交换放到storeIndex处，</span></div><div class="line"><span class="comment">                 * 并对storeIndex递增1，表示下一个可能要交换的位置</span></div><div class="line"><span class="comment">                 */</span></div><div class="line">                swap(arr, storeIndex, i);</div><div class="line">                storeIndex++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 最后： 将pivot交换到storeIndex处，基准元素放置到最终正确位置上</span></div><div class="line">        swap(arr, right, storeIndex);</div><div class="line">        <span class="keyword">return</span> storeIndex;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sort</span>(<span class="params">arr, left, right</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (left &gt; right) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">        <span class="keyword">var</span> storeIndex = partition(arr, left, right);</div><div class="line">        sort(arr, left, storeIndex - <span class="number">1</span>);</div><div class="line">        sort(arr, storeIndex + <span class="number">1</span>, right);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    sort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</div><div class="line">    <span class="keyword">return</span> arr;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(quickSort([<span class="number">8</span>, <span class="number">4</span>, <span class="number">90</span>, <span class="number">8</span>, <span class="number">34</span>, <span class="number">67</span>, <span class="number">1</span>, <span class="number">26</span>, <span class="number">17</span>]));</div></pre></td></tr></table></figure>
<h2 id="分区的优化"><a href="#分区的优化" class="headerlink" title="分区的优化"></a>分区的优化</h2><p>这里细心的同学可能会提出，选取不同的基准时，是否会有不同性能表现，答案是肯定的，但，因为，我是搞前端的，对算法不是很了解，所以，这个坑留给厉害的人来填补。</p>
<h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><p>快速排序是排序速度最快的算法，它的时间复杂度是O(log n)</p>
<p>在平均状况下，排序n个项目要Ο(n log n)次比较。在最坏状况下则需要Ο(n2)次比较.</p>
<p>&emsp;&emsp;<span style="background:#f5f5f5">本文转载自 <em><a href="http://www.cnblogs.com/LIUYANZUO/p/5745306.html" target="_blank" rel="external">js实现快速排序（in-place）简述- 刘彦佐- 博客园</a></em></span><br></p>
]]></content>
      
        <categories>
            
            <category> 基础杂谈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript定时器与执行机制解析]]></title>
      <url>https://dsb123dsb.github.io/2016/12/22/JavaScript%E5%AE%9A%E6%97%B6%E5%99%A8%E4%B8%8E%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6%E8%A7%A3%E6%9E%90/</url>
      <content type="html"><![CDATA[<p>先看一段代码的执行顺序</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'three'</span>);</div><div class="line">&#125;, <span class="number">0</span>);</div><div class="line"></div><div class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'two'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'one'</span>);</div><div class="line"><span class="comment">// one</span></div><div class="line"><span class="comment">// two</span></div><div class="line"><span class="comment">// three</span></div></pre></td></tr></table></figure>
<h1 id="从JS执行机制说起"><a href="#从JS执行机制说起" class="headerlink" title="从JS执行机制说起"></a>从JS执行机制说起</h1><p>浏览器（或者说JS引擎）执行JS的机制是基于事件循环。<br>由于JS是单线程，所以同一时间只能执行一个任务，其他任务就得排队，后续任务必须等到前一个任务结束才能开始执行。<br>为了避免因为某些长时间任务造成的无意义等待，JS引入了异步的概念，用另一个线程来管理异步任务。<br>同步任务直接在主线程队列中顺序执行，而异步任务会进入另一个任务队列，不会阻塞主线程。等到主线程队列空了（执行完了）的时候，就会去异步队列查询是否有可执行的异步任务了（异步任务通常进入异步队列之后还要等一些条件才能执行，如ajax请求、文件读写），如果某个异步任务可以执行了便加入主线程队列，以此循环。<br><a id="more"></a></p>
<h1 id="JS定时器"><a href="#JS定时器" class="headerlink" title="JS定时器"></a>JS定时器</h1><p>JS的定时器目前有三个：setTimeout、setInterval和setImmediate。<br>定时器也是一种异步任务，通常浏览器都有一个独立的定时器模块，定时器的延迟时间就由定时器模块来管理，当某个定时器到了可执行状态，就会被加入主线程队列。<br>JS定时器非常实用，做动画的肯定都用到过，也是最常用的异步模型之一。<br>有时候一些奇奇怪怪的问题，加一个setTimeout(fn, 0)（以下简写setTimeout(0)）就解决了。不过，如果对定时器本身不熟悉，也会产生一些奇奇怪怪的问题。</p>
<h2 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout"></a>setTimeout</h2><p>setTimeout(fn, x)表示延迟x毫秒之后执行fn。<br>使用的时候千万不要太相信预期，延迟的时间严格来说总是大于x毫秒的，至于大多少就要看当时JS的执行情况了。<br>另外，多个定时器如不及时清除（clearTimeout），会存在干扰，使延迟时间更加捉摸不透。所以，不管定时器有没有执行完，及时清除已经不需要的定时器是个好习惯。<br>HTML5规范规定最小延迟时间不能小于4ms，即x如果小于4，会被当做4来处理。 不过不同浏览器的实现不一样，比如，Chrome可以设置1ms，IE11/Edge是4ms。<br>setTimeout注册的函数fn会交给浏览器的定时器模块来管理，延迟时间到了就将fn加入主进程执行队列，如果队列前面还有没有执行完的代码，则又需要花一点时间等待才能执行到fn，所以实际的延迟时间会比设置的长。如在fn之前正好有一个超级大循环，那延迟时间就不是一丁点了。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> <span class="title">testSetTimeout</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">const</span> label = <span class="string">'setTimeout'</span>;</div><div class="line">    <span class="built_in">console</span>.time(label);</div><div class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="built_in">console</span>.timeEnd(label);</div><div class="line">    &#125;, <span class="number">10</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100000000</span>; i++) &#123;&#125;</div><div class="line">&#125;)();</div><div class="line"><span class="comment">//结果是：setTimeout: 335.187ms，远远不止10ms。</span></div></pre></td></tr></table></figure></p>
<h2 id="setInterval"><a href="#setInterval" class="headerlink" title="setInterval"></a>setInterval</h2><p>setInterval的实现机制跟setTimeout类似，只不过setInterval是重复执行的。<br>对于setInterval(fn, 100)容易产生一个误区：并不是上一次fn执行完了之后再过100ms才开始执行下一次fn。 事实上，setInterval并不管上一次fn的执行结果，而是每隔100ms就将fn放入主线程队列，而两次fn之间具体间隔多久就不一定了，跟setTimeout实际延迟时间类似，和JS执行情况有关。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> <span class="title">testSetInterval</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> i = <span class="number">0</span>;</div><div class="line">    <span class="keyword">const</span> start = <span class="built_in">Date</span>.now();</div><div class="line">    <span class="keyword">const</span> timer = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        i += <span class="number">1</span>;</div><div class="line">        i === <span class="number">5</span> &amp;&amp; clearInterval(timer);</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">`第<span class="subst">$&#123;i&#125;</span>次开始`</span>, <span class="built_in">Date</span>.now() - start);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100000000</span>; i++) &#123;&#125;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">`第<span class="subst">$&#123;i&#125;</span>次结束`</span>, <span class="built_in">Date</span>.now() - start);</div><div class="line">    &#125;, <span class="number">100</span>);</div><div class="line">&#125;)();</div><div class="line">输出</div><div class="line"><span class="comment">//第1次开始 100</span></div><div class="line">第<span class="number">1</span>次结束 <span class="number">1089</span></div><div class="line">第<span class="number">2</span>次开始 <span class="number">1091</span></div><div class="line">第<span class="number">2</span>次结束 <span class="number">1396</span></div><div class="line">第<span class="number">3</span>次开始 <span class="number">1396</span></div><div class="line">第<span class="number">3</span>次结束 <span class="number">1701</span></div><div class="line">第<span class="number">4</span>次开始 <span class="number">1701</span></div><div class="line">第<span class="number">4</span>次结束 <span class="number">2004</span></div><div class="line">第<span class="number">5</span>次开始 <span class="number">2004</span></div><div class="line">第<span class="number">5</span>次结束 <span class="number">2307</span><span class="comment">//</span></div></pre></td></tr></table></figure></p>
<p>可见，虽然每次fn执行时间都很长，但下一次并不是等上一次执行完了再过100ms才开始执行的，实际上早就已经等在队列里了。<br>另外可以看出，当setInterval的回调函数执行时间超过了延迟时间，已经完全看不出有时间间隔了。<br>如果setTimeout和setInterval都在延迟100ms之后执行，那么谁先注册谁就先执行回调函数。</p>
<h2 id="setImmediate"><a href="#setImmediate" class="headerlink" title="setImmediate"></a>setImmediate</h2><p>这算一个比较新的定时器，目前IE11/Edge支持、Nodejs支持，Chrome不支持，其他浏览器未测试。<br>从API名字来看很容易联想到setTimeout(0)，不过setImmediate应该算是setTimeout(0)的替代版。<br>在IE11/Edge中，setImmediate延迟可以在1ms以内，而setTimeout有最低4ms的延迟，所以setImmediate比setTimeout(0)更早执行回调函数。不过在Nodejs中，两者谁先执行都有可能，原因是Nodejs的事件循环和浏览器的略有差异。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> <span class="title">testSetImmediate</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">const</span> label = <span class="string">'setImmediate'</span>;</div><div class="line">    <span class="built_in">console</span>.time(label);</div><div class="line"> </div><div class="line">    setImmediate(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="built_in">console</span>.timeEnd(label);</div><div class="line">    &#125;);</div><div class="line">&#125;)();</div><div class="line"><span class="comment">//Edge输出：setImmediate: 0.555 毫秒</span></div></pre></td></tr></table></figure></p>
<p>很明显，setImmediate设计来是为保证让代码在下一次事件循环执行，以前setTimeout(0)这种不可靠的方式可以丢掉了。</p>
<h1 id="其他常用异步模型"><a href="#其他常用异步模型" class="headerlink" title="其他常用异步模型"></a>其他常用异步模型</h1><h2 id="requestAnimationFrame"><a href="#requestAnimationFrame" class="headerlink" title="requestAnimationFrame"></a>requestAnimationFrame</h2><p>requestAnimationFrame并不是定时器，但和setTimeout很相似，在没有requestAnimationFrame的浏览器一般都是用setTimeout模拟。<br>requestAnimationFrame跟屏幕刷新同步，大多数屏幕的刷新频率都是60Hz，对应的requestAnimationFrame大概每隔16.7ms触发一次，如果屏幕刷新频率更高，requestAnimationFrame也会更快触发。基于这点，在支持requestAnimationFrame的浏览器还使用setTimeout做动画显然是不明智的。<br>在不支持requestAnimationFrame的浏览器，如果使用setTimeout/setInterval来做动画，最佳延迟时间也是16.7ms。 如果太小，很可能连续两次或者多次修改dom才一次屏幕刷新，这样就会丢帧，动画就会卡；如果太大，显而易见也会有卡顿的感觉。<br>有趣的是，第一次触发requestAnimationFrame的时机在不同浏览器也存在差异，Edge中，大概16.7ms之后触发，而Chrome则立即触发，跟setImmediate差不多。按理说Edge的实现似乎更符合常理。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> <span class="title">testRequestAnimationFrame</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">const</span> label = <span class="string">'requestAnimationFrame'</span>;</div><div class="line">    <span class="built_in">console</span>.time(label);</div><div class="line"> </div><div class="line">    requestAnimationFrame(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="built_in">console</span>.timeEnd(label);</div><div class="line">    &#125;);</div><div class="line">&#125;)();</div><div class="line"><span class="comment">//Edge输出：requestAnimationFrame: 16.66 毫秒</span></div><div class="line"><span class="comment">//Chrome输出：requestAnimationFrame: 0.698ms</span></div></pre></td></tr></table></figure></p>
<p>但相邻两次requestAnimationFrame的时间间隔大概都是16.7ms，这一点是一致的。当然也不是绝对的，如果页面本身性能就比较低，相隔的时间可能会变大，这就意味着页面达不到60fps。</p>
<h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><p>Promise是很常用的一种异步模型，如果我们想让代码在下一个事件循环执行，可以选择使用setTimeout(0)、setImmediate、requestAnimationFrame(Chrome)和Promise。<br>而且Promise的延迟比setImmediate更低，意味着Promise比setImmediate先执行。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">testSetImmediate</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">const</span> label = <span class="string">'setImmediate'</span>;</div><div class="line">    <span class="built_in">console</span>.time(label);</div><div class="line"> </div><div class="line">    setImmediate(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="built_in">console</span>.timeEnd(label);</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">testPromise</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">const</span> label = <span class="string">'Promise'</span>;</div><div class="line">    <span class="built_in">console</span>.time(label);</div><div class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">        resolve();</div><div class="line">    &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="built_in">console</span>.timeEnd(label);</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"> </div><div class="line">testSetImmediate();</div><div class="line">testPromise();</div><div class="line"><span class="comment">//Edge输出：Promise: 0.33 毫秒 setImmediate: 1.66 毫秒</span></div></pre></td></tr></table></figure></p>
<p>尽管setImmediate的回调函数比Promise先注册，但还是Promise先执行。<br>可以肯定的是，在各JS环境中，Promise都是最先执行的，setTimeout(0)、setImmediate和requestAnimationFrame顺序不确定。</p>
<h2 id="process-nextTick"><a href="#process-nextTick" class="headerlink" title="process.nextTick"></a>process.nextTick</h2><p>process.nextTick是Nodejs的API，比Promise更早执行。<br>事实上，process.nextTick是不会进入异步队列的，而是直接在主线程队列尾强插一个任务，虽然不会阻塞主线程，但是会阻塞异步任务的执行，如果有嵌套的process.nextTick，那异步任务就永远没机会被执行到了。<br>使用的时候要格外小心，除非你的代码明确要在本次事件循环结束之前执行，否则使用setImmediate或者Promise更保险。</p>
<p>原创文章转载请注明：<br>转载自AlloyTeam：<a href="http://www.alloyteam.com/2016/05/javascript-timer/" target="_blank" rel="external">http://www.alloyteam.com/2016/05/javascript-timer/</a></p>
]]></content>
      
        <categories>
            
            <category> 基础杂谈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> 定时器，ES6 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[实习满月]]></title>
      <url>https://dsb123dsb.github.io/2016/12/21/%E5%AE%9E%E4%B9%A0%E6%BB%A1%E6%9C%88/</url>
      <content type="html"><![CDATA[<blockquote>
<p>纸上得来终觉浅，绝知此事要躬行</p>
</blockquote>
<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>竟然实习都快一个月了，算起来一周四天，也就工作十多天，第一个小程序也基本成型，先上一段感觉自己是傻逼的代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> achor=[<span class="number">2</span>,<span class="number">4</span>] ,len2=achor.length,arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>] ,len=arr.length, j=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = j; i &lt; len; i++)&#123;</div><div class="line">                <span class="keyword">if</span>(i==achor[j])&#123; arr[i]=<span class="string">"洞主"</span>;j++&#125;</div><div class="line">                <span class="keyword">else</span>&#123; arr[i]=i+<span class="number">1</span>-j+<span class="string">"L"</span>;&#125;   ;  <span class="built_in">console</span>.log(arr[i])          </div><div class="line">&#125;;<span class="built_in">console</span>.log(arr)<span class="comment">//[ '1L', '2L', '洞主', '3L', '洞主', '4L', '5L', '6L' ]</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="流水账"><a href="#流水账" class="headerlink" title="流水账"></a>流水账</h1><p>收获:对小程序的开发变得十分熟悉，</p>
<ol>
<li>具体也学到了很多技术，平时s只是很抽象的用的一些方法也在具体实践中用到，不得不不吐槽自己，抽象得写很easy，实际中竟然废了老大筋才想到，比如一个数组每隔几位循环一组变量、一个数组除了指定位数按顺序排列。遇到问题要先抽象出来做模型！！！</li>
<li>知道了前端利用mock数据模拟;</li>
<li>学会了把一些常用的函数或者css代码单独写出来模块化;</li>
<li>学会了写接口文档和后台协作，要继续学后台语言;</li>
<li>使用了websocket，Date()函数生成时间戳等等;</li>
<li>具体页面布局时要提前总体上规划，根据具体需求选择合适方案，争取使用最少的代码获得需要的效果;</li>
<li>继续保持良好注释的习惯。</li>
</ol>
<h1 id="白痴的二三克"><a href="#白痴的二三克" class="headerlink" title="白痴的二三克"></a>白痴的二三克</h1><p>也有怅然若失的感觉：自主学习的时间变少了，es6和数据结构和算法还没看完，更别提数据库和计算机组成原理；不管怎样学习和追赶的脚步都不能停下，做让自己喜欢的事情！</p>
<p>继续膜拜旁边学妹胖雪，昨天和她一起下班，吐槽哥哥每天凌晨后才下班会找不到女朋友，人家说可以一起加班阿，感觉也只有程序员能娶这样的额程序员妹子了，哈哈哈！</p>
]]></content>
      
        <categories>
            
            <category> 生活随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 实习 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一周有感]]></title>
      <url>https://dsb123dsb.github.io/2016/11/28/%E4%B8%80%E5%91%A8%E6%9C%89%E6%84%9F/</url>
      <content type="html"><![CDATA[<blockquote>
<p>一周有感！</p>
</blockquote>
<p>&emsp;&emsp;经历了杭城最剧烈的降温，也忍受了感觉最漫长的口腔溃疡，错过了杭研院做RN的实习，鬼使神差的来到创业公司开发小程序，去学习最匮乏基础知识的时间也变得很少，也不能去刷题，感觉冥冥之中自有定数。<br>&emsp;&emsp;旁边坐的是位树莓的本科学妹，每天最早来最晚归让我自愧不如，写代码的妹子让人肃然起敬。<br>&emsp;&emsp;还有中文，金融，设计等等各个专业的妹子，让浸淫理工科多年的已不知风情为何物的，经受春风般的洗涤！<br>&emsp;&emsp;虽然公司的命运和我这个为了学习技术的搬砖工并不无大关系，也不知道自己能呆多久，还是祝愿这么个小而全的公司，安然度过这个资本寒冬，涅槃重生！<br>&emsp;&emsp;最后:这一周技术的那点事！还是那句话纸上得来终觉浅，绝知此事要躬行，看书都能看懂。写起来真是错误才出，还是佩服身边的树莓妹子，还要吐槽下微信的ide,简直低效的代名词。</p>
]]></content>
      
        <categories>
            
            <category> 生活随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 实习 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习笔记-快速取整]]></title>
      <url>https://dsb123dsb.github.io/2016/11/15/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%BF%AB%E9%80%9F%E5%8F%96%E6%95%B4/</url>
      <content type="html"><![CDATA[<h1 id="每1s向-1-2-3-4-5-前面添加一个不重复的随机数，数组长度达到10结束"><a href="#每1s向-1-2-3-4-5-前面添加一个不重复的随机数，数组长度达到10结束" class="headerlink" title="每1s向[1,2,3,4,5]前面添加一个不重复的随机数，数组长度达到10结束"></a>每1s向[1,2,3,4,5]前面添加一个不重复的随机数，数组长度达到10结束</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> aa = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line">   <span class="keyword">var</span> timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">       <span class="keyword">var</span> random = <span class="built_in">Math</span>.random()*<span class="number">100</span>+<span class="number">1</span>|<span class="number">0</span>;<span class="comment">//快速取整</span></div><div class="line">       <span class="keyword">while</span> (aa.indexOf(random)&gt;<span class="number">-1</span>)&#123;</div><div class="line">           random = <span class="built_in">Math</span>.random()*<span class="number">100</span>+<span class="number">1</span>|<span class="number">0</span>;</div><div class="line">       &#125;</div><div class="line">       aa.unshift(random);</div><div class="line">       <span class="keyword">if</span>(aa.length==<span class="number">10</span>)clearInterval(timer);</div><div class="line">       <span class="built_in">console</span>.log(aa);</div><div class="line">   &#125;,<span class="number">1000</span>);</div></pre></td></tr></table></figure>
<h1 id="位运算快速取整"><a href="#位运算快速取整" class="headerlink" title="位运算快速取整"></a>位运算快速取整</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.time(<span class="string">'计时器'</span>)</div><div class="line">		<span class="built_in">parseInt</span>(<span class="number">12222.22222</span>);</div><div class="line"><span class="built_in">console</span>.timeEnd(<span class="string">'计时器'</span>);</div><div class="line"><span class="built_in">console</span>.time(<span class="string">'计时器'</span>)</div><div class="line">		<span class="number">12222.22222</span>|<span class="number">0</span>;</div><div class="line"><span class="built_in">console</span>.timeEnd(<span class="string">'计时器'</span>);</div><div class="line">	<span class="built_in">console</span>.time(<span class="string">'计时器'</span>)</div><div class="line">		~~<span class="number">12222.22222</span>;</div><div class="line"><span class="built_in">console</span>.timeEnd(<span class="string">'计时器'</span>);</div><div class="line"><span class="comment">//计时器: 0.021ms</span></div><div class="line"><span class="comment">//计时器: 0.019ms</span></div><div class="line"><span class="comment">//计时器: 0.00781ms</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>parseInt 更可靠，但是要注意参数的类型和数量;<br>用位运算符（~~、&gt;&gt;0、&lt;&lt;0）来“取整”会有一些问题，一般情况不推荐使用；</p>
<p>位运算毕竟是操作符，效率要高一些，如果这个“取整”操作是影响性能的关键操作，并且你知道被操作数不会超出精度限制的情况，可以考虑用位运算</p>
]]></content>
      
        <categories>
            
            <category> 基础杂谈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 位运算 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[主流动画实现方式总结]]></title>
      <url>https://dsb123dsb.github.io/2016/11/07/%E4%B8%BB%E6%B5%81%E5%8A%A8%E7%94%BB%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h1 id="相关概念：绘制频率、屏幕刷新频率、硬件加速、60fps"><a href="#相关概念：绘制频率、屏幕刷新频率、硬件加速、60fps" class="headerlink" title="相关概念：绘制频率、屏幕刷新频率、硬件加速、60fps"></a>相关概念：绘制频率、屏幕刷新频率、硬件加速、60fps</h1><h2 id="绘制频率："><a href="#绘制频率：" class="headerlink" title="绘制频率："></a>绘制频率：</h2><p>页面上每一帧变化都是系统绘制出来的(GPU或者CPU)【参考浏览器渲染原理】。但这种绘制又和PC游戏的绘制不同，它的最高绘制频率受限于显示器的刷新频率(而非显卡)，所以大多数情况下最高的绘制频率只能是每秒60帧(frame per second，以下用fps简称)，对应于显示器的60Hz。60fps是一个最理想的状态，在日常对页面性能的测试中，60fps也是一个重要的指标，the closer the better。</p>
<h2 id="刷新频率："><a href="#刷新频率：" class="headerlink" title="刷新频率："></a>刷新频率：</h2><p>图像在屏幕上更新的速度，也即屏幕上的图像每秒钟出现的次数，它的单位是赫兹（Hz）。刷新频率越高，屏幕上图像闪烁感就越小，稳定性也就越高，换言之对视力的保护也越好。一般人的眼睛、不容易察觉75Hz以上刷新频率带来的闪烁感，因此最好能将您显示卡刷新频率调到75Hz以上。要注意的是，并不是所有的显示卡都能够在最大分辨率下达到70Hz以上的刷新频率（这个性能取决于显示卡上RAMDAC的速度），而且显示器也可能因为带宽不够而不能达到要求。影响刷新率最主要的还是显示器的带宽。</p>
<p>显示器带宽是显示器视频放大器通频带宽度的简称，指电子枪每秒钟在屏幕上扫过的最大总像素数，以MHz(兆赫兹)为单位。 带宽的值越大，显示器性能越好。</p>
<h2 id="硬件加速-："><a href="#硬件加速-：" class="headerlink" title="硬件加速 ##："></a>硬件加速 ##：</h2><p>硬件有三个处理器，CPU、GPU和APU（不是加速处理器是声音处理器）。他们通过PCI/AGP/PCIE总线交换数据。今天，GPU已经不再局限于3D图形处理了，GPU通用计算技术发展已经引起业界不少的关注，事实也证明在浮点运算、并行计算等部分计算方面，GPU可以提供数十倍乃至于上百倍于CPU的性能。<br><a id="more"></a></p>
<h2 id="60Hz和60fps是什么关系"><a href="#60Hz和60fps是什么关系" class="headerlink" title="60Hz和60fps是什么关系"></a>60Hz和60fps是什么关系</h2><p>没有任何关系。fps代表GPU渲染画面的频率，Hz代表显示器刷新屏幕的频率。一幅静态图片，你可以说这副图片的fps是0帧/秒，但绝对不能说此时屏幕的刷新率是0Hz，也就是说刷新率不随图像内容的变化而变化。游戏也好浏览器也好，我们谈到掉帧，是指GPU渲染画面频率降低。比如跌落到30fps甚至20fps，但因为视觉暂留原理，我们看到的画面仍然是运动和连贯的。</p>
<p>PS: 以下示例在Chrome环境中运行</p>
<h1 id="CSS动画"><a href="#CSS动画" class="headerlink" title="CSS动画"></a>CSS动画</h1><h2 id="Transitions动画"><a href="#Transitions动画" class="headerlink" title="Transitions动画"></a>Transitions动画</h2><p>实例：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&lt;style type="text/css"&gt;</div><div class="line"><span class="selector-class">.animate</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#f00</span>;</div><div class="line">    <span class="attribute">line-height</span>: <span class="number">200px</span>;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</div><div class="line">    <span class="attribute">text-align</span>: center;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.animate-transition</span> &#123;</div><div class="line">    <span class="attribute">transition         </span>: transform <span class="number">2s</span> linear;</div><div class="line">    <span class="attribute">-moz-transition    </span>: -moz-transform <span class="number">2s</span> linear;</div><div class="line">    <span class="attribute">-webkit-transition </span>: -webkit-transform <span class="number">2s</span> linear;</div><div class="line">    <span class="attribute">-o-transition      </span>: -o-transform <span class="number">2s</span> linear;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="selector-class">.animate-transition</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">    <span class="attribute">cursor</span>: pointer;</div><div class="line">    <span class="attribute">transform         </span>: <span class="built_in">rotate</span>(360deg);</div><div class="line">    <span class="attribute">-moz-transform    </span>: <span class="built_in">rotate</span>(360deg);</div><div class="line">    <span class="attribute">-webkit-transform </span>: <span class="built_in">rotate</span>(360deg);</div><div class="line">    <span class="attribute">-o-transform      </span>: <span class="built_in">rotate</span>(360deg);</div><div class="line">&#125;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;div class="animate animate-transition"&gt;Transition Animation&lt;/div&gt;</div></pre></td></tr></table></figure>
<p><a href="http://www.zuojj.com/demo/2015/01/animations-transition.html" target="_blank" rel="external">查看实例演示</a></p>
<h2 id="Keyframes-animation"><a href="#Keyframes-animation" class="headerlink" title="Keyframes animation"></a>Keyframes animation</h2><p>Keyframes animation通过定义多个关键帧以及定义每个关键帧中的元素的属性值来实现更为复杂的动画效果。<br>实例：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;style type="text/css"&gt;</div><div class="line"><span class="selector-class">.animate-keyframes</span> &#123;</div><div class="line">    <span class="attribute">-webkit-animation</span>: frames <span class="number">2s</span> linear infinite;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="selector-class">.animate-keyframes</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">    <span class="attribute">cursor</span>: pointer;</div><div class="line">    <span class="attribute">-webkit-animation</span>: none;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> frames &#123;</div><div class="line">    0% &#123;</div><div class="line">        <span class="attribute">background-color</span>: <span class="number">#f00</span>;</div><div class="line">        <span class="attribute">-webkit-transform</span>: <span class="built_in">rotate</span>(0deg);</div><div class="line">    &#125;</div><div class="line">    100% &#123;</div><div class="line">        <span class="attribute">background-color</span>: <span class="number">#f00</span>;</div><div class="line">        <span class="attribute">-webkit-transform</span>: <span class="built_in">rotate</span>(360deg);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;div class="animate animate-keyframes"&gt;keyframes animation&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p><a href="http://www.zuojj.com/demo/2015/01/animations-keyframes.html" target="_blank" rel="external">查看实例演示</a></p>
<h2 id="CSS动画优缺点"><a href="#CSS动画优缺点" class="headerlink" title="CSS动画优缺点"></a>CSS动画优缺点</h2><p>优点：</p>
<ul>
<li>简单、高效</li>
<li>声明式的</li>
<li>不依赖与主线程，采用硬件加速（GPU）</li>
<li>简单的控制keyframe animation 播放和暂停</li>
</ul>
<p>缺点：</p>
<ul>
<li>不能动态的修改或定义动画内容</li>
<li>不同的动画无法实现同步</li>
<li>多个动画彼此无法堆叠</li>
</ul>
<p>另：</p>
<ol>
<li>CSS3 transition强制硬件加速会加大GPU消耗，高负荷情形下将导致运行不流畅。这种情况在移动设备上尤为明显。（特殊情况下，比如当数据在浏览器主线程和排版线程之间传递产生的瓶颈也会导致不流畅）。某些CSS属性，比如transform和opacity，则不受这些瓶颈影响。Adobe在这里精心总结了这些问题。详细请戳</li>
</ol>
<p>transition的兼容性问题是个诟病，IE10+及现代浏览器，使用起来会造成很多不便。</p>
<p>由于transition并不是由JavaScript原生控制（而仅仅是由JavaScript触发），浏览器无法获知如何与控制这些transition的JavaScript代码同步地优化他们。</p>
<ol>
<li>keyframes animation 的动画曲线会应用到所有变化的属性上，而且手写比较复杂的动画，写起来就是噩梦。</li>
</ol>
<h1 id="SVG动画"><a href="#SVG动画" class="headerlink" title="SVG动画"></a>SVG动画</h1><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"animate-svg"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">svg</span> <span class="attr">id</span>=<span class="string">"svgAnimation"</span> <span class="attr">ns</span>=<span class="string">"http://www.w3.org/2000/svg"</span> <span class="attr">version</span>=<span class="string">"1.1"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"200"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">g</span> <span class="attr">transform</span>=<span class="string">"translate(100,100)"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">g</span>&gt;</span></div><div class="line"> </div><div class="line">                <span class="tag">&lt;<span class="name">rect</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"200"</span> <span class="attr">rx</span>=<span class="string">"100"</span> <span class="attr">ry</span>=<span class="string">"100"</span> <span class="attr">fill</span>=<span class="string">"red"</span> <span class="attr">transform</span>=<span class="string">"translate(-100,-100)"</span>&gt;</span><span class="tag">&lt;/<span class="name">rect</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">"-60"</span> <span class="attr">y</span>=<span class="string">"-0"</span> <span class="attr">font-size</span>=<span class="string">"20"</span> <span class="attr">fill</span>=<span class="string">"white"</span> &gt;</span>SVG Animation<span class="tag">&lt;/<span class="name">text</span>&gt;</span></div><div class="line">                <span class="comment">&lt;!-- Add ease-in-out and infinite iterations to this animation and the code --&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">animateTransform</span> <span class="attr">attributeName</span>=<span class="string">"transform"</span> <span class="attr">attributeType</span>=<span class="string">"xml"</span> <span class="attr">type</span>=<span class="string">"rotate"</span> <span class="attr">from</span>=<span class="string">"0"</span> <span class="attr">to</span>=<span class="string">"360"</span> <span class="attr">dur</span>=<span class="string">"3s"</span> <span class="attr">repeatCount</span>=<span class="string">"indefinite"</span>&gt;</span>SVG Animation<span class="tag">&lt;/<span class="name">animateTransform</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">g</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">g</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><a href="http://www.zuojj.com/demo/2015/01/animations-svg.html" target="_blank" rel="external">查看实例演示</a></p>
<h2 id="SVG动画优缺点"><a href="#SVG动画优缺点" class="headerlink" title="SVG动画优缺点"></a>SVG动画优缺点</h2><p>优点：</p>
<ol>
<li>矢量图形，不受像素影响——SVG的这个特性使得它在不同的平台或者媒体下表现良好，无论屏幕分辨率如何</li>
<li>SVG对动画的支持较好，其DOM结构可以被其特定语法或者Javascript控制，从而轻松的实现动画</li>
<li>Javascript可以完全控制SVG Dom 元素</li>
<li>SVG的结构是XML，其可访问性（盲文、声音朗读等）、可操作性、可编程性、可被CSS样式化完胜Canvas。另外，其支持 ARIA 属性，使其如虎添翼。</li>
</ol>
<p>缺点：</p>
<ol>
<li>DOM比正常的图形慢，而且如果其结点多而杂，就更慢。</li>
<li>SVG 画点报表什么的，还行；在网页游戏前，就束手无策了；当然可以结合 Canvas + SVG实现。</li>
<li>不能动态的修改动画内容</li>
<li>不能与HTML内容集成</li>
<li>整个SVG作为一个动画</li>
<li>浏览器兼容性问题，IE8-以及Android 2.3默认浏览器是不支持SVG</li>
</ol>
<h1 id="Javascript动画"><a href="#Javascript动画" class="headerlink" title="Javascript动画"></a>Javascript动画</h1><h2 id="jQuery动画"><a href="#jQuery动画" class="headerlink" title="jQuery动画"></a>jQuery动画</h2><p>jQuery动画使用setInterval实现:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 用例</span></div><div class="line">$(<span class="string">"#div"</span>).animate(&#123;&#125;);</div><div class="line"> </div><div class="line"><span class="comment">// 源码</span></div><div class="line">jQuery.fx.timer = <span class="function"><span class="keyword">function</span>(<span class="params"> timer </span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> ( timer() &amp;&amp; jQuery.timers.push( timer ) &amp;&amp; !timerId ) &#123;</div><div class="line">        timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line">jQuery.fx.interval = <span class="number">13</span>;</div></pre></td></tr></table></figure></p>
<p><a href="https://www.zhihu.com/question/19824093" target="_blank" rel="external">jQuery的动画帧宽为什么是13ms呢</a><br><a href="http://stackoverflow.com/questions/2940054/how-to-determine-the-best-framerate-setinterval-delay-to-use-in-a-javascript" target="_blank" rel="external">How to determine the best “framerate” (setInterval delay) to use in a JavaScript animation loop?</a><br><a href="https://bugs.jquery.com/ticket/9381" target="_blank" rel="external">为什么jQuery用setInterval而不用RAF？</a></p>
<p>优点：<br>易用，低效，兼容好；</p>
<p>缺点：</p>
<ol>
<li>setInterval多个间隔可能会被跳过</li>
<li>setInterval多个间隔可能比预期小</li>
<li>不同浏览器的精度量级不同：</li>
<li>jQuery 无法解决频繁触发 Layout 导致的抽动。</li>
</ol>
<h2 id="requestAnimationFrame"><a href="#requestAnimationFrame" class="headerlink" title="requestAnimationFrame"></a>requestAnimationFrame</h2><p>实例：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">&lt;style type=<span class="string">"text/css"</span>&gt;</div><div class="line">.animate-RAF &#123;</div><div class="line">     </div><div class="line">&#125;</div><div class="line"> </div><div class="line">.animate-input  &#123;</div><div class="line">    margin-top: <span class="number">10</span>px;</div><div class="line">    text-align: center;</div><div class="line">&#125;</div><div class="line">&lt;<span class="regexp">/style&gt;</span></div><div class="line"><span class="regexp"> </span></div><div class="line"><span class="regexp">&lt;div id="animate-RAF" class="animate animate-RAF"&gt;RAF Animation&lt;/</span>div&gt;</div><div class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"animate-input"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn_start"</span> <span class="attr">value</span>=<span class="string">"Start"</span> <span class="attr">style</span>=<span class="string">"width:100px;height:30px"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line"> </div><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    <span class="keyword">var</span> animate_raf   = <span class="built_in">document</span>.getElementById(<span class="string">"animate-RAF"</span>),</div><div class="line">        btn_start = <span class="built_in">document</span>.getElementById(<span class="string">"btn_start"</span>),</div><div class="line">        frameid   = <span class="literal">null</span>;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">frame</span>(<span class="params">time</span>) </span>&#123;</div><div class="line">        animate_raf.style[<span class="string">'-webkit-transform'</span>] = <span class="string">'rotate('</span>+ <span class="built_in">Math</span>.cos(time/<span class="number">1000</span>)*<span class="number">360</span> +<span class="string">'deg)'</span>;</div><div class="line">        frameid = requestAnimationFrame(frame);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">// bind Event</span></div><div class="line">    btn_start.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> val = <span class="keyword">this</span>.value;</div><div class="line"> </div><div class="line">        <span class="keyword">if</span>(val === <span class="string">"Start"</span>) &#123;</div><div class="line">            frameid = requestAnimationFrame(frame);</div><div class="line">            <span class="keyword">this</span>.value = <span class="string">"Pause"</span>;</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">this</span>.value = <span class="string">"Start"</span>;</div><div class="line">            cancelAnimationFrame(frameid);</div><div class="line">        &#125;</div><div class="line">    &#125;, <span class="literal">false</span>);</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<p><a href="http://www.zuojj.com/demo/2015/01/animations-RAF.html" target="_blank" rel="external">查看实例演示</a><br>优点：</p>
<ol>
<li>在每次浏览器更新页面时，能获取通知并执行应用。 简单理解为，RAF能在每个16.7ms间执行一次咱们的函数，不多不少。</li>
<li>最小化的消耗资源，RAF在页面被切换或浏览器最小化时，会暂停执行，等页面再次关注时，继续执行动画。</li>
<li>相比 CSS 动画有更好的掌控，能合理降低CPU的使用。</li>
</ol>
<p>缺点：</p>
<ol>
<li>无法控制执行时间，执行时间由系统根据屏幕刷新时间决定</li>
<li>浏览器兼容性问题，IE10+及现代浏览器，低版本浏览器建议降级处理，使用setInterval或setTimeout</li>
</ol>
<h2 id="Canvas"><a href="#Canvas" class="headerlink" title="Canvas"></a>Canvas</h2><p>优点：</p>
<ol>
<li>画2D图形时，页面渲染性能比较高</li>
<li>页面渲染性能受图形复杂度影响小</li>
<li>渲染性能只受图形的分辨率的影响</li>
<li>画出来的图形可以直接保存为 .png 或者 .jpg的图形</li>
<li>最适合于画光栅图像（如游戏和不规则几何图形等），编辑图片还有其他基于像素的图形操作。</li>
</ol>
<p>缺点：</p>
<ol>
<li>整个就是一张图，无论你往上画什么东西——没有DOM 结点可供操作</li>
<li>没有实现动画的API，你必须依靠定时器和其他事件来更新Canvas</li>
<li>对文本的渲染支持是比较差</li>
<li>对要求有高可访问性（盲文、声音朗读等）页面，比较困难</li>
<li>对交互要求高的（比如TIBCO的很多产品）的界面，不建议使用Canvas</li>
</ol>
<h2 id="WebGL"><a href="#WebGL" class="headerlink" title="WebGL"></a>WebGL</h2><p>WebGL是一种3D绘图标准，这种绘图技术标准允许把JavaScript和OpenGL ES 2.0结合在一起，通过增加OpenGL ES 2.0的一个JavaScript绑定，WebGL可以为HTML5 Canvas提供硬件3D加速渲染，这样Web开发人员就可以借助系统显卡来在浏览器里更流畅地展示3D场景和模型了，还能创建复杂的导航和数据视觉化。显然，WebGL技术标准免去了开发网页专用渲染插件的麻烦，可被用于创建具有复杂3D结构的网站页面，甚至可以用来设计3D网页游戏等等。</p>
<p>浏览器支持：<br>Internet Explorer 11+<br>Google Chrome 9+<br>Firefox 4+<br>Opera 12+<br>Safari 5.1+</p>
<h2 id="Problems"><a href="#Problems" class="headerlink" title="Problems"></a>Problems</h2><p>1) 不同的api有不同的模型动画<br>2) 不必要的维护来支持多种方式实现同样的事情<br>3) Web开发人员需要学习多种实现技术<br>4) Javascript不容易设置声明式动画</p>
<h1 id="Flash动画-过时"><a href="#Flash动画-过时" class="headerlink" title="Flash动画(过时)"></a>Flash动画(过时)</h1><h1 id="Web-Animations-1-0-——A-new-general-purpose-animation-model"><a href="#Web-Animations-1-0-——A-new-general-purpose-animation-model" class="headerlink" title="Web Animations 1.0 ——A new general purpose animation model"></a>Web Animations 1.0 ——A new general purpose animation model</h1><ol>
<li><a href="https://www.w3.org/TR/web-animations/" target="_blank" rel="external">W3Web Animations 1.0</a></li>
<li><a href="https://github.com/web-animations/web-animations-js" target="_blank" rel="external">JavaScript implementation of the Web Animations API</a></li>
</ol>
<p>Web Animations API为CSS和SVG动画提供了单一接口。旨在通过提供更好的性能、更好的控制时间线和播放、灵活、统一的Javascript编程接口，使做一些事情更容易。</p>
<p>当前状态：<br>Specification at First Public Working Draft: www.w3.org/TR/web-animations<br>Chrome:<br>CSS Transitions &amp; Animations rewritten on top of the Web Animations model<br>JavaScript API in development behind a flag<br>Firefox &amp; Safari: Started implementation<br>IE: No public signals</p>
<p>实例一：A simple example<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> web_animation_1 = <span class="built_in">document</span>.getElementById(<span class="string">"web_animation_1"</span>);</div><div class="line"> </div><div class="line">web_animation_1.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    web_animation_1.animate([&#123;</div><div class="line">        transform: <span class="string">'rotate(0deg)'</span></div><div class="line">    &#125;, &#123;</div><div class="line">        transform: <span class="string">'rotate(360deg)'</span></div><div class="line">    &#125;],&#123;</div><div class="line">        duration: <span class="number">2</span></div><div class="line">    &#125;);</div><div class="line">&#125;, <span class="literal">false</span>);</div></pre></td></tr></table></figure></p>
<p><a href="http://www.zuojj.com/demo/2015/01/web-animations-1.html" target="_blank" rel="external">查看实例演示</a><br>实例二：More complex timing<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> web_animation_2 = <span class="built_in">document</span>.getElementById(<span class="string">"web_animation_2"</span>);</div><div class="line"> </div><div class="line">web_animation_2.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    web_animation_2.animate([&#123;</div><div class="line">        transform: <span class="string">'rotate(0deg)'</span></div><div class="line">    &#125;, &#123;</div><div class="line">        transform: <span class="string">'rotate(360deg)'</span></div><div class="line">    &#125;],&#123;</div><div class="line">        direction: <span class="string">'alternate'</span>,</div><div class="line">        duration: <span class="number">1</span>,</div><div class="line">        iterations: <span class="literal">Infinity</span>,</div><div class="line">        easing: <span class="string">'ease-in-out'</span>,</div><div class="line">        playbackRate: <span class="number">2</span></div><div class="line">    &#125;);</div><div class="line">&#125;, <span class="literal">false</span>);</div></pre></td></tr></table></figure></p>
<p><a href="http://www.zuojj.com/demo/2015/01/web-animations-2.html" target="_blank" rel="external">查看实例演示</a><br>实例三：Without the syntactic sugar<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> web_animation_3 = <span class="built_in">document</span>.getElementById(<span class="string">"web_animation_3"</span>);</div><div class="line"> </div><div class="line">web_animation_3.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> obj = <span class="keyword">new</span> Animation(web_animation_3,[&#123;</div><div class="line">        transform: <span class="string">'rotate(0deg)'</span></div><div class="line">    &#125;, &#123;</div><div class="line">        transform: <span class="string">'rotate(360deg)'</span></div><div class="line">    &#125;],&#123;</div><div class="line">        duration: <span class="number">2</span></div><div class="line">    &#125;);</div><div class="line">    <span class="built_in">document</span>.timeline.play(obj);</div><div class="line">&#125;, <span class="literal">false</span>);</div></pre></td></tr></table></figure></p>
<p><a href="http://www.zuojj.com/demo/2015/01/web-animations-3.html" target="_blank" rel="external">查看实例演示</a><br>实例四：Parallel animation grouping<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> web_animation_4 = <span class="built_in">document</span>.getElementById(<span class="string">"web_animation_4"</span>),</div><div class="line">    parItem1 = <span class="built_in">document</span>.getElementById(<span class="string">"parItem1"</span>),</div><div class="line">    parItem2 = <span class="built_in">document</span>.getElementById(<span class="string">"parItem2"</span>),</div><div class="line">    parItem3 = <span class="built_in">document</span>.getElementById(<span class="string">"parItem3"</span>);</div><div class="line"></div><div class="line">web_animation_4.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> obj = <span class="keyword">new</span> ParGroup([</div><div class="line">        <span class="keyword">new</span> Animation(parItem1, [&#123;<span class="attr">width</span>: <span class="string">'0px'</span>&#125;, &#123;<span class="attr">width</span>: <span class="string">'500px'</span>&#125;], <span class="number">1</span>),</div><div class="line">        <span class="keyword">new</span> Animation(parItem2, [&#123;<span class="attr">width</span>: <span class="string">'0px'</span>&#125;, &#123;<span class="attr">width</span>: <span class="string">'700px'</span>&#125;], <span class="number">1</span>),</div><div class="line">        <span class="keyword">new</span> Animation(parItem3, [&#123;<span class="attr">width</span>: <span class="string">'0px'</span>&#125;, &#123;<span class="attr">width</span>: <span class="string">'200px'</span>&#125;], <span class="number">1</span>),</div><div class="line">    ])</div><div class="line">    <span class="built_in">document</span>.timeline.play(obj);</div><div class="line">&#125;, <span class="literal">false</span>);</div></pre></td></tr></table></figure></p>
<p><a href="http://www.zuojj.com/demo/2015/01/web-animations-4.html" target="_blank" rel="external">查看实例演示</a><br>实例五：Sequential animation grouping<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> web_animation_5 = <span class="built_in">document</span>.getElementById(<span class="string">"web_animation_5"</span>),</div><div class="line">    seqItem1 = <span class="built_in">document</span>.getElementById(<span class="string">"seqItem1"</span>),</div><div class="line">    seqItem2 = <span class="built_in">document</span>.getElementById(<span class="string">"seqItem2"</span>),</div><div class="line">    seqItem3 = <span class="built_in">document</span>.getElementById(<span class="string">"seqItem3"</span>);</div><div class="line"> </div><div class="line">web_animation_5.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> obj = <span class="keyword">new</span> SeqGroup([</div><div class="line">        <span class="keyword">new</span> Animation(seqItem1, [&#123;<span class="attr">width</span>: <span class="string">'0px'</span>&#125;, &#123;<span class="attr">width</span>: <span class="string">'200px'</span>&#125;], <span class="number">1</span>),</div><div class="line">        <span class="keyword">new</span> Animation(seqItem2, [&#123;<span class="attr">width</span>: <span class="string">'0px'</span>&#125;, &#123;<span class="attr">width</span>: <span class="string">'300px'</span>&#125;], <span class="number">1</span>),</div><div class="line">        <span class="keyword">new</span> Animation(seqItem3, [&#123;<span class="attr">width</span>: <span class="string">'0px'</span>&#125;, &#123;<span class="attr">width</span>: <span class="string">'200px'</span>&#125;], <span class="number">1</span>),</div><div class="line">    ])</div><div class="line">    <span class="built_in">document</span>.timeline.play(obj);</div><div class="line">&#125;, <span class="literal">false</span>);</div></pre></td></tr></table></figure></p>
<p><a href="http://www.zuojj.com/demo/2015/01/web-animations-5.html" target="_blank" rel="external">查看实例演示</a><br>实例六：Nested grouped animations<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> web_animation_6 = <span class="built_in">document</span>.getElementById(<span class="string">"web_animation_6"</span>),</div><div class="line">    outerSeqItem1 = <span class="built_in">document</span>.getElementById(<span class="string">"outerSeqItem1"</span>),</div><div class="line">    outerSeqItem2 = <span class="built_in">document</span>.getElementById(<span class="string">"outerSeqItem2"</span>),</div><div class="line">    innerParItem1 = <span class="built_in">document</span>.getElementById(<span class="string">"innerParItem1"</span>),</div><div class="line">    innerParItem2 = <span class="built_in">document</span>.getElementById(<span class="string">"innerParItem2"</span>),</div><div class="line">    innerParItem3 = <span class="built_in">document</span>.getElementById(<span class="string">"innerParItem3"</span>);</div><div class="line"> </div><div class="line">web_animation_6.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> parobj = <span class="keyword">new</span> ParGroup([</div><div class="line">        <span class="keyword">new</span> Animation(innerParItem1, [&#123;<span class="attr">width</span>: <span class="string">'0px'</span>&#125;, &#123;<span class="attr">width</span>: <span class="string">'300px'</span>&#125;], <span class="number">1</span>),</div><div class="line">        <span class="keyword">new</span> Animation(innerParItem2, [&#123;<span class="attr">width</span>: <span class="string">'0px'</span>&#125;, &#123;<span class="attr">width</span>: <span class="string">'300px'</span>&#125;], <span class="number">1</span>),</div><div class="line">        <span class="keyword">new</span> Animation(innerParItem3, [&#123;<span class="attr">width</span>: <span class="string">'0px'</span>&#125;, &#123;<span class="attr">width</span>: <span class="string">'300px'</span>&#125;], <span class="number">1</span>),</div><div class="line">    ]);</div><div class="line">    <span class="keyword">var</span> seqobj = <span class="keyword">new</span> SeqGroup([</div><div class="line">            <span class="keyword">new</span> Animation(outerSeqItem1, [&#123;<span class="attr">width</span>: <span class="string">'0px'</span>&#125;, &#123;<span class="attr">width</span>: <span class="string">'200px'</span>&#125;], <span class="number">1</span>),</div><div class="line">            parobj,</div><div class="line">            <span class="keyword">new</span> Animation(outerSeqItem2, [&#123;<span class="attr">width</span>: <span class="string">'0px'</span>&#125;, &#123;<span class="attr">width</span>: <span class="string">'200px'</span>&#125;], <span class="number">1</span>),</div><div class="line">        ]);</div><div class="line">    <span class="built_in">document</span>.timeline.play(seqobj);</div><div class="line">&#125;, <span class="literal">false</span>);</div></pre></td></tr></table></figure></p>
<p><a href="http://www.zuojj.com/demo/2015/01/web-animations-6.html" target="_blank" rel="external">查看实例演示</a><br>实例七：Path animations<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> web_animation_7 = <span class="built_in">document</span>.getElementById(<span class="string">"web_animation_7"</span>);</div><div class="line"> </div><div class="line">web_animation_7.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> obj = <span class="keyword">new</span> Animation(web_animation_7,</div><div class="line">        <span class="keyword">new</span> PathAnimationEffect(</div><div class="line">            <span class="string">'M 100 200 '</span> +</div><div class="line">            <span class="string">'C 200 100 300   0 400 100 '</span> +</div><div class="line">            <span class="string">'C 500 200 600 300 700 200 '</span> +</div><div class="line">            <span class="string">'C 800 100 900 100 900 100'</span>, <span class="string">'auto-rotate'</span>), &#123;</div><div class="line">            duration: <span class="number">2</span>,</div><div class="line">            direction: <span class="string">'alternate'</span>,</div><div class="line">            easing: <span class="string">'ease-in-out'</span>,</div><div class="line">            iterations: <span class="literal">Infinity</span>,</div><div class="line">        &#125;);</div><div class="line"> </div><div class="line">    <span class="built_in">document</span>.timeline.play(obj);</div><div class="line">&#125;, <span class="literal">false</span>);</div></pre></td></tr></table></figure></p>
<p><a href="http://www.zuojj.com/demo/2015/01/web-animations-7.html" target="_blank" rel="external">查看实例演示</a><br>实例八：Custom animation effects<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">customAnimationEffect</span>(<span class="params">timeFraction, iteration, target</span>) </span>&#123;</div><div class="line">    web_animation_8.innerHTML = <span class="string">'timeFraction: '</span> + timeFraction.toFixed(<span class="number">2</span>) + <span class="string">'\n'</span> +</div><div class="line">                             <span class="string">'iteration: '</span> + iteration;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> web_animation_8 = <span class="built_in">document</span>.getElementById(<span class="string">"web_animation_8"</span>);</div><div class="line"> </div><div class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Animation(<span class="literal">null</span>,</div><div class="line">    &#123;<span class="attr">sample</span>: customAnimationEffect&#125;,</div><div class="line">    &#123;</div><div class="line">        duration: <span class="number">2</span>,</div><div class="line">        direction: <span class="string">'alternate'</span>,</div><div class="line">        easing: <span class="string">'ease-in-out'</span>,</div><div class="line">        iterations: <span class="literal">Infinity</span>,</div><div class="line">    &#125;);</div><div class="line"> </div><div class="line"><span class="keyword">var</span> customPlayer = <span class="built_in">document</span>.timeline.play(obj);</div><div class="line"> </div><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'slideenter'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (event.slide == customSlide) &#123;</div><div class="line">        customPlayer.currentTime = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;, <span class="literal">false</span>);</div></pre></td></tr></table></figure></p>
<p><a href="http://www.zuojj.com/demo/2015/01/web-animations-8.html" target="_blank" rel="external">查看实例演示</a><br>实例九：综合实例<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">document</span>) </span>&#123;</div><div class="line"> </div><div class="line"><span class="meta">    'use strict'</span>;</div><div class="line">    <span class="keyword">var</span> Animations = &#123;&#125;,</div><div class="line">        player, controls = <span class="built_in">document</span>.getElementById(<span class="string">'animate-controls'</span>);</div><div class="line"> </div><div class="line">    Animations.targets = &#123;</div><div class="line">        path: <span class="built_in">document</span>.getElementById(<span class="string">'path'</span>),</div><div class="line">        ballContainer: <span class="built_in">document</span>.getElementById(<span class="string">'animate-ball-container'</span>),</div><div class="line">        ball: <span class="built_in">document</span>.getElementById(<span class="string">'animate-ball'</span>)</div><div class="line">    &#125;;</div><div class="line"> </div><div class="line">    Animations.keyframeMove = <span class="keyword">new</span> Animation(Animations.targets.ballContainer, [&#123;</div><div class="line">        offset: <span class="number">0</span>,</div><div class="line">        transform: <span class="string">'translate(0,0)'</span></div><div class="line">    &#125;, &#123;</div><div class="line">        offset: <span class="number">1</span>,</div><div class="line">        transform: <span class="string">'translate(600,0)'</span></div><div class="line">    &#125;], &#123;</div><div class="line">        duration: <span class="number">2000</span></div><div class="line">    &#125;);</div><div class="line"> </div><div class="line">    Animations.keyframeSpinRoll = <span class="keyword">new</span> Animation(Animations.targets.ball, [&#123;</div><div class="line">        transform: <span class="string">'rotate(950deg)'</span></div><div class="line">    &#125;], &#123;</div><div class="line">        duration: <span class="number">2000</span></div><div class="line">    &#125;);</div><div class="line"> </div><div class="line">    Animations.motionpathBounce = <span class="keyword">new</span> Animation(Animations.targets.ballContainer, <span class="keyword">new</span> MotionPathEffect(<span class="string">"M25,25 "</span> + <span class="string">"a150,100 0 0,1 300,0 "</span> + <span class="string">"a75,50 0 0,1 150,0 "</span> + <span class="string">"a35,20 0 0,1 70,0 "</span> + <span class="string">"a2,1 0 0,1 35,0 "</span> + <span class="string">"h45"</span>), &#123;</div><div class="line">        duration: <span class="number">2500</span></div><div class="line">    &#125;);</div><div class="line"> </div><div class="line">    Animations.keyframeSpinBounce = <span class="keyword">new</span> Animation(Animations.targets.ball, [&#123;</div><div class="line">        transform: <span class="string">'rotate(950deg)'</span></div><div class="line">    &#125;], &#123;</div><div class="line">        duration: <span class="number">2500</span></div><div class="line">    &#125;);</div><div class="line"> </div><div class="line">    Animations.animationGroupRoll = <span class="keyword">new</span> AnimationGroup([Animations.keyframeMove, Animations.keyframeSpinRoll], &#123;</div><div class="line">        easing: <span class="string">'ease-out'</span></div><div class="line">    &#125;);</div><div class="line"> </div><div class="line">    Animations.animationGroupBounce = <span class="keyword">new</span> AnimationGroup([Animations.motionpathBounce, Animations.keyframeSpinBounce], &#123;</div><div class="line">        easing: <span class="string">'ease-out'</span></div><div class="line">    &#125;);</div><div class="line"> </div><div class="line">    controls.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (event.target) &#123;</div><div class="line">            <span class="keyword">var</span> targetElement = event.target;</div><div class="line">            <span class="keyword">switch</span> (targetElement.id) &#123;</div><div class="line">                <span class="keyword">case</span> <span class="string">'keyframe-start'</span>:</div><div class="line">                    player = <span class="built_in">document</span>.timeline.play(Animations.animationGroupRoll);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">'motionpath-start'</span>:</div><div class="line">                    player = <span class="built_in">document</span>.timeline.play(Animations.animationGroupBounce);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">'pause'</span>:</div><div class="line">                    player.pause();</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">'cancel'</span>:</div><div class="line">                    player.cancel();</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">'play'</span>:</div><div class="line">                    player.play();</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">'reverse'</span>:</div><div class="line">                    player.reverse()</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;)(<span class="built_in">document</span>);</div></pre></td></tr></table></figure></p>
<p><a href="http://www.zuojj.com/demo/2015/01/web-animations-9.html" target="_blank" rel="external">查看实例演示</a></p>
<h1 id="现行兼容性方案"><a href="#现行兼容性方案" class="headerlink" title="现行兼容性方案"></a>现行兼容性方案</h1><h2 id="页面增强动画建议使用CSS动画"><a href="#页面增强动画建议使用CSS动画" class="headerlink" title="页面增强动画建议使用CSS动画"></a>页面增强动画建议使用CSS动画</h2><h2 id="复杂动画交互建议使用RAF及setInterval-或setTimeout优雅降级处理"><a href="#复杂动画交互建议使用RAF及setInterval-或setTimeout优雅降级处理" class="headerlink" title="复杂动画交互建议使用RAF及setInterval 或setTimeout优雅降级处理"></a>复杂动画交互建议使用RAF及setInterval 或setTimeout优雅降级处理</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> lastTime = <span class="number">0</span>,</div><div class="line">        vendors = [<span class="string">'webkit'</span>, <span class="string">'moz'</span>];</div><div class="line"> </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> x = <span class="number">0</span>; x &lt; vendors.length &amp;&amp; !<span class="built_in">window</span>.requestAnimationFrame; ++x) &#123;</div><div class="line">        <span class="built_in">window</span>.requestAnimationFrame = <span class="built_in">window</span>[vendors[x]+<span class="string">'RequestAnimationFrame'</span>];</div><div class="line"></div><div class="line">        <span class="built_in">window</span>.cancelAnimationFrame = <span class="built_in">window</span>[vendors[x]+<span class="string">'CancelAnimationFrame'</span>] || <span class="built_in">window</span>[vendors[x]+<span class="string">'CancelRequestAnimationFrame'</span>];</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">if</span> (!<span class="built_in">window</span>.requestAnimationFrame) &#123;</div><div class="line">        <span class="built_in">window</span>.requestAnimationFrame = <span class="function"><span class="keyword">function</span>(<span class="params">callback, element</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> currTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime(),</div><div class="line"></div><div class="line">                timeToCall = <span class="built_in">Math</span>.max(<span class="number">0</span>, <span class="number">16.6</span> - (currTime - lastTime) ),</div><div class="line">                id = <span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                    callback(currTime + timeToCall);</div><div class="line">                &#125;,timeToCall);</div><div class="line"> </div><div class="line">            lastTime = currTime + timeToCall;</div><div class="line">            <span class="keyword">return</span> id;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">if</span> (!<span class="built_in">window</span>.cancelAnimationFrame) &#123;</div><div class="line">        <span class="built_in">window</span>.cancelAnimationFrame = <span class="function"><span class="keyword">function</span>(<span class="params">id</span>) </span>&#123;</div><div class="line">            clearTimeout(id);</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<h2 id="推荐动画库Velocity-js、GreenSock"><a href="#推荐动画库Velocity-js、GreenSock" class="headerlink" title="推荐动画库Velocity.js、GreenSock:"></a>推荐动画库Velocity.js、GreenSock:</h2><ol>
<li>Velocity.js是一款动画切换的jQuery插件，它重新实现了jQuery的$.animate()方法从而加快动画切换的速度。Velocity.js只有7k的大小，它不仅包含了$.animate()的所有功能，并且还包含了颜色切换、转换(transform)、循环、缓动、CSS切换、Scroll功能，它是jQuery、 jQuery UI、CSS变换 在动画方面的最佳组合。</li>
</ol>
<p>Velocity.js支持IE8+、Chrome、Firefox等浏览器，并支持Andriod以及IOS。</p>
<p>Velocity.js在内部实现中使用了jQuery的$.queue()方法，因此它比 jQuery的$.animate()、$.fade()、$.delay()方法更加流畅，其性能也高于CSS的animation属性。</p>
<ol>
<li>GreenSock：GSAP v12平台</li>
</ol>
<p>非常快的速度：性能是非常重要的，尤其是在移动设备上。GSAP不断优化，以保证互动项目的快速响应、高效率及平滑，你可以从这里查看动画效果测试。</p>
<p>异想天开的强劲：内置众多引擎的功能，如动画色彩、贝塞尔曲线、CSS样式属性、Flash滤镜、数组等等，定义不同的回调，可以通过帧或者秒定义运动。</p>
<p>兼容性：Flash，HTML5，jQuery，Canvas，CSS，新浏览器，旧浏览器，RequireJS，EaseIJS，移动设备等等-GSAP都可以很好的与他们兼容，你可以选择你熟悉的工具来使用。</p>
<p>Javascript，AS3/AS2：选择适合你的语言来完成动画。</p>
<p>轻量与可扩展性：模块化与插件式的结构保持了核心引擎的轻量，TweenLite包非常小（基本上低于7kb）。</p>
<p>没有依赖：GSAP没有基于第三方工具来构建（虽然它将jQuery作为选择器），因此能保证最短的加载时间与最大化性能。</p>
<p>高等序列：不用受限于线性序列，可以重叠动画序列，你可以通过精确时间控制，灵活地使用最少的代码实现动画。</p>
<p>良好的技术支持：可以通过论坛反馈，会有专家和资深活跃用户回答问题。</p>
<p>任何对象都可以实现动画：是的，任何，不用预定义的属性，任何对象的任意数字属性都可以实现动画，如果这些属性（如颜色，滤镜，非数值属性等）需要处理，插件可以实现。如果没有，我们可以实现一个。</p>
<p>重写管理：GSAP帮助防止动画引擎的冲突以及高级选项的设置。</p>
<p>易于学习：文档、教程、 示例、学习指南、论坛，还有很多学习资源，非常地丰富。</p>
<p>许可证：除商业用途意外，GSAP完全免费。</p>
<p>参考链接：</p>
<p><a href="https://www.w3.org/TR/web-animations/" target="_blank" rel="external">Web Animations 1.0</a></p>
<p><a href="http://dev.w3.org/csswg/css-will-change/" target="_blank" rel="external">CSS Will Change Module Level 1</a></p>
<p><a href="http://jinjiang.github.io/css-will-change/" target="_blank" rel="external">CSS Will Change Module Level 1 （中文版本）</a></p>
<p><a href="http://www.infoq.com/cn/articles/javascript-high-performance-animation-and-page-rendering" target="_blank" rel="external">Javascript高性能动画与页面渲染</a></p>
<p><a href="http://davidwalsh.name/css-js-animation" target="_blank" rel="external">CSS vs. JS Animation: Which is Faster?</a></p>
<p><a href="http://blogs.adobe.com/webplatform/2014/03/18/css-animations-and-transitions-performance/" target="_blank" rel="external">CSS animations and transitions performance: looking inside the browser</a></p>
<p><a href="https://dev.opera.com/articles/svg-or-canvas-choose/" target="_blank" rel="external">SVG or Canvas? СHoosing Between the Two</a></p>
<p><a href="https://webdesigner-webdeveloper.com/weblog/exploring-web-animations/" target="_blank" rel="external">Exploring the Web Animations API</a></p>
<p><a href="http://alancutter.github.io/web-animations-slides-lca-2014/" target="_blank" rel="external">Web Animations by Google</a></p>
<p><a href="https://dev.opera.com/articles/css-will-change-property/" target="_blank" rel="external">Everything You Need to Know About the CSS will-change Property</a></p>
<p><a href="https://github.com/GoogleChrome/frame-timing-polyfill/wiki/Explainer" target="_blank" rel="external">The (80-storey) Elevator Pitch</a></p>
<p><a href="http://www.greensock.com/js/speed.html" target="_blank" rel="external">HTML5 Animation Speed Test</a></p>
<p>转载声明：<br>本文标题：主流动画实现方式总结<br>原文链接：<a href="http://www.zuojj.com/archives/1292.html，转自Benjamin-专注前端开发和用户体验" target="_blank" rel="external">http://www.zuojj.com/archives/1292.html，转自Benjamin-专注前端开发和用户体验</a></p>
]]></content>
      
        <categories>
            
            <category> 基础杂谈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> 动画 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[入门Webpack，看这篇就够了]]></title>
      <url>https://dsb123dsb.github.io/2016/10/27/%E5%85%A5%E9%97%A8Webpack%EF%BC%8C%E7%9C%8B%E8%BF%99%E7%AF%87%E5%B0%B1%E5%A4%9F%E4%BA%86/</url>
      <content type="html"><![CDATA[<h1 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h1><blockquote>
<p>阅读本文之前，先看下面这个webpack的配置文件，如果每一项你都懂，那本文能带给你的收获也许就比较有限，你可以快速浏览或直接跳过；如果你和十天前的我一样，对很多选项存在着疑惑，那花一段时间慢慢阅读本文，你的疑惑一定一个一个都会消失；如果你以前没怎么接触过Webpack，而你又你对webpack感兴趣，那么动手跟着本文中那个贯穿始终的例子写一次，写完以后你会发现你已明明白白的走进了Webpack的大门。</p>
</blockquote>
<a id="more"></a>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//一个常见的Webpack配置文件</span></div><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"><span class="keyword">var</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</div><div class="line"><span class="keyword">var</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  entry: __dirname + <span class="string">"/app/main.js"</span>,</div><div class="line">  output: &#123;</div><div class="line">    path: __dirname + <span class="string">"/build"</span>,</div><div class="line">    filename: <span class="string">"[name]-[hash].js"</span></div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="built_in">module</span>: &#123;</div><div class="line">    loaders: [</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.json$/</span>,</div><div class="line">        loader: <span class="string">"json"</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.js$/</span>,</div><div class="line">        exclude: <span class="regexp">/node_modules/</span>,</div><div class="line">        loader: <span class="string">'babel'</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.css$/</span>,</div><div class="line">        loader: ExtractTextPlugin.extract(<span class="string">'style'</span>, <span class="string">'css?modules!postcss'</span>)</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  postcss: [</div><div class="line">    <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>)</div><div class="line">  ],</div><div class="line"></div><div class="line">  plugins: [</div><div class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</div><div class="line">      template: __dirname + <span class="string">"/app/index.tmpl.html"</span></div><div class="line">    &#125;),</div><div class="line">    <span class="keyword">new</span> webpack.optimize.OccurenceOrderPlugin(),</div><div class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(),</div><div class="line">    <span class="keyword">new</span> ExtractTextPlugin(<span class="string">"[name]-[hash].css"</span>)</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="什么是WebPack，为什么要使用它？"><a href="#什么是WebPack，为什么要使用它？" class="headerlink" title="什么是WebPack，为什么要使用它？"></a>什么是WebPack，为什么要使用它？</h1><h2 id="为什要使用WebPack"><a href="#为什要使用WebPack" class="headerlink" title="为什要使用WebPack"></a>为什要使用WebPack</h2><p>现今的很多网页其实可以看做是功能丰富的应用，它们拥有着复杂的JavaScript代码和一大堆依赖包。为了简化开发的复杂度，前端社区涌现出了很多好的实践方法</p>
<ul>
<li>模块化，让我们可以把复杂的程序细化为小的文件;</li>
</ul>
<ul>
<li>类似于TypeScript这种在JavaScript基础上拓展的开发语言：使我们能够实现目前版本的JavaScript不能直接使用的特性，并且之后还能能装换为JavaScript文件使浏览器可以识别；</li>
</ul>
<ul>
<li>Scss，less等CSS预处理器</li>
</ul>
<ul>
<li>…</li>
</ul>
<p>这些改进确实大大的提高了我们的开发效率，但是利用它们开发的文件往往需要进行额外的处理才能让浏览器识别,而手动处理又是非常反锁的，这就为WebPack类的工具的出现提供了需求。</p>
<h2 id="什么是Webpack"><a href="#什么是Webpack" class="headerlink" title="什么是Webpack"></a>什么是Webpack</h2><p>WebPack可以看做是模块打包机：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其打包为合适的格式以供浏览器使用。</p>
<h2 id="WebPack和Grunt以及Gulp相比有什么特性"><a href="#WebPack和Grunt以及Gulp相比有什么特性" class="headerlink" title="WebPack和Grunt以及Gulp相比有什么特性"></a>WebPack和Grunt以及Gulp相比有什么特性</h2><p>其实Webpack和另外两个并没有太多的可比性，Gulp/Grunt是一种能够优化前端的开发流程的工具，而WebPack是一种模块化的解决方案，不过Webpack的优点使得Webpack可以替代Gulp/Grunt类的工具。</p>
<p>Grunt和Gulp的工作方式是：在一个配置文件中，指明对某些文件进行类似编译，组合，压缩等任务的具体步骤，这个工具之后可以自动替你完成这些任务。<br><img src="https://oci0xa33t.qnssl.com/gulp.png" alt=""><br><em>Grunt和Gulp的工作流程</em></p>
<p>Webpack的工作方式是：把你的项目当做一个整体，通过一个给定的主文件（如：index.js），Webpack将从这个文件开始找到你的项目的所有依赖文件，使用loaders处理它们，最后打包为一个浏览器可识别的JavaScript文件。<br><img src="https://oci0xa33t.qnssl.com/Webpack.png" alt=""><br>如果实在要把二者进行比较，Webpack的处理速度更快更直接，能打包更多不同类型的文件。</p>
<h1 id="开始使用Webpack"><a href="#开始使用Webpack" class="headerlink" title="开始使用Webpack"></a>开始使用Webpack</h1><p>初步了解了Webpack工作方式后，我们一步步的开始学习使用Webpack。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Webpack可以使用npm安装，新建一个空的练习文件夹（此处命名为webpack sample progect），在终端中转到该文件夹后执行下述指令就可以完成安装。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//全局安装</span></div><div class="line">npm install -g webpack</div><div class="line"><span class="comment">//安装到你的项目目录</span></div><div class="line">npm install --save-dev webpack</div></pre></td></tr></table></figure></p>
<h2 id="正式使用Webpack前的准备"><a href="#正式使用Webpack前的准备" class="headerlink" title="正式使用Webpack前的准备"></a>正式使用Webpack前的准备</h2><p>在上述练习文件夹中创建一个package.json文件，这是一个标准的npm说明文件，里面蕴含了丰富的信息，包括当前项目的依赖模块，自定义的脚本任务等等。在终端中使用<code>npm init</code>命令可以自动创建这个package.json文件<br>    npm init<br>输入这个命令后，终端会问你一系列诸如项目名称，项目描述，作者等信息，不过不用担心，如果你不准备在npm中发布你的模块，这些问题的答案都不重要，回车默认即可。</p>
<ol>
<li><p>package.json文件已经就绪，我们在本项目中安装Webpack作为依赖包</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 安装Webpack</span></div><div class="line">npm install --save-dev webpack</div></pre></td></tr></table></figure>
</li>
<li><p>回到之前的空文件夹，并在里面创建两个文件夹,app文件夹和public文件夹，app文件夹用来存放原始数据和我们将写的JavaScript模块，public文件夹用来存放准备给浏览器读取的数据（包括使用webpack生成的打包后的js文件以及一个index.html文件）。在这里还需要创建三个文件，index.html 文件放在public文件夹中，两个js文件（Greeter.js和main.js）放在app文件夹中，此时项目结构如下图所示<br><img src="https://oci0xa33t.qnssl.com/%E7%BB%93%E6%9E%84.png" alt=""></p>
</li>
</ol>
<p><strong>index.html</strong>文件只有最基础的html代码，它唯一的目的就是加载打包后的js文件（bundle.js）<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=<span class="string">"en"</span>&gt;</div><div class="line">  &lt;head&gt;</div><div class="line">    &lt;meta charset=<span class="string">"utf-8"</span>&gt;</div><div class="line">    &lt;title&gt;Webpack Sample Project&lt;<span class="regexp">/title&gt;</span></div><div class="line"><span class="regexp">  &lt;/</span>head&gt;</div><div class="line">  &lt;body&gt;</div><div class="line">    &lt;div id=<span class="string">'root'</span>&gt;</div><div class="line">    &lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">    &lt;script src="bundle.js"&gt;&lt;/</span>script&gt;</div><div class="line">  &lt;<span class="regexp">/body&gt;</span></div><div class="line"><span class="regexp">&lt;/</span>html&gt;</div></pre></td></tr></table></figure></p>
<p>Greeter.js只包括一个用来返回包含问候信息的html元素的函数。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Greeter.js</span></div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> greet = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</div><div class="line">  greet.textContent = <span class="string">"Hi there and greetings!"</span>;</div><div class="line">  <span class="keyword">return</span> greet;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>main.js用来把Greeter模块返回的节点插入页面。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//main.js </span></div><div class="line"><span class="keyword">var</span> greeter = <span class="built_in">require</span>(<span class="string">'./Greeter.js'</span>);</div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'root'</span>).appendChild(greeter());</div></pre></td></tr></table></figure></p>
<h2 id="正式使用Webpack"><a href="#正式使用Webpack" class="headerlink" title="正式使用Webpack"></a>正式使用Webpack</h2><p>webpack可以在终端中使用，其最基础的命令是</p>
<pre><code>webpack {entry file/入口文件} {destination for bundled file/存放bundle.js的地方}
</code></pre><p>只需要指定一个入口文件，webpack将自动识别项目所依赖的其它文件，不过需要注意的是如果你的webpack没有进行全局安装，那么当你在终端中使用此命令时，需要额外指定其在node_modules中的地址，继续上面的例子，在终端中属于如下命令<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//webpack非全局安装的情况</span></div><div class="line">node_modules/.bin/webpack app/main.js public/bundle.js</div></pre></td></tr></table></figure></p>
<p>结果如下<br><img src="https://oci0xa33t.qnssl.com/1.png" alt=""><br><em>termialResult1</em></p>
<p>可以看出webpack同时编译了main.js 和Greeter,js,现在打开index.html,可以看到如下结果<br><img src="https://oci0xa33t.qnssl.com/2.png" alt=""><br><em>htmlResult1</em></p>
<p>有没有很激动，已经成功的使用Webpack打包了一个文件了。不过如果在终端中进行复杂的操作，还是不太方便且容易出错的，接下来看看Webpack的另一种使用方法。</p>
<h2 id="通过配置文件来使用Webpack"><a href="#通过配置文件来使用Webpack" class="headerlink" title="通过配置文件来使用Webpack"></a>通过配置文件来使用Webpack</h2><p>Webpack拥有很多其它的比较高级的功能（比如说本文后面会介绍的loaders和plugins），这些功能其实都可以通过命令行模式实现，但是正如已经提到的，这样不太方便且容易出错的，一个更好的办法是定义一个配置文件，这个配置文件其实也是一个简单的JavaScript模块，可以把所有的与构建相关的信息放在里面。</p>
<p>还是继续上面的例子来说明如何写这个配置文件，在当前练习文件夹的根目录下新建一个名为webpack.config.js的文件，并在其中进行最最简单的配置，如下所示，它包含入口文件路径和存放打包后文件的地方的路径。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  entry:  __dirname + <span class="string">"/app/main.js"</span>,<span class="comment">//已多次提及的唯一入口文件</span></div><div class="line">  output: &#123;</div><div class="line">    path: __dirname + <span class="string">"/public"</span>,<span class="comment">//打包后的文件存放的地方</span></div><div class="line">    filename: <span class="string">"bundle.js"</span><span class="comment">//打包后输出文件的文件名</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注：“__dirname”是node.js中的一个全局变量，它指向当前执行脚本所在的目录。</p>
</blockquote>
<p>现在如果你需要打包文件只需要在终端里你运行webpack<code>(非全局安装需使用node_modules/.bin/webpack)</code>命令就可以了，这条命令会自动参考webpack.config.js文件中的配置选项打包你的项目，输出结果如下<br><img src="https://oci0xa33t.qnssl.com/3.png" alt=""><br><em>webpack</em></p>
<p>又学会了一种使用Webpack的方法，而且不用管那烦人的命令行参数了，有没有感觉很爽。有没有想过如果可以连webpack(非全局安装需使用node_modules/.bin/webpack)这条命令都可以不用，那种感觉会不会更爽~，继续看下文。</p>
<h2 id="更快捷的执行打包任务"><a href="#更快捷的执行打包任务" class="headerlink" title="更快捷的执行打包任务"></a>更快捷的执行打包任务</h2><p>执行类似于node_modules/.bin/webpack这样的命令其实是比较烦人且容易出错的，不过值得庆幸的是npm可以引导任务执行，对其进行配置后可以使用简单的npm start命令来代替这些繁琐的命令。在package.json中对npm的脚本部分进行相关设置即可，设置方法如下。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">"webpack-sample-project"</span>,</div><div class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="string">"description"</span>: <span class="string">"Sample webpack project"</span>,</div><div class="line">  <span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"start"</span>: <span class="string">"webpack"</span> <span class="comment">//配置的地方就是这里啦，相当于把npm的start命令指向webpack命令</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"author"</span>: <span class="string">"zhang"</span>,</div><div class="line">  <span class="string">"license"</span>: <span class="string">"ISC"</span>,</div><div class="line">  <span class="string">"devDependencies"</span>: &#123;</div><div class="line">    <span class="string">"webpack"</span>: <span class="string">"^1.12.9"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注：package.json中的脚本部分已经默认在命令前添加了node_modules/.bin路径，所以无论是全局还是局部安装的Webpack，你都不需要写前面那指明详细的路径了。</p>
</blockquote>
<p>npm的start是一个特殊的脚本名称，它的特殊性表现在，在命令行中使用npm start就可以执行相关命令，如果对应的此脚本名称不是start，想要在命令行中运行时，需要这样用npm run {script name}如npm run build，以下是执行npm start后命令行的输出显示<br><img src="https://oci0xa33t.qnssl.com/4.png" alt=""><br><em>npmStartTermialResult</em></p>
<p>现在只需要使用npm start就可以打包文件了，有没有觉得webpack也不过如此嘛，不过不要太小瞧Webpack，其强大的功能包含在其一系列可供配置的选项中，我们一项项来看。</p>
<h1 id="Webpack的强大功能"><a href="#Webpack的强大功能" class="headerlink" title="Webpack的强大功能"></a>Webpack的强大功能</h1><h2 id="生成Source-Maps（使调试更容易）"><a href="#生成Source-Maps（使调试更容易）" class="headerlink" title="生成Source Maps（使调试更容易）"></a>生成Source Maps（使调试更容易）</h2><p>开发总是离不开调试，如果可以更加方便的调试当然就能提高开发效率，不过打包后的文件有时候你是不容易找到出错了的地方对应的源代码的位置的，Source Maps就是来帮我们解决这个问题的。</p>
<p>通过简单的配置后，Webpack在打包时可以为我们生成的source maps，这为我们提供了一种对应编译文件和源文件的方法，使得编译后的代码可读性更高，也更容易调试。</p>
<p>在webpack的配置文件中配置source maps，需要配置devtool，它有以下四种不同的配置选项，各具优缺点，描述如下：</p>
<table>
<thead>
<tr>
<th>devtool选项</th>
<th>配置结果</th>
</tr>
</thead>
<tbody>
<tr>
<td>source-map</td>
<td>在一个单独的文件中产生一个完整且功能完全的文件。这个文件具有最好的source map，但是它会减慢打包文件的构建速度；</td>
</tr>
<tr>
<td>cheap-module-source-map</td>
<td>在一个单独的文件中生成一个不带列映射的map，不带列映射提高项目构建速度，但是也使得浏览器开发者工具只能对应到具体的行，不能对应到具体的列（符号），会对调试造成不便；</td>
</tr>
<tr>
<td>eval-source-map</td>
<td>使用eval打包源文件模块，在同一个文件中生成干净的完整的source map。这个选项可以在不影响构建速度的前提下生成完整的sourcemap，但是对打包后输出的JS文件的执行具有性能和安全的隐患。不过在开发阶段这是一个非常好的选项，但是在生产阶段一定不要用这个选项；</td>
</tr>
<tr>
<td>cheap-module-eval-source-map</td>
<td>这是在打包文件时最快的生成source map的方法，生成的Source Map 会和打包后的JavaScript文件同行显示，没有列映射，和eval-source-map选项具有相似的缺点；</td>
</tr>
</tbody>
</table>
<p>正如上表所述，上述选项由上到下打包速度越来越快，不过同时也具有越来越多的负面作用，较快的构建速度的后果就是对打包后的文件的的执行有一定影响。</p>
<p>在学习阶段以及在小到中性的项目上，eval-source-map是一个很好的选项，不过记得只在开发阶段使用它，继续上面的例子，进行如下配置<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  devtool: <span class="string">'eval-source-map'</span>,<span class="comment">//配置生成Source Maps，选择合适的选项</span></div><div class="line">  entry:  __dirname + <span class="string">"/app/main.js"</span>,</div><div class="line">  output: &#123;</div><div class="line">    path: __dirname + <span class="string">"/public"</span>,</div><div class="line">    filename: <span class="string">"bundle.js"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>cheap-module-eval-source-map方法构建速度更快，但是不利于调试，推荐在大型项目考虑da时间成本是使用</p>
</blockquote>
<h2 id="使用webpack构建本地服务器"><a href="#使用webpack构建本地服务器" class="headerlink" title="使用webpack构建本地服务器"></a>使用webpack构建本地服务器</h2><p>想不想让你的浏览器监测你都代码的修改，并自动刷新修改后的结果，其实Webpack提供一个可选的本地开发服务器，这个本地服务器基于node.js构建，可以实现你想要的这些功能，不过它是一个单独的组件，在webpack中进行配置之前需要单独安装它作为项目依赖</p>
<pre><code>npm install --save-dev webpack-dev-server
</code></pre><p>devserver作为webpack配置选项中的一项，具有下配置选项</p>
<table>
<thead>
<tr>
<th>devserver配置选项</th>
<th>功能描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>contentBase</td>
<td>默认webpack-dev-server会为根文件夹提供本地服务器，如果想为另外一个目录下的文件提供本地服务器，应该在这里设置其所在目录（本例设置到“public”目录）</td>
</tr>
<tr>
<td>port</td>
<td>设置默认监听端口，如果省略，默认为”8080“</td>
</tr>
<tr>
<td>inline</td>
<td>设置为true，当源文件改变时会自动刷新页面</td>
</tr>
<tr>
<td>colors</td>
<td>设置为true，使终端输出的文件为彩色的</td>
</tr>
<tr>
<td>historyApiFallback</td>
<td>在开发单页应用时非常有用，它依赖于HTML5 history API，如果设置为true，所有的跳转将指向index.html</td>
</tr>
</tbody>
</table>
<p>继续把这些命令加到webpack的配置文件中，现在的配置文件如下所示</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  devtool: <span class="string">'eval-source-map'</span>,</div><div class="line"></div><div class="line">  entry:  __dirname + <span class="string">"/app/main.js"</span>,</div><div class="line">  output: &#123;</div><div class="line">    path: __dirname + <span class="string">"/public"</span>,</div><div class="line">    filename: <span class="string">"bundle.js"</span></div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  devServer: &#123;</div><div class="line">    contentBase: <span class="string">"./public"</span>,<span class="comment">//本地服务器所加载的页面所在的目录</span></div><div class="line">    colors: <span class="literal">true</span>,<span class="comment">//终端中输出结果为彩色</span></div><div class="line">    historyApiFallback: <span class="literal">true</span>,<span class="comment">//不跳转</span></div><div class="line">    inline: <span class="literal">true</span><span class="comment">//实时刷新</span></div><div class="line">  &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Loaders"><a href="#Loaders" class="headerlink" title="Loaders"></a>Loaders</h2><h3 id="鼎鼎大名的Loaders登场了！"><a href="#鼎鼎大名的Loaders登场了！" class="headerlink" title="鼎鼎大名的Loaders登场了！"></a>鼎鼎大名的Loaders登场了！</h3><p>Loaders是webpack中最让人激动人心的功能之一了。通过使用不同的loader，webpack通过调用外部的脚本或工具可以对各种各样的格式的文件进行处理，比如说分析JSON文件并把它转换为JavaScript文件，或者说把下一代的JS文件（ES6，ES7)转换为现代浏览器可以识别的JS文件。或者说对React的开发而言，合适的Loaders可以把React的JSX文件转换为JS文件。</p>
<p>Loaders需要单独安装并且需要在webpack.config.js下的modules关键字下进行配置，Loaders的配置选项包括以下几方面：</p>
<ul>
<li>test：一个匹配loaders所处理的文件的拓展名的正则表达式（必须）</li>
<li>loader：loader的名称（必须）</li>
<li>include/exclude:手动添加必须处理的文件（文件夹）或屏蔽不需要处理的文件（文件夹）（可选）；</li>
<li>query：为loaders提供额外的设置选项（可选）</li>
</ul>
<p>继续上面的例子，我们把Greeter.js里的问候消息放在一个单独的JSON文件里,并通过合适的配置使Greeter.js可以读取该JSON文件的值，配置方法如下<br>//安装可以装换JSON的loader<br>    npm install –save-dev json-loader</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  devtool: <span class="string">'eval-source-map'</span>,</div><div class="line"></div><div class="line">  entry:  __dirname + <span class="string">"/app/main.js"</span>,</div><div class="line">  output: &#123;</div><div class="line">    path: __dirname + <span class="string">"/public"</span>,</div><div class="line">    filename: <span class="string">"bundle.js"</span></div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="built_in">module</span>: &#123;<span class="comment">//在配置文件里添加JSON loader</span></div><div class="line">    loaders: [</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.json$/</span>,</div><div class="line">        loader: <span class="string">"json"</span></div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  devServer: &#123;</div><div class="line">    contentBase: <span class="string">"./public"</span>,</div><div class="line">    colors: <span class="literal">true</span>,</div><div class="line">    historyApiFallback: <span class="literal">true</span>,</div><div class="line">    inline: <span class="literal">true</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>创建带有问候信息的JSON文件(命名为config.json)<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//config.json</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"greetText"</span>: <span class="string">"Hi there and greetings from JSON!"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>更新后的Greeter.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">'./config.json'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> greet = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</div><div class="line">  greet.textContent = config.greetText;</div><div class="line">  <span class="keyword">return</span> greet;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>Loaders很好，不过有的Loaders使用起来比较复杂，比如说Babel。</p>
<h3 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h3><p>Babel其实是一个编译JavaScript的平台，它的强大之处表现在可以通过编译帮你达到以下目的：</p>
<p>下一代的JavaScript标准（ES6，ES7），这些标准目前并未被当前的浏览器完全的支持；<br>使用基于JavaScript进行了拓展的语言，比如React的JSX</p>
<h4 id="Babel的安装与配置"><a href="#Babel的安装与配置" class="headerlink" title="Babel的安装与配置"></a>Babel的安装与配置</h4><p>Babel其实是几个模块化的包，其核心功能位于称为babel-core的npm包中，不过webpack把它们整合在一起使用，但是对于每一个你需要的功能或拓展，你都需要安装单独的包（用得最多的是解析Es6的babel-preset-es2015包和解析JSX的babel-preset-react包）。</p>
<p>我们先来一次性安装这些依赖包<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// npm一次性安装多个依赖模块，模块之间用空格隔开</span></div><div class="line">npm install --save-dev babel-core babel-loader babel-preset-es2015 babel-preset-react</div></pre></td></tr></table></figure></p>
<p>在webpack中配置Babel的方法如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  devtool: <span class="string">'eval-source-map'</span>,</div><div class="line"></div><div class="line">  entry:  __dirname + <span class="string">"/app/main.js"</span>,</div><div class="line">  output: &#123;</div><div class="line">    path: __dirname + <span class="string">"/public"</span>,</div><div class="line">    filename: <span class="string">"bundle.js"</span></div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="built_in">module</span>: &#123;</div><div class="line">    loaders: [</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.json$/</span>,</div><div class="line">        loader: <span class="string">"json"</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.js$/</span>,</div><div class="line">        exclude: <span class="regexp">/node_modules/</span>,</div><div class="line">        loader: <span class="string">'babel'</span>,<span class="comment">//在webpack的module部分的loaders里进行配置即可</span></div><div class="line">        query: &#123;</div><div class="line">          presets: [<span class="string">'es2015'</span>,<span class="string">'react'</span>]</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  devServer: &#123;</div><div class="line">    contentBase: <span class="string">"./public"</span>,</div><div class="line">    colors: <span class="literal">true</span>,</div><div class="line">    historyApiFallback: <span class="literal">true</span>,</div><div class="line">    inline: <span class="literal">true</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>现在你的webpack的配置已经允许你使用ES6以及JSX的语法了。继续用上面的例子进行测试，不过这次我们会使用React，记得先安装 React 和 React-DOM</p>
<pre><code>npm install --save react react-dom
</code></pre><p>使用ES6的语法，更新Greeter.js并返回一个React组件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//Greeter,js</span></div><div class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span></div><div class="line"><span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">'./config.json'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeter</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;div&gt;</div><div class="line">        &#123;config.greetText&#125;</div><div class="line">      &lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">    );</span></div><div class="line"><span class="regexp">  &#125;</span></div><div class="line"><span class="regexp">&#125;</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">export default Greeter</span></div></pre></td></tr></table></figure></p>
<p>使用ES6的模块定义和渲染Greeter模块<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;render&#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</div><div class="line"><span class="keyword">import</span> Greeter <span class="keyword">from</span> <span class="string">'./Greeter'</span>;</div><div class="line"></div><div class="line">render(<span class="xml"><span class="tag">&lt;<span class="name">Greeter</span> /&gt;</span>, document.getElementById('root'));</span></div></pre></td></tr></table></figure></p>
<h4 id="Babel的配置选项"><a href="#Babel的配置选项" class="headerlink" title="Babel的配置选项"></a>Babel的配置选项</h4><p>Babel其实可以完全在webpack.config.js中进行配置，但是考虑到babel具有非常多的配置选项，在单一的webpack.config.js文件中进行配置往往使得这个文件显得太复杂，因此一些开发者支持把babel的配置选项放在一个单独的名为 “.babelrc” 的配置文件中。我们现在的babel的配置并不算复杂，不过之后我们会再加一些东西，因此现在我们就提取出相关部分，分两个配置文件进行配置（webpack会自动调用.babelrc里的babel配置选项），如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// webpack.config.js</span></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  devtool: <span class="string">'eval-source-map'</span>,</div><div class="line"></div><div class="line">  entry:  __dirname + <span class="string">"/app/main.js"</span>,</div><div class="line">  output: &#123;</div><div class="line">    path: __dirname + <span class="string">"/public"</span>,</div><div class="line">    filename: <span class="string">"bundle.js"</span></div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="built_in">module</span>: &#123;</div><div class="line">    loaders: [</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.json$/</span>,</div><div class="line">        loader: <span class="string">"json"</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.js$/</span>,</div><div class="line">        exclude: <span class="regexp">/node_modules/</span>,</div><div class="line">        loader: <span class="string">'babel'</span></div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  devServer: &#123;...&#125; <span class="comment">// Omitted for brevity</span></div></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//.babelrc</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"presets"</span>: [<span class="string">"react"</span>, <span class="string">"es2015"</span>]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>到目前为止，我们已经知道了，对于模块，Webpack能提供非常强大的处理功能，那那些是模块呢。</p>
<h2 id="一切皆模块"><a href="#一切皆模块" class="headerlink" title="一切皆模块"></a>一切皆模块</h2><p>Webpack有一个不可不说的优点，它把所有的文件都可以当做模块处理，包括你的JavaScript代码，也包括CSS和fonts以及图片等等等，只有通过合适的loaders，它们都可以被当做模块被处理。</p>
<h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><p>webpack提供两个工具处理样式表，css-loader 和 style-loader，二者处理的任务不同，css-loader使你能够使用类似@import 和 url(…)的方法实现 require()的功能,style-loader将所有的计算后的样式加入页面中，二者组合在一起使你能够把样式表嵌入webpack打包后的JS文件中。</p>
<p>继续上面的例子<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//安装</span></div><div class="line">npm install --save-dev style-loader css-loader</div></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用</span></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  devtool: <span class="string">'eval-source-map'</span>,</div><div class="line"></div><div class="line">  entry:  __dirname + <span class="string">"/app/main.js"</span>,</div><div class="line">  output: &#123;</div><div class="line">    path: __dirname + <span class="string">"/build"</span>,</div><div class="line">    filename: <span class="string">"bundle.js"</span></div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="built_in">module</span>: &#123;</div><div class="line">    loaders: [</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.json$/</span>,</div><div class="line">        loader: <span class="string">"json"</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.js$/</span>,</div><div class="line">        exclude: <span class="regexp">/node_modules/</span>,</div><div class="line">        loader: <span class="string">'babel'</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.css$/</span>,</div><div class="line">        loader: <span class="string">'style!css'</span><span class="comment">//添加对样式表的处理</span></div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  devServer: &#123;...&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注：感叹号的作用在于使同一文件能够使用不同类型的loader</p>
</blockquote>
<p>接下来，在app文件夹里创建一个名字为”main.css”的文件，对一些元素设置样式<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">html &#123;</div><div class="line">  box-sizing: border-box;</div><div class="line">  -ms-text-size-adjust: <span class="number">100</span>%;</div><div class="line">  -webkit-text-size-adjust: <span class="number">100</span>%;</div><div class="line">&#125;</div><div class="line"></div><div class="line">*, *:before, *:after &#123;</div><div class="line">  box-sizing: inherit;</div><div class="line">&#125;</div><div class="line"></div><div class="line">body &#123;</div><div class="line">  margin: <span class="number">0</span>;</div><div class="line">  font-family: <span class="string">'Helvetica Neue'</span>, Helvetica, Arial, sans-serif;</div><div class="line">&#125;</div><div class="line"></div><div class="line">h1, h2, h3, h4, h5, h6, p, ul &#123;</div><div class="line">  margin: <span class="number">0</span>;</div><div class="line">  padding: <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>你还记得吗？webpack只有单一的入口，其它的模块需要通过 import, require, url等导入相关位置，为了让webpack能找到”main.css“文件，我们把它导入”main.js “中，如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//main.js</span></div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;render&#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</div><div class="line"><span class="keyword">import</span> Greeter <span class="keyword">from</span> <span class="string">'./Greeter'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">'./main.css'</span>;<span class="comment">//使用require导入css文件</span></div><div class="line"></div><div class="line">render(<span class="xml"><span class="tag">&lt;<span class="name">Greeter</span> /&gt;</span>, document.getElementById('root'));</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>通常情况下，css会和js打包到同一个文件中，并不会打包为一个单独的css文件，不过通过合适的配置webpack也可以把css打包为单独的文件的。</p>
<p>不过这也只是webpack把css当做模块而已，咱们继续看看一个真的CSS模块的实践。</p>
</blockquote>
<h3 id="CSS-module"><a href="#CSS-module" class="headerlink" title="CSS module"></a>CSS module</h3><p>在过去的一些年里，JavaScript通过一些新的语言特性，更好的工具以及更好的实践方法（比如说模块化）发展得非常迅速。模块使得开发者把复杂的代码转化为小的，干净的，依赖声明明确的单元，且基于优化工具，依赖管理和加载管理可以自动完成。</p>
<p>不过前端的另外一部分，CSS发展就相对慢一些，大多的样式表却依旧是巨大且充满了全局类名，这使得维护和修改都非常困难和复杂。</p>
<p>最近有一个叫做 CSS modules 的技术就意在把JS的模块化思想带入CSS中来，通过CSS模块，所有的类名，动画名默认都只作用于当前模块。Webpack从一开始就对CSS模块化提供了支持，在CSS loader中进行配置后，你所需要做的一切就是把”modules“传递都所需要的地方，然后就可以直接把CSS的类名传递到组件的代码中，且这样做只对当前组件有效，不必担心在不同的模块中具有相同的类名可能会造成的问题。具体的代码如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  devtool: <span class="string">'eval-source-map'</span>,</div><div class="line"></div><div class="line">  entry:  __dirname + <span class="string">"/app/main.js"</span>,</div><div class="line">  output: &#123;...&#125;,</div><div class="line"></div><div class="line">  <span class="built_in">module</span>: &#123;</div><div class="line">    loaders: [</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.json$/</span>,</div><div class="line">        loader: <span class="string">"json"</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.js$/</span>,</div><div class="line">        exclude: <span class="regexp">/node_modules/</span>,</div><div class="line">        loader: <span class="string">'babel'</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.css$/</span>,</div><div class="line">        loader: <span class="string">'style!css?modules'</span><span class="comment">//跟前面相比就在后面加上了?modules</span></div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  devServer: &#123;...&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>创建一个Greeter.css文件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.root &#123;</div><div class="line">  background-color: #eee;</div><div class="line">  padding: <span class="number">10</span>px;</div><div class="line">  border: 3px solid #ccc;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>导入.root到Greeter.js中<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">'./config.json'</span>;</div><div class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">'./Greeter.css'</span>;<span class="comment">//导入</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeter</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;div className=&#123;styles.root&#125;&gt;<span class="comment">//添加类名</span></div><div class="line">        &#123;config.greetText&#125;</div><div class="line">      &lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">    );</span></div><div class="line"><span class="regexp">  &#125;</span></div><div class="line"><span class="regexp">&#125;</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">export default Greeter</span></div></pre></td></tr></table></figure></p>
<p>放心使用把，相同的类名也不会造成不同组件之间的污染。<br>CSS modules 也是一个很大的主题，有兴趣的话可以去官方文档查看更多消息</p>
<h3 id="CSS预处理器"><a href="#CSS预处理器" class="headerlink" title="CSS预处理器"></a>CSS预处理器</h3><p>Sass 和 Less之类的预处理器是对原生CSS的拓展，它们允许你使用类似于variables, nesting, mixins, inheritance等不存在于CSS中的特性来写CSS，CSS预处理器可以这些特殊类型的语句转化为浏览器可识别的CSS语句，<br>你现在可能都已经熟悉了，在webpack里使用相关loaders进行配置就可以使用了，以下是常用的CSS 处理loaders</p>
<ul>
<li>Less Loader</li>
<li>Sass Loader</li>
<li>Stylus Loader</li>
</ul>
<p>不过其实也存在一个CSS的处理平台-PostCSS，它可以帮助你的CSS实现更多的功能，在其<a href="https://github.com/postcss/postcss" target="_blank" rel="external">CSS官方文档</a>可了解更多相关知识。</p>
<p>举例来说如何使用PostCSS，我们使用PostCSS来为CSS代码自动添加适应不同浏览器的CSS前缀。</p>
<p>首先安装postcss-loader 和 autoprefixer（自动添加前缀的插件）</p>
<pre><code>npm install --save-dev postcss-loader autoprefixer
</code></pre><p>接下来，在webpack配置文件中进行设置，只需要新建一个postcss关键字，并在里面申明依赖的插件，如下，现在你写的css会自动根据Can i use里的数据添加不同前缀了。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//webpack配置文件</span></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  devtool: <span class="string">'eval-source-map'</span>,</div><div class="line">  entry: __dirname + <span class="string">"/app/main.js"</span>,</div><div class="line">  output: &#123;...&#125;,</div><div class="line"></div><div class="line">  <span class="built_in">module</span>: &#123;</div><div class="line">    loaders: [</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.json$/</span>,</div><div class="line">        loader: <span class="string">"json"</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.js$/</span>,</div><div class="line">        exclude: <span class="regexp">/node_modules/</span>,</div><div class="line">        loader: <span class="string">'babel'</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.css$/</span>,</div><div class="line">        loader: <span class="string">'style!css?modules!postcss'</span></div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  postcss: [</div><div class="line">    <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>)<span class="comment">//调用autoprefixer插件</span></div><div class="line">  ],</div><div class="line"></div><div class="line">  devServer: &#123;...&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>到现在，本文已经涉及到处理JS的Babel和处理CSS的PostCSS，它们其实也是两个单独的平台，配合Webpack可以很好的发挥它们的作用。接下来介绍Webpack中另一个非常重要的功能-Plugins</p>
<h1 id="插件（Plugins）"><a href="#插件（Plugins）" class="headerlink" title="插件（Plugins）"></a>插件（Plugins）</h1><p>插件（Plugins）是用来拓展Webpack功能的，它们会在整个构建过程中生效，执行相关的任务。<br>Loaders和Plugins常常被弄混，但是他们其实是完全不同的东西，可以这么来说，loaders是在打包构建过程中用来处理源文件的（JSX，Scss，Less..），一次处理一个，插件并不直接操作单个文件，它直接对整个构建过程其作用。</p>
<p>Webpack有很多内置插件，同时也有很多第三方插件，可以让我们完成更加丰富的功能。</p>
<h2 id="使用插件的方法"><a href="#使用插件的方法" class="headerlink" title="使用插件的方法"></a>使用插件的方法</h2><p>要使用某个插件，我们需要通过npm安装它，然后要做的就是在webpack配置中的plugins关键字部分添加该插件的一个实例（plugins是一个数组）继续看例子，我们添加了一个实现版权声明的插件。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//webpack.config.js</span></div><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  devtool: <span class="string">'eval-source-map'</span>,</div><div class="line">  entry:  __dirname + <span class="string">"/app/main.js"</span>,</div><div class="line">  output: &#123;...&#125;,</div><div class="line"></div><div class="line">  <span class="built_in">module</span>: &#123;</div><div class="line">    loaders: [</div><div class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.json$/</span>, <span class="attr">loader</span>: <span class="string">"json"</span> &#125;,</div><div class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.js$/</span>, <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>, <span class="attr">loader</span>: <span class="string">'babel'</span> &#125;,</div><div class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="attr">loader</span>: <span class="string">'style!css?modules!postcss'</span> &#125;<span class="comment">//这里添加PostCSS</span></div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  postcss: [</div><div class="line">    <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>)</div><div class="line">  ],</div><div class="line"></div><div class="line">  plugins: [</div><div class="line">    <span class="keyword">new</span> webpack.BannerPlugin(<span class="string">"Copyright Flying Unicorns inc."</span>)<span class="comment">//在这个数组中new一个就可以了</span></div><div class="line">  ],</div><div class="line"></div><div class="line">  devServer: &#123;...&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>通过这个插件，打包后的JS文件显示如下<br><img src="https://oci0xa33t.qnssl.com/5.png" alt=""><br><em>bundled JavaScript file</em></p>
<p>知道Webpack中的插件如何使用了，下面给大家推荐几个常用的插件</p>
<h2 id="HtmlWebpackPlugin"><a href="#HtmlWebpackPlugin" class="headerlink" title="HtmlWebpackPlugin"></a>HtmlWebpackPlugin</h2><p>这个插件的作用是依据一个简单的模板，帮你生成最终的Html5文件，这个文件中自动引用了你打包后的JS文件。每次编译都在文件名中插入一个不同的哈希值。</p>
<h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><pre><code>npm install --save-dev html-webpack-plugin
</code></pre><p>这个插件自动完成了我们之前手动做的一些事情，在正式使用之前需要对一直以来的项目结构做一些改变：</p>
<ol>
<li>移除public文件夹，利用此插件，HTML5文件会自动生成，此外CSS已经通过前面的操作打包到JS中了，public文件夹里。</li>
<li><p>在app目录下，创建一个Html文件模板，这个模板包含title等其它你需要的元素，在编译过程中，本插件会依据此模板生成最终的html页面，会自动添加所依赖的 css, js，favicon等文件，在本例中我们命名模板文件名称为index.tmpl.html，模板源代码如下</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Webpack Sample Project<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'root'</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>更新webpack的配置文件，方法同上,新建一个build文件夹用来存放最终的输出文件</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"><span class="keyword">var</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  devtool: <span class="string">'eval-source-map'</span>,</div><div class="line"></div><div class="line">  entry:  __dirname + <span class="string">"/app/main.js"</span>,</div><div class="line">  output: &#123;</div><div class="line">    path: __dirname + <span class="string">"/build"</span>,</div><div class="line">    filename: <span class="string">"bundle.js"</span></div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="built_in">module</span>: &#123;</div><div class="line">    loaders: [</div><div class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.json$/</span>, <span class="attr">loader</span>: <span class="string">"json"</span> &#125;,</div><div class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.js$/</span>, <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>, <span class="attr">loader</span>: <span class="string">'babel'</span> &#125;,</div><div class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="attr">loader</span>: <span class="string">'style!css?modules!postcss'</span> &#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  postcss: [</div><div class="line">    <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>)</div><div class="line">  ],</div><div class="line"></div><div class="line">  plugins: [</div><div class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</div><div class="line">      template: __dirname + <span class="string">"/app/index.tmpl.html"</span><span class="comment">//new 一个这个插件的实例，并传入相关的参数</span></div><div class="line">    &#125;)</div><div class="line">  ],</div><div class="line"></div><div class="line">  devServer: &#123;</div><div class="line">    colors: <span class="literal">true</span>,</div><div class="line">    historyApiFallback: <span class="literal">true</span>,</div><div class="line">    inline: <span class="literal">true</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Hot-Module-Replacement"><a href="#Hot-Module-Replacement" class="headerlink" title="Hot Module Replacement"></a>Hot Module Replacement</h2><p>Hot Module Replacement（HMR）也是webpack里很有用的一个插件，它允许你在修改组件代码后，自动刷新实时预览修改后的效果。<br>在webpack中实现HMR也很简单，只需要做两项配置</p>
<ol>
<li>在webpack配置文件中添加HMR插件；</li>
<li>在Webpack Dev Server中添加“hot”参数；</li>
<li>不过配置完这些后，JS模块其实还是不能自动热加载的，还需要在你的JS模块中执行一个Webpack提供的API才能实现热加载，虽然这个API不难使用，但是如果是React模块，使用我们已经熟悉的Babel可以更方便的实现功能热加载。</li>
</ol>
<p>整理下我们的思路，具体实现方法如下</p>
<ul>
<li>Babel和webpack是独立的工具</li>
<li>二者可以一起工作</li>
<li>二者都可以通过插件拓展功能</li>
<li>HMR是一个webpack插件，它让你能浏览器中实时观察模块修改后的效果，但是如果你想让它工作，需要对模块进行额外的配额；</li>
<li>Babel有一个叫做react-transform-hrm的插件，可以在不对React模块进行额外的配置的前提下让HMR正常工作；</li>
<li>更新我们的例子来实际看看如何配置<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//webpack中的配置</span></div><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"><span class="keyword">var</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  devtool: <span class="string">'eval-source-map'</span>,</div><div class="line">  entry: __dirname + <span class="string">"/app/main.js"</span>,</div><div class="line">  output: &#123;</div><div class="line">    path: __dirname + <span class="string">"/build"</span>,</div><div class="line">    filename: <span class="string">"bundle.js"</span></div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="built_in">module</span>: &#123;</div><div class="line">    loaders: [</div><div class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.json$/</span>, <span class="attr">loader</span>: <span class="string">"json"</span> &#125;,</div><div class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.js$/</span>, <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>, <span class="attr">loader</span>: <span class="string">'babel'</span> &#125;,</div><div class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="attr">loader</span>: <span class="string">'style!css?modules!postcss'</span> &#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  postcss: [</div><div class="line">    <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>)</div><div class="line">  ],</div><div class="line"></div><div class="line">  plugins: [</div><div class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</div><div class="line">      template: __dirname + <span class="string">"/app/index.tmpl.html"</span></div><div class="line">    &#125;),</div><div class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin()<span class="comment">//热加载插件</span></div><div class="line">  ],</div><div class="line"></div><div class="line">  devServer: &#123;</div><div class="line">    colors: <span class="literal">true</span>,</div><div class="line">    historyApiFallback: <span class="literal">true</span>,</div><div class="line">    inline: <span class="literal">true</span>,</div><div class="line">    hot: <span class="literal">true</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>安装react-transform-hmr</p>
<pre><code>npm install --save-dev babel-plugin-react-transform react-transform-hmr
</code></pre><p>配置Babel<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"presets"</span>: [<span class="string">"react"</span>, <span class="string">"es2015"</span>],</div><div class="line">  <span class="string">"env"</span>: &#123;</div><div class="line">    <span class="string">"development"</span>: &#123;</div><div class="line">    <span class="string">"plugins"</span>: [[<span class="string">"react-transform"</span>, &#123;</div><div class="line">       <span class="string">"transforms"</span>: [&#123;</div><div class="line">         <span class="string">"transform"</span>: <span class="string">"react-transform-hmr"</span>,</div><div class="line"></div><div class="line">         <span class="string">"imports"</span>: [<span class="string">"react"</span>],</div><div class="line"></div><div class="line">         <span class="string">"locals"</span>: [<span class="string">"module"</span>]</div><div class="line">       &#125;]</div><div class="line">     &#125;]]</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>现在当你使用React时，可以热加载模块了</p>
<h1 id="产品阶段的构建"><a href="#产品阶段的构建" class="headerlink" title="产品阶段的构建"></a>产品阶段的构建</h1><p>目前为止，我们已经使用webpack构建了一个完整的开发环境。但是在产品阶段，可能还需要对打包的文件进行额外的处理，比如说优化，压缩，缓存以及分离CSS和JS。</p>
<p>对于复杂的项目来说，需要复杂的配置，这时候分解配置文件为多个小的文件可以使得事情井井有条，以上面的例子来说，我们创建一个“webpack.production.config.js”的文件，在里面加上基本的配置,它和原始的webpack.config.js很像，如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"><span class="keyword">var</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  entry: __dirname + <span class="string">"/app/main.js"</span>,</div><div class="line">  output: &#123;</div><div class="line">    path: __dirname + <span class="string">"/build"</span>,</div><div class="line">    filename: <span class="string">"bundle.js"</span></div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="built_in">module</span>: &#123;</div><div class="line">    loaders: [</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.json$/</span>,</div><div class="line">        loader: <span class="string">"json"</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.js$/</span>,</div><div class="line">        exclude: <span class="regexp">/node_modules/</span>,</div><div class="line">        loader: <span class="string">'babel'</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.css$/</span>,</div><div class="line">        loader: <span class="string">'style!css?modules!postcss'</span></div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  postcss: [</div><div class="line">    <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>)</div><div class="line">  ],</div><div class="line"></div><div class="line">  plugins: [</div><div class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</div><div class="line">      template: __dirname + <span class="string">"/app/index.tmpl.html"</span></div><div class="line">    &#125;),</div><div class="line">  ],</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//package.json</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">"webpack-sample-project"</span>,</div><div class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="string">"description"</span>: <span class="string">"Sample webpack project"</span>,</div><div class="line">  <span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"start"</span>: <span class="string">"webpack-dev-server --progress"</span>,</div><div class="line">    <span class="string">"build"</span>: <span class="string">"NODE_ENV=production webpack --config ./webpack.production.config.js --progress"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"author"</span>: <span class="string">"Cássio Zen"</span>,</div><div class="line">  <span class="string">"license"</span>: <span class="string">"ISC"</span>,</div><div class="line">  <span class="string">"devDependencies"</span>: &#123;...&#125;,</div><div class="line">  <span class="string">"dependencies"</span>: &#123;...&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="优化插件"><a href="#优化插件" class="headerlink" title="优化插件"></a>优化插件</h2><p>webpack提供了一些在发布阶段非常有用的优化插件，它们大多来自于webpack社区，可以通过npm安装，通过以下插件可以完成产品发布阶段所需的功能</p>
<ul>
<li>OccurenceOrderPlugin :为组件分配ID，通过这个插件webpack可以分析和优先考虑使用最多的模块，并为它们分配最小的ID</li>
<li>UglifyJsPlugin：压缩JS代码；</li>
<li>ExtractTextPlugin：分离CSS和JS文件</li>
<li>我们继续用例子来看看如何添加它们，OccurenceOrder 和 UglifyJS plugins 都是内置插件，你需要做的只是安装它们</li>
</ul>
<pre><code>npm install --save-dev extract-text-webpack-plugin
</code></pre><p>在配置文件的plugins后引用它们<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"><span class="keyword">var</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</div><div class="line"><span class="keyword">var</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  entry: __dirname + <span class="string">"/app/main.js"</span>,</div><div class="line">  output: &#123;</div><div class="line">    path: __dirname + <span class="string">"/build"</span>,</div><div class="line">    filename: <span class="string">"bundle.js"</span></div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="built_in">module</span>: &#123;</div><div class="line">    loaders: [</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.json$/</span>,</div><div class="line">        loader: <span class="string">"json"</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.js$/</span>,</div><div class="line">        exclude: <span class="regexp">/node_modules/</span>,</div><div class="line">        loader: <span class="string">'babel'</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.css$/</span>,</div><div class="line">        loader: ExtractTextPlugin.extract(<span class="string">'style'</span>, <span class="string">'css?modules!postcss'</span>)</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  postcss: [</div><div class="line">    <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>)</div><div class="line">  ],</div><div class="line"></div><div class="line">  plugins: [</div><div class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</div><div class="line">      template: __dirname + <span class="string">"/app/index.tmpl.html"</span></div><div class="line">    &#125;),</div><div class="line">    <span class="keyword">new</span> webpack.optimize.OccurenceOrderPlugin(),</div><div class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(),</div><div class="line">    <span class="keyword">new</span> ExtractTextPlugin(<span class="string">"style.css"</span>)</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><p>缓存无处不在，使用缓存的最好方法是保证你的文件名和文件内容是匹配的（内容改变，名称相应改变）</p>
<p>webpack可以把一个哈希值添加到打包的文件名中，使用方法如下,添加特殊的字符串混合体（[name], [id] and [hash]）到输出文件名前<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"><span class="keyword">var</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</div><div class="line"><span class="keyword">var</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  entry: __dirname + <span class="string">"/app/main.js"</span>,</div><div class="line">  output: &#123;</div><div class="line">    path: __dirname + <span class="string">"/build"</span>,</div><div class="line">    filename: <span class="string">"[name]-[hash].js"</span></div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="built_in">module</span>: &#123;</div><div class="line">    loaders: [</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.json$/</span>,</div><div class="line">        loader: <span class="string">"json"</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.js$/</span>,</div><div class="line">        exclude: <span class="regexp">/node_modules/</span>,</div><div class="line">        loader: <span class="string">'babel'</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.css$/</span>,</div><div class="line">        loader: ExtractTextPlugin.extract(<span class="string">'style'</span>, <span class="string">'css?modules!postcss'</span>)</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  postcss: [</div><div class="line">    <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>)</div><div class="line">  ],</div><div class="line"></div><div class="line">  plugins: [</div><div class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</div><div class="line">      template: __dirname + <span class="string">"/app/index.tmpl.html"</span></div><div class="line">    &#125;),</div><div class="line">    <span class="keyword">new</span> webpack.optimize.OccurenceOrderPlugin(),</div><div class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(),</div><div class="line">    <span class="keyword">new</span> ExtractTextPlugin(<span class="string">"[name]-[hash].css"</span>)</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>现在用户会有合理的缓存了。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这是一篇好长的文章，谢谢你的耐心，能仔细看到了这里，大概半个月前我第一次自己一步步配置项目所需的Webpack后就一直想写一篇笔记做总结，几次动笔都不能让自己满意，总觉得写不清楚。直到看到本文的英文版<a href="http://www.pro-react.com/materials/appendixA/" target="_blank" rel="external">Webpack for React</a>，真的有多次豁然开朗的感觉，喜欢看原文的点链接就可以看了。其实关于Webpack本文讲述得仍不完全，不过相信你看完后已经进入Webpack的大门，能够更好的探索其它的关于Webpack的知识了。</p>
<p>欢迎大家在文后发表自己的观点讨论。</p>
<p>&emsp;&emsp;<span style="background:#f5f5f5">文／zhangwang（简书作者）原文链接：<a href="http://www.jianshu.com/p/42e11515c10f#" target="_blank" rel="external">http://www.jianshu.com/p/42e11515c10f#</a>。</span></p>
]]></content>
      
        <categories>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> Webpack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[javaScript语言精粹的二三代码+]]></title>
      <url>https://dsb123dsb.github.io/2016/10/23/javaScript%E8%AF%AD%E8%A8%80%E7%B2%BE%E7%B2%B9%E7%9A%84%E4%BA%8C%E4%B8%89%E4%BB%A3%E7%A0%81/</url>
      <content type="html"><![CDATA[<blockquote>
<p>早就耳闻《javaScript语言精粹》写的很经典，一定要反复读，自觉前端已初窥门径，而且这段时间又接触算法和ES6，看完之后的确很棒，原来理解不深的地方恍然大悟，对这门语言的优雅和糟粕也更加了然于心；这里把里面一些代码略作摘抄，也算是再加咀嚼<delete><del>代码是敲出来的</del></delete></p>
</blockquote>
<h1 id="fade-background"><a href="#fade-background" class="headerlink" title="fade-background"></a>fade-background</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fade =<span class="function">(<span class="params">node</span>)=&gt;</span>&#123;</div><div class="line"><span class="keyword">var</span> level=<span class="number">1</span>;</div><div class="line"><span class="keyword">var</span> step=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">    <span class="keyword">var</span> hex =level.toString(<span class="number">16</span>);</div><div class="line">    node.style.backgroundColor=<span class="string">"#FFFF"</span>+hex+hex;</div><div class="line">    <span class="keyword">if</span>(level&lt;<span class="number">15</span>)&#123;</div><div class="line">       level+=<span class="number">1</span>;</div><div class="line">       setTimeout(step,<span class="number">100</span>);</div><div class="line">    &#125;</div><div class="line"> &#125;;setTimeout(step,<span class="number">100</span>);</div><div class="line">&#125;</div><div class="line">fade(<span class="built_in">document</span>.body);</div></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="替html字符实体"><a href="#替html字符实体" class="headerlink" title="替html字符实体"></a>替html字符实体</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Function</span>.prototype.method=<span class="function"><span class="keyword">function</span>(<span class="params">name,func</span>)</span>&#123;</div><div class="line">       <span class="keyword">this</span>.prototype[name]=func;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">String</span>.method(<span class="string">'deentityify'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">       <span class="keyword">var</span> entity=&#123;</div><div class="line">           quto:<span class="string">"''"</span>,</div><div class="line">           lt:<span class="string">"&lt;"</span>,</div><div class="line">           gt:<span class="string">"&gt;"</span>  </div><div class="line">  &#125;;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.replace(<span class="regexp">/&amp;([^&amp;;]+);/g</span>,</div><div class="line">               (a,b)=&gt;&#123;</div><div class="line">                    <span class="keyword">var</span> r=entity[b];</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">typeof</span> r===<span class="string">'string'</span>?r:a;        </div><div class="line">              &#125;</div><div class="line">             );        </div><div class="line">  &#125;;</div><div class="line">&#125;());</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'&amp;lt;&amp;quto;&amp;gt;&amp;ll'</span>.deentityify());</div><div class="line"><span class="built_in">document</span>.writeln(<span class="string">'&amp;lt;&amp;quto;&amp;gt;&amp;ll'</span>.deentityify());</div></pre></td></tr></table></figure>
<h1 id="去掉js数组中重复项"><a href="#去掉js数组中重复项" class="headerlink" title="去掉js数组中重复项"></a>去掉js数组中重复项</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>];</div><div class="line">[...new <span class="built_in">Set</span>(arr)];</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> result = [], isRepeated;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++) &#123;</div><div class="line">          isRepeated = <span class="literal">false</span>;</div><div class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>, len2 = result.length; j &lt; len2; j++) &#123;</div><div class="line">              <span class="keyword">if</span> (arr[i] == result[j]) &#123;   </div><div class="line">                  isRepeated = <span class="literal">true</span>;</div><div class="line">                 <span class="keyword">break</span>;</div><div class="line">              &#125;</div><div class="line">         &#125;</div><div class="line">         <span class="keyword">if</span> (!isRepeated) &#123;</div><div class="line">             result.push(arr[i]);</div><div class="line">            </div><div class="line">         &#125;</div><div class="line">     &#125;</div><div class="line">     <span class="keyword">return</span> result;</div><div class="line"> &#125;</div><div class="line">unique([<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);<span class="comment">//从嵌套循环就可以看出，这种方法效率极低</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique2</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> result = [], hash = &#123;&#125;;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, elem;  i&lt;arr.length; i++) &#123;</div><div class="line">        (elem = arr[i]) != <span class="literal">null</span>;</div><div class="line">        <span class="keyword">if</span> (!hash[elem]) &#123;</div><div class="line">            result.push(elem);</div><div class="line">            hash[elem] = <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line">unique2([<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">23</span>,<span class="number">3</span>]);<span class="comment">//用一个hashtable的结构记录已有的元素，这样就可以避免内层循环</span></div></pre></td></tr></table></figure>
<h1 id="js去除数组中的空元素"><a href="#js去除数组中的空元素" class="headerlink" title="js去除数组中的空元素"></a>js去除数组中的空元素</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> array = [<span class="number">1</span>,<span class="number">2</span>,,,<span class="number">4</span>,<span class="number">6</span>,,,,,,<span class="number">55</span>];</div><div class="line"> </div><div class="line">alert(array)</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ;i&lt;array.length;i++)</div><div class="line">&#123;</div><div class="line">            <span class="keyword">if</span>(array[i] == <span class="string">""</span> || <span class="keyword">typeof</span>(array[i]) == <span class="string">"undefined"</span>)</div><div class="line">            &#123;</div><div class="line">                     array.splice(i,<span class="number">1</span>);</div><div class="line">                     i= i<span class="number">-1</span>;</div><div class="line">                 </div><div class="line">            &#125;</div><div class="line">             </div><div class="line">&#125;</div><div class="line"> </div><div class="line">alert(array);</div></pre></td></tr></table></figure>
<h1 id="memoization-fibonacci"><a href="#memoization-fibonacci" class="headerlink" title="memoization-fibonacci"></a>memoization-fibonacci</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fibonacci=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> memo=[<span class="number">0</span>,<span class="number">1</span>];</div><div class="line">    <span class="keyword">var</span> fib=<span class="function">(<span class="params">n</span>)=&gt;</span>&#123;</div><div class="line">        <span class="keyword">var</span> result=memo[n];</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> result!==<span class="string">'number'</span>)&#123;</div><div class="line">            result=fib(n<span class="number">-1</span>)+fib(n<span class="number">-2</span>);</div><div class="line">            memo[n]=result;</div><div class="line">        &#125;</div><div class="line">             <span class="keyword">return</span> result;</div><div class="line">   &#125;;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;=<span class="number">10</span>;i++)&#123;</div><div class="line">	   <span class="built_in">console</span>.log(<span class="string">'//'</span>+i+<span class="string">':'</span>+fib(i));</div><div class="line">	   </div><div class="line">	&#125;</div><div class="line">	<span class="built_in">console</span>.log(memo);</div><div class="line">&#125;();</div></pre></td></tr></table></figure>
<h1 id="sort进阶"><a href="#sort进阶" class="headerlink" title="sort进阶"></a>sort进阶</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a=[</div><div class="line">	  &#123;<span class="attr">first</span>:<span class="string">'Joe'</span>,<span class="attr">last</span>:<span class="string">'Besser'</span>&#125;,</div><div class="line">	  &#123;<span class="attr">first</span>:<span class="string">'Moe'</span>,<span class="attr">last</span>:<span class="string">'Howard'</span>&#125;,</div><div class="line">	  &#123;<span class="attr">first</span>:<span class="string">'Joe'</span>,<span class="attr">last</span>:<span class="string">'DeRita'</span>&#125;,</div><div class="line">	  &#123;<span class="attr">first</span>:<span class="string">'Shemp'</span>,<span class="attr">last</span>:<span class="string">'Howard'</span>&#125;,</div><div class="line">	  &#123;<span class="attr">first</span>:<span class="string">'Larry'</span>,<span class="attr">last</span>:<span class="string">'Fina'</span>&#125;,</div><div class="line">	  &#123;<span class="attr">first</span>:<span class="string">'Curry'</span>,<span class="attr">last</span>:<span class="string">'Howard'</span>&#125;</div><div class="line">	];</div><div class="line"><span class="keyword">var</span> by = <span class="function"><span class="keyword">function</span>(<span class="params">name,minor</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">o,p</span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> a,b;</div><div class="line">		<span class="keyword">if</span>(o &amp;&amp; p &amp;&amp; <span class="keyword">typeof</span> o===<span class="string">'object'</span>&amp;&amp;<span class="keyword">typeof</span> p===<span class="string">'object'</span>)&#123;</div><div class="line">			a=o[name];</div><div class="line">			b=p[name];</div><div class="line">			<span class="keyword">if</span>(a===b)&#123;</div><div class="line">				<span class="keyword">return</span> <span class="keyword">typeof</span> minor===<span class="string">'function'</span>?minor(o,p):<span class="number">0</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span>(<span class="keyword">typeof</span> a===<span class="keyword">typeof</span> b)&#123;</div><div class="line">				<span class="keyword">return</span> a&lt;b?<span class="number">-1</span>:<span class="number">1</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">typeof</span> a&lt;<span class="keyword">typeof</span> b?<span class="number">-1</span>:<span class="number">1</span>;</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			<span class="keyword">throw</span>&#123;</div><div class="line">				name:<span class="string">'Error'</span>,</div><div class="line">				message:<span class="string">'Expected an object when sorting by'</span>+name</div><div class="line">			&#125;;</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line">&#125;;</div><div class="line">a.sort(by(<span class="string">'last'</span>),by(<span class="string">'first'</span>));<span class="comment">//[ &#123; first: 'Joe', last: 'Besser' &#125;,</span></div><div class="line">							   <span class="comment">//&#123; first: 'Joe', last: 'DeRita' &#125;,</span></div><div class="line">							   <span class="comment">//&#123; first: 'Larry', last: 'Fina' &#125;,</span></div><div class="line">							   <span class="comment">//&#123; first: 'Moe', last: 'Howard' &#125;,</span></div><div class="line">							   <span class="comment">//&#123; first: 'Shemp', last: 'Howard' &#125;,</span></div><div class="line">							   <span class="comment">//&#123; first: 'Curry', last: 'Howard' &#125; ]</span></div></pre></td></tr></table></figure>
<p>未完待续。。。。。</p>
]]></content>
      
        <categories>
            
            <category> 基础杂谈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> 代码总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[浅谈rem]]></title>
      <url>https://dsb123dsb.github.io/2016/10/08/%E6%B5%85%E8%B0%88rem/</url>
      <content type="html"><![CDATA[<blockquote>
<p> rem这是个低调的css单位，近一两年开始崭露头角，有许多同学对rem的评价不一，有的在尝试使用，有的在使用过程中遇到坑就弃用了。但是我对rem综合评价是用来做web app它绝对是最合适的人选之一。</p>
</blockquote>
<h1 id="rem是什么？"><a href="#rem是什么？" class="headerlink" title="rem是什么？"></a>rem是什么？</h1><p> &emsp;&emsp;rem（font size of the root element）是指相对于根元素的字体大小的单位。简单的说它就是一个相对单位。看到rem大家一定会想起em单位，em（font size of the element）是指相对于父元素的字体大小的单位。它们之间其实很相似，只不过一个计算的规则是依赖根元素一个是依赖父元素计算。<br><a id="more"></a></p>
<h1 id="为什么web-app要使用rem？"><a href="#为什么web-app要使用rem？" class="headerlink" title="为什么web app要使用rem？"></a>为什么web app要使用rem？</h1><p>&emsp;&emsp; 这里我特别强调web app，web page就不能使用rem吗，其实也当然可以，不过出于兼容性的考虑在web app下使用更加能突显这个单位的价值和能力，接下来我们来看看目前一些企业的web app是怎么做屏幕适配的。</p>
<h2 id="1、实现强大的屏幕适配布局："><a href="#1、实现强大的屏幕适配布局：" class="headerlink" title="1、实现强大的屏幕适配布局："></a>1、实现强大的屏幕适配布局：</h2><p>&emsp;&emsp;最近iphone6一下出了两款尺寸的手机，导致的移动端的屏幕种类更加的混乱，记得一两年前做web app有一种做法是以320宽度为标准去做适配，超过320的大小还是以320的规格去展示，这种实现方式以淘宝web app为代表作，但是近期手机淘宝首页进行了改版，采用了rem这个单位，首页以内依旧是和以前一样各种混乱，有定死宽度的页面，也有那种流式布局的页面。</p>
<p>&emsp;&emsp;我们现在在切页面布局的使用常用的单位是px，这是一个绝对单位，web app的屏幕适配有很多中做法，例如：流式布局、限死宽度，还有就是通过响应式来做，但是这些方案都不是最佳的解决方法。</p>
<p>&emsp;&emsp;例如流式布局的解决方案有不少弊端，它虽然可以让各种屏幕都适配，但是显示的效果极其的不好，因为只有几个尺寸的手机能够完美的显示出视觉设计师和交互最想要的效果，但是目前行业里用流式布局切web app的公司还是挺多的，看看下面我收集的一些案例：</p>
<h3 id="1-亚马逊："><a href="#1-亚马逊：" class="headerlink" title="1.亚马逊："></a>1.亚马逊：</h3><p><img src="https://oci0xa33t.qnssl.com/1amon.jpeg" alt=""></p>
<h3 id="2-携程："><a href="#2-携程：" class="headerlink" title="2.携程："></a>2.携程：</h3><p><img src="https://oci0xa33t.qnssl.com/xiecheng.jpeg" alt=""></p>
<h3 id="3-兰亭"><a href="#3-兰亭" class="headerlink" title="3.兰亭"></a>3.兰亭</h3><p><img src="https://oci0xa33t.qnssl.com/lanting.jpeg" alt=""><br>&emsp;&emsp;上面的网站都是采用的流式布局的技术实现的，他们在页面布局的时候都是通过百分比来定义宽度，但是高度大都是用px来固定住，所以在大屏幕的手机下显示效果会变成有些页面元素宽度被拉的很长，但是高度还是和原来一样，实际显示非常的不协调，这就是流式布局的最致命的缺点，往往只有几个尺寸的手机下看到的效果是令人满意的，其实很多视觉设计师应该无法接受这种效果，因为他们的设计图在大屏幕手机下看到的效果相当于是被横向拉长来一样。</p>
<p>&emsp;&emsp;流式布局并不是最理想的实现方式，通过大量的百分比布局，会经常出现许多兼容性的问题，还有就是对设计有很多的限制，因为他们在设计之初就需要考虑流式布局对元素造成的影响，只能设计横向拉伸的元素布局，设计的时候存在很多局限性。</p>
<h2 id="2-固定宽度做法"><a href="#2-固定宽度做法" class="headerlink" title="2.固定宽度做法"></a>2.固定宽度做法</h2><p>&emsp;&emsp;还有一种是固定页面宽度的做法，早期有些网站把页面设置成320的宽度，超出部分留白，这样做视觉，前端都挺开心，视觉在也不用被流式布局限制自己的设计灵感了，前端也不用在搞坑爹的流式布局。但是这种解决方案也是存在一些问题，例如在大屏幕手机下两边是留白的，还有一个就是大屏幕手机下看起来页面会特别小，操作的按钮也很小，手机淘宝首页起初是这么做的，但近期改版了，采用了rem。</p>
<h2 id="3-响应式做法"><a href="#3-响应式做法" class="headerlink" title="3.响应式做法"></a>3.响应式做法</h2><p>&emsp;&emsp;响应式这种方式在国内很少有大型企业的复杂性的网站在移动端用这种方法去做，主要原因是工作大，维护性难，所以一般都是中小型的门户或者博客类站点会采用响应式的方法从web page到web app直接一步到位，因为这样反而可以节约成本，不用再专门为自己的网站做一个web app的版本。</p>
<h2 id="4-设置viewport进行缩放"><a href="#4-设置viewport进行缩放" class="headerlink" title="4.设置viewport进行缩放"></a>4.设置viewport进行缩放</h2><p>&emsp;&emsp;天猫的web app的首页就是采用这种方式去做的，以320宽度为基准，进行缩放，最大缩放为320*1.3 = 416，基本缩放到416都就可以兼容iphone6 plus的屏幕了，这个方法简单粗暴，又高效。说实话我觉得他和用接下去我们要讲的rem都非常高效，不过有部分同学使用过程中反应缩放会导致有些页面元素会糊的情况。</p>
<h1 id="rem能等比例适配所有屏幕"><a href="#rem能等比例适配所有屏幕" class="headerlink" title="rem能等比例适配所有屏幕"></a>rem能等比例适配所有屏幕</h1><p>&emsp;&emsp;上面讲了一大堆目前大部分公司主流的一些web app的适配解决方案，接下来讲下rem是如何工作的。</p>
<p>&emsp;&emsp;上面说过rem是通过根元素进行适配的，网页中的根元素指的是html我们通过设置html的字体大小就可以控制rem的大小。举个例子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">html&#123;</div><div class="line">    font-size:<span class="number">20</span>px;</div><div class="line">&#125;</div><div class="line">.btn &#123;</div><div class="line">    width: <span class="number">6</span>rem;</div><div class="line">    height: <span class="number">3</span>rem;</div><div class="line">    line-height: <span class="number">3</span>rem;</div><div class="line">    font-size: <span class="number">1.2</span>rem;</div><div class="line">    display: inline-block;</div><div class="line">    background: #06c;</div><div class="line">    color: #fff;</div><div class="line">    border-radius: <span class="number">.5</span>rem;</div><div class="line">    text-decoration: none;</div><div class="line">    text-align: center;    </div><div class="line">&#125;</div></pre></td></tr></table></figure><br><a href="http://jsfiddle.net/520UED/6te3yyua/1/embedded/result/" target="_blank" rel="external">Demo</a> 上面代码结果按钮大小如下图：</p>
<p><img src="https://oci0xa33t.qnssl.com/demo1.jpeg" alt=""><br>&emsp;&emsp;我把html设置成10px是为了方便我们计算，为什么6rem等于60px。如果这个时候我们的.btn的样式不变，我们再改变html的font-size的值，看看按钮发生上面变化:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">html&#123;</div><div class="line">    font-size:<span class="number">40</span>px;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br><a href="http://jsfiddle.net/520UED/6te3yyua/2/embedded/result/" target="_blank" rel="external">Demo</a></p>
<p>按钮大小结果如下：</p>
<p><img src="https://oci0xa33t.qnssl.com/demo2.jpeg" alt=""><br>&emsp;&emsp;上面的width，height变成了上面结果的两倍，我们只改变了html的font-size，但.btn样式的width,height的rem设置的属性不变的情况下就改变了按钮在web中的大小。</p>
<p>其实从上面两个案例中我们就可以计算出1px多少rem:</p>
<p>第一个例子：</p>
<p>120px = 6rem * 20px(根元素设置大值)</p>
<p>第二个例子：</p>
<p>240px = 6rem * 40px(根元素设置大值)</p>
<p>推算出：</p>
<p>10px  = 1rem 在根元素（font-size = 10px的时候）；</p>
<p>20px  = 1rem 在根元素（font-size = 20px的时候）；</p>
<p>40px  = 1rem 在根元素（font-size = 40px的时候）；</p>
<p>&emsp;&emsp;在上面两个例子中我们发现第一个案例按钮是等比例放大到第二个按钮，html font-size的改变就会导致按钮的大小发生改变，我们并不需要改变先前给按钮设置的宽度和高度，其实这就是我们最想看到的，为什么这么说？接下来我们再来看一个例子：</p>
<p><a href="http://121.40.99.17/global/rem-phone.html" target="_blank" rel="external">demo</a></p>
<p>&emsp;&emsp;由上面两个的demo中我们知道改变html的font-size可以等比改变所有用了rem单位的元素，所以大家可以通过chrome浏览器的调试工具去切换第三个的demo在不同设备下的展示效果，或者通过缩放浏览器的宽度来查看效果，我们可以看到不管在任何分辨率下，页面的排版都是按照等比例进行切换，并且布局没有乱。我只是通过一段js根据浏览器当前的分辨率改变font-size的值，就简单的实现了上面的效果，页面的所有元素都不需要进行任何改变。</p>
<h1 id="到这里肯定有很多人会问我是怎么计算出不同分辨率下font-size的值？"><a href="#到这里肯定有很多人会问我是怎么计算出不同分辨率下font-size的值？" class="headerlink" title="到这里肯定有很多人会问我是怎么计算出不同分辨率下font-size的值？"></a>到这里肯定有很多人会问我是怎么计算出不同分辨率下font-size的值？</h1><p>&emsp;&emsp;首先假设我上面的页面设计稿给我时候是按照640的标准尺寸给我的前提下，（当然这个尺寸肯定不一定是640，可以是320，或者480，又或是375）来看一组表格。</p>
<p><img src="https://oci0xa33t.qnssl.com/%E6%A0%87%E5%87%86%E5%B0%BA%E5%AF%B8.jpeg" alt=""></p>
<p>&emsp;&emsp;上面的表格蓝色一列是Demo3中页面的尺寸，页面是以640的宽度去切的，怎么计算不同宽度下font-site的值，大家看表格上面的数值变化应该能明白。举个例子：384/640 = 0.6，384是640的0.6倍，所以384页面宽度下的font-size也等于它的0.6倍，这时384的font-size就等于12px。在不同设备的宽度计算方式以此类推。</p>
<p>&emsp;&emsp;Demo3中我是通过JS去动态计算根元素的font-size，这样的好处是所有设备分辨率都能兼容适配，淘宝首页目前就是用的JS计算。但其实不用JS我们也可以做适配，一般我们在做web app都会先统计自己网站有哪些主流的屏幕设备，然后去针对那些设备去做media query设置也可以实现适配，例如下面这样：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">html &#123;</div><div class="line">    font-size : <span class="number">20</span>px;</div><div class="line">&#125;</div><div class="line">@media only screen and (min-width: <span class="number">401</span>px)&#123;</div><div class="line">    html &#123;</div><div class="line">        font-size: <span class="number">25</span>px !important;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">@media only screen and (min-width: <span class="number">428</span>px)&#123;</div><div class="line">    html &#123;</div><div class="line">        font-size: <span class="number">26.75</span>px !important;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">@media only screen and (min-width: <span class="number">481</span>px)&#123;</div><div class="line">    html &#123;</div><div class="line">        font-size: <span class="number">30</span>px !important; </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">@media only screen and (min-width: <span class="number">569</span>px)&#123;</div><div class="line">    html &#123;</div><div class="line">        font-size: <span class="number">35</span>px !important; </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">@media only screen and (min-width: <span class="number">641</span>px)&#123;</div><div class="line">    html &#123;</div><div class="line">        font-size: <span class="number">40</span>px !important; </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>&emsp;&emsp;上面的做的设置当然是不能所有设备全适配，但是用JS是可以实现全适配。具体用哪个就要根据自己的实际工作场景去定了。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">doc, win</span>) </span>&#123;</div><div class="line"><span class="keyword">var</span> docEl = doc.documentElement,</div><div class="line">resizeEvt = <span class="string">'orientationchange'</span> <span class="keyword">in</span> <span class="built_in">window</span> ? <span class="string">'orientationchange'</span> : <span class="string">'resize'</span>,</div><div class="line">recalc = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"><span class="keyword">var</span> clientWidth = docEl.clientWidth;</div><div class="line"><span class="keyword">if</span> (!clientWidth) <span class="keyword">return</span>;</div><div class="line">docEl.style.fontSize = <span class="number">20</span> * (clientWidth / <span class="number">320</span>) + <span class="string">'px'</span>;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">if</span> (!doc.addEventListener) <span class="keyword">return</span>;</div><div class="line">win.addEventListener(resizeEvt, recalc, <span class="literal">false</span>);</div><div class="line">doc.addEventListener(<span class="string">'DOMContentLoaded'</span>, recalc, <span class="literal">false</span>);</div><div class="line">&#125;)(<span class="built_in">document</span>, <span class="built_in">window</span>);</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;下面推荐两个国内用了rem技术的移动站，大家可以上去参考看看他们的做法，手机淘宝目前只有首页用了rem，淘宝native app的首页是内嵌的web app首页。</p>
<p>淘宝首页：<a href="https://m.taobao.com/#index" target="_blank" rel="external">m.taobao.com</a></p>
<p>D X：<a href="http://m.dx.com/" target="_blank" rel="external">m.dx.com</a></p>
<h1 id="最后我们再来看一看他的兼容性："><a href="#最后我们再来看一看他的兼容性：" class="headerlink" title="最后我们再来看一看他的兼容性："></a>最后我们再来看一看他的兼容性：</h1><p><img src="https://oci0xa33t.qnssl.com/rem%E5%85%BC%E5%AE%B9.png" alt=""></p>
<p>&emsp;&emsp;<span style="background:#f5f5f5">本文参考自 web app变革之rem，原文地址<a href="http://isux.tencent.com/web-app-rem.html" target="_blank" rel="external">http://isux.tencent.com/web-app-rem.html</a></span><br></p>
]]></content>
      
        <categories>
            
            <category> 技术分享 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 自适应布局 </tag>
            
            <tag> rem </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[衣带渐宽终不悔]]></title>
      <url>https://dsb123dsb.github.io/2016/09/30/%E8%A1%A3%E5%B8%A6%E6%B8%90%E5%AE%BD%E7%BB%88%E4%B8%8D%E6%82%94/</url>
      <content type="html"><![CDATA[<blockquote>
<p>纸上得来终觉浅，绝知此事要躬行</p>
</blockquote>
<hr>
<p>&emsp;&emsp;回顾下暑假到现在看的js书目：《Javascript DOM编程艺术》《javascript高级程序设计》《锋利的Jquery》《javascript语言精粹》《github入门指南》；现在新买了《高性能javascript》《ES6标准入门》《javascript权威指南》；学习到现在时间不长，回想啃高级程序设计时很多似懂非懂，经过亲手做些东西，经常翻些技术博客，再回头看书有种恍然大悟的感觉，<strong>绝知此事要躬行</strong>。</p>
<p>&emsp;&emsp;这几天看了吴军先生的《浪潮之巅》和《数学之美》，不免内心波澜起梦想，梦想归梦想，become优秀前端er才是眼前要紧事！<br><img src="https://oci0xa33t.qnssl.com/stock-photo-118785927.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> 生活随笔 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Web性能优化之：如何延迟加载JS]]></title>
      <url>https://dsb123dsb.github.io/2016/09/29/Web%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8B%EF%BC%9A%E5%A6%82%E4%BD%95%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BDJS/</url>
      <content type="html"><![CDATA[<h1 id="延迟加载JavaScript"><a href="#延迟加载JavaScript" class="headerlink" title="延迟加载JavaScript"></a>延迟加载JavaScript</h1><blockquote>
<p>JavaScript的延迟加载是那些在web上，能让你想抓狂地去寻找解决方案的问题之一。</p>
</blockquote>
<p>&emsp;&emsp;很多人说“那就用defer”或“async”，甚至有些人说“那就将你的javascript代码放在页面代码底部”。</p>
<p>&emsp;&emsp;上述方法都不能解决在web页面完全加载后，再加载外部js的问题。上述方法也会偶尔让你收到Google页面速度测试工具的“延迟加载javascript”警告。所以这里的解决方案将是来自Google帮助页面的推荐方案。<br><a id="more"></a></p>
<h1 id="如何延迟加载JavaScript"><a href="#如何延迟加载JavaScript" class="headerlink" title="如何延迟加载JavaScript"></a>如何延迟加载JavaScript</h1><p>下面是Google推荐的代码。这些代码应被放置在标签前(接近HTML文件底部)。另外，我将外部JS文件名突出显示。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">downloadJSAtOnload</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="keyword">var</span> element = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</div><div class="line">element.src = <span class="string">"defer.js"</span>;</div><div class="line"><span class="built_in">document</span>.body.appendChild(element);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.addEventListener)</div><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"load"</span>, downloadJSAtOnload, <span class="literal">false</span>);</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.attachEvent)</div><div class="line"><span class="built_in">window</span>.attachEvent(<span class="string">"onload"</span>, downloadJSAtOnload);</div><div class="line"><span class="keyword">else</span> <span class="built_in">window</span>.onload = downloadJSAtOnload;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div><div class="line"><span class="regexp">&lt;script type="text/</span>javascript<span class="string">"&gt;</span></div><div class="line"><span class="string">function downloadJSAtOnload() &#123;</span></div><div class="line"><span class="string">var element = document.createElement("</span>script<span class="string">");</span></div><div class="line"><span class="string">element.src = "</span>defer.js<span class="string">";</span></div><div class="line"><span class="string">document.body.appendChild(element);</span></div><div class="line"><span class="string">&#125;</span></div><div class="line"><span class="string">if (window.addEventListener)</span></div><div class="line"><span class="string">window.addEventListener("</span>load<span class="string">", downloadJSAtOnload, false);</span></div><div class="line"><span class="string">else if (window.attachEvent)</span></div><div class="line"><span class="string">window.attachEvent("</span>onload<span class="string">", downloadJSAtOnload);</span></div><div class="line"><span class="string">else window.onload = downloadJSAtOnload;</span></div><div class="line"><span class="string">&lt;/script&gt;</span></div></pre></td></tr></table></figure></p>
<h1 id="这里做了什么？"><a href="#这里做了什么？" class="headerlink" title="这里做了什么？"></a>这里做了什么？</h1><p>&emsp;&emsp;这段代码意思是等到整个文档加载完后，再加载外部文件“defer.js”。</p>
<h2 id="emsp-具体说明"><a href="#emsp-具体说明" class="headerlink" title="&emsp;具体说明"></a>&emsp;具体说明</h2><p>1.复制上面代码</p>
<p>2.粘贴代码到HTML的标签前 (靠近HTML文件底部)</p>
<p>3.修改“defer.js”为你的外部JS文件名</p>
<p>4.确保你文件路径是正确的。例如：如果你仅输入“defer.js”，那么“defer.js”文件一定与HTML文件在同一文件夹下。</p>
<h2 id="这段代码能用在哪里-和哪里不能用"><a href="#这段代码能用在哪里-和哪里不能用" class="headerlink" title="这段代码能用在哪里(和哪里不能用)"></a>这段代码能用在哪里(和哪里不能用)</h2><p>&emsp;&emsp;这段代码直到文档加载完才会加载指定的外部JS文件。因此，不应该把那些页面正常加载需要依赖的javascript代码放在这里。而应该将JavaScript代码分成两组。一组是因页面需要而立即加载的javascript代码，另外一组是在页面加载后进行操作的javascript代码(例如添加click事件或其他东西)。这些需等到页面加载后再执行的JavaScript代码，应放在一个外部文件，然后再引进来。</p>
<p>&emsp;&emsp;例如，在这<a href="https://varvy.com/pagespeed/defer-loading-javascript.html" target="_blank" rel="external">页面</a>我使用上述文件进行延迟加载 – Google analytics，<a href="http://www.viglink.com/" target="_blank" rel="external">Viglink (我怎么赚钱)</a>，和显示在底部的Google+徽章(我的社交媒体)。这对于我来说，没有理由在初始页面加载时加载这些文件，因为初始阶段都没必要加载上述无关紧要的内容。也许在你的页面中也有同样性质的文件。那你难道想让用户在看到网页内容之前，还要等待这些文件加载吗？</p>
<h1 id="为什么不使用其它方法呢？"><a href="#为什么不使用其它方法呢？" class="headerlink" title="为什么不使用其它方法呢？"></a>为什么不使用其它方法呢？</h1><p>&emsp;&emsp;直接插入代码、将脚本放置在底部和使用“defer”或“async”，这几种方法都不能达到先加载页面后加载JS的目的，而且它们肯定不能在各个浏览器上表现一致。</p>
<h1 id="它为什么重要？"><a href="#它为什么重要？" class="headerlink" title="它为什么重要？"></a>它为什么重要？</h1><p>&emsp;&emsp;它的重要性是由于Google将页面速度作为排名因素之一而且用户也希望能快速加载页面。另外对于<a href="https://varvy.com/mobile/" target="_blank" rel="external">移动搜索引擎优化</a>也是非常重要的。Google根据页面<strong>最初加载</strong>时间来衡量<a href="https://varvy.com/pagespeed/" target="_blank" rel="external">页面速度</a>。这意味着你必须尽可能快地得到页面的load事件。页面最初加载时间是Google用来评价你的web页面质量(而且别忘记用户在等待页面的加载)。Google积极推进和推荐将<a href="https://varvy.com/pagespeed/prioritize-visible-content.html" target="_blank" rel="external">上述的无关紧要的内容按重要性排列</a>，让所有资源(js,css,images等)脱离<a href="https://varvy.com/pagespeed/critical-render-path.html" target="_blank" rel="external">关键的渲染路径</a>，而且这样做是值得去努力的。如果这样能取悦用户，且让Google开心，你很应该这样做。</p>
<h1 id="用法示例"><a href="#用法示例" class="headerlink" title="用法示例"></a>用法示例</h1><p>&emsp;&emsp;我已创建一个<a href="https://varvy.com/pagespeed/defer/defer-example-solved.html" target="_blank" rel="external">页面</a>，在这个页面你可看到这段代码的使用。</p>
<h2 id="让你测试的示例文件"><a href="#让你测试的示例文件" class="headerlink" title="让你测试的示例文件"></a>让你测试的示例文件</h2><p>&emsp;&emsp;好的，为了说明，我已制作几个示例页面让你进行测试。每个页面都做同一样的事情。这是一个普通的HTML页面，含有一个等待2秒然后输出“hello world”的javascript脚本。你可以测试这些文件，然后你会看到只有一种方法，它的加载时间是不包括2秒的等待时间。</p>
<ul>
<li>直接插入脚本的页面 – <a href="http://www.feedthebot.com/pagespeed/defer/defer-example-normal.html" target="_blank" rel="external">点击这里</a></li>
<li>带有使用“defer”外部脚本的页面 – <a href="https://varvy.com/pagespeed/defer/defer-example-defer.html" target="_blank" rel="external">点击这里</a></li>
<li>使用上述推荐代码的页面 – <a href="https://varvy.com/pagespeed/defer/defer-example-solved.html" target="_blank" rel="external">点击这里</a><h1 id="关键点"><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h1></li>
</ul>
<p>&emsp;&emsp;压倒一切的首要任务应该是尽可能快地交付内容给用户。而我们一直没想着如何对待我们的javascript代码。但用户不应该为一些无关紧要的脚本，而被迫地为内容而作出等待。无论你的页脚多酷，都没理由让一个可能从不滚动到页脚的用户，去加载那些让页脚变酷的javascript文件。</p>
<p>&emsp;&emsp;<span style="background:#f5f5f5">本文参考自 <em>Defer loading javascript</em> 英文原文地址<a href="https://varvy.com/pagespeed/defer-loading-javascript.html" target="_blank" rel="external">(https://varvy.com/pagespeed/defer-loading-javascript.html)</a></span><br><br>&emsp;&emsp;<span style="background:#f5f5f5">中文翻译参考 <em>伯乐在线</em> 原文地址<a href="http://web.jobbole.com/82317/" target="_blank" rel="external">(http://web.jobbole.com/82317/)</a></span></p>
]]></content>
      
        <categories>
            
            <category> 基础杂谈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> web性能 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[从一行代码里面学点JavaScript]]></title>
      <url>https://dsb123dsb.github.io/2016/09/29/%E4%BB%8E%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E9%87%8C%E9%9D%A2%E5%AD%A6%E7%82%B9JavaScript/</url>
      <content type="html"><![CDATA[<h1 id="从一行代码里面学点JavaScript"><a href="#从一行代码里面学点JavaScript" class="headerlink" title="从一行代码里面学点JavaScript"></a>从一行代码里面学点JavaScript</h1><blockquote>
<p>&emsp;&emsp;现如今，JavaScript无处不在，因此关于JavaScript的新知识也是层出不穷。JavaScript的特点在于，要学习它的语法入门简简单，但是要精通使用它的方式却是一件不容易的事。</p>
</blockquote>
<p>&emsp;&emsp;来看看下面的这段代码，它来自于谷歌“名猿”<a href="https://addyosmani.com/blog/" target="_blank" rel="external">Addy Osmani</a>贴出的<a href="https://gist.github.com/addyosmani/fd3999ea7fce242756b1" target="_blank" rel="external">一段代码</a>（<strong>本人做了些改进，嘿嘿</strong>），它的作用是用来调试你的CSS层。全部代码只有三行，但是你绝对可以把它放在一行里面完成(比如我)：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[].forEach.call($$(<span class="string">"*"</span>),<span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;a.style.outline=<span class="string">"1px solid #"</span>+((~~(<span class="built_in">Math</span>.random()*(<span class="number">1</span>&lt;&lt;<span class="number">24</span>))).toString(<span class="number">16</span>)+<span class="string">"000000"</span>).substr(<span class="number">0</span>,<span class="number">6</span>)&#125;)</div></pre></td></tr></table></figure><br><a id="more"></a><br>顺手试了下学校网站：<img src="https://oci0xa33t.qnssl.com/vvx%E6%93%A6.png" alt="">效果还不错哟<br><br>&emsp;&emsp;具体实现过程是这样滴，首先在你的Chrome浏览器的控制台中输入这段代码，你会发现不同<code>HTML</code>层都被使用不同的颜色添加了一个高亮的边框。是不是非常酷？但是，简单来说，这段代码只是首先获取了所有的页面元素，然后使用一个不同的颜色为它们添加了一个<code>1px</code>的边框。想法很简单，但是真要实现起来却不是那么容易的一件事。在下面的内容中，我们将一起一步一步学习如何理解上面的这段代码。</p>
<h1 id="选择页面中所有的元素"><a href="#选择页面中所有的元素" class="headerlink" title="选择页面中所有的元素"></a>选择页面中所有的元素</h1><p>&emsp;&emsp;我们需要做的第一件事情是获取页面中所有的元素，在上面的代码中，Addy使用了一个Chrome浏览器中特有的函数<code>$$</code>。你可以在你的Chrome浏览器控制台中输入<code>$$(&#39;a&#39;)</code>，然后你就能得到一个当前页面中所有锚元素的列表。</p>
<p>&emsp;&emsp;<code>$$</code>函数是许多现代浏览器命令行API中的一个部分，它等价于<code>document.querySelectorAll</code>,你可以将一个CSS选择器作为这个函数的参数，然后你就能够获得当前页面中所有匹配这个CSS选择器的元素列表。如果你在浏览器控制台以外的地方，你可以使用<code>document.querySelectorAll(&#39;*&#39;)</code>来代替<code>$$(&#39;*&#39;)</code>。更多关于$$函数的详细内容可以查看<a href="https://developer.chrome.com/devtools" target="_blank" rel="external">Chrome开发者工具的文档</a>和<a href="http://stackoverflow.com/questions/8981211/what-is-the-source-of-the-double-dollar-sign-selector-query-function-in-chrome-f#answer-10308917" target="_blank" rel="external"> this stackoverflow answer</a>。</p>
<p>&emsp;&emsp;当然，除了使用<code>$$</code>函数之外，我们还有一种更简单的方法，<code>document.all</code>，虽然这并不是一种很规范的使用方法，但是它几乎在每一个浏览器中都能运行成功。</p>
<h1 id="迭代所有的元素"><a href="#迭代所有的元素" class="headerlink" title="迭代所有的元素"></a>迭代所有的元素</h1><p>&emsp;&emsp;经过第一步，我们已经获得了页面内所有的元素，现在我们想做的事情是遍历每一个元素，然后为它们添加一个彩色边边框。但是上面的代码究竟是怎么一回事呢？</p>
<pre><code>[].forEach.call( $$(&apos;*&apos;), function( element ) { /* 在这里修改颜色 */ });
</code></pre><p>&emsp;&emsp;首先，我们通过选择器获得的列表是一个<code>NodeLists</code>对象，它和JavaScript中的数组有点像，你可以使用方括号来获取其中的节点，你也可以检查它其中包含多少个元素，但是它并没有实现数组包含的所有方法，因此我们并不能使用<code>$$(&#39;*&#39;).forEach()</code>来进行迭代。在JavaScript中，有好几个类似于数组但是并不是数组的对象，除了前面的<code>NodeLists</code>，还有函数的参数集合<code>arguments</code>，在这里我们可以使用<code>call或apply</code>函数将函数的方法运用到这些对象上。例如下面的例子：<br><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params">name</span>) </span>&#123;</div><div class="line"> <span class="built_in">console</span>.log( <span class="keyword">this</span> + <span class="string">' '</span> + name );</div><div class="line">&#125;	</div><div class="line">say.call( <span class="string">'hola'</span>, <span class="string">'Mike'</span> ); <span class="comment">// 打印 'hola Mike'</span></div><div class="line"><span class="comment">// 你也可以将这种方法有用在arguments对象上 </span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"> arg1, arg2, arg3 </span>) </span>&#123;</div><div class="line"> <span class="keyword">return</span> <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>); <span class="comment">// Returns [arg2, arg3] &#125;</span></div></pre></td></tr></table></figure><br><br>&emsp;&emsp;在Addy的代码中，使用了<code>[].forEach.call</code>而不是<code>Array.prototype.forEach.call</code>，二者等价，但是前者可以节省几个字节。</p>
<h1 id="为元素添加颜色"><a href="#为元素添加颜色" class="headerlink" title="为元素添加颜色"></a>为元素添加颜色</h1><p>&emsp;&emsp;为了让元素都有一个漂亮的边框，我们在上面的代码中使用了CSS属性<code>outline</code>。<code>outline</code>属性位于CSS盒模型之外，因此它并不影响元素的属性或者元素在布局中的位置，这对于我们来说非常有用。这个属性和修改border属性非常类似，因此下面的代码应该不会很难理解：</p>
<pre><code>a.style.outline=&quot;1px solid #&quot; + color
</code></pre><p>真正有趣的地方在于定义颜色部分：</p>
<pre><code>~~(Math.random()*(1&lt;&lt;24))).toString(16)
</code></pre><p>&emsp;&emsp;天呐，上面的代码是什么意思？在JavaScript中，比特操作符（位操作符）并不是经常被使用，因此这里可能会让很多程序员感到很疑惑。<br><br>&emsp;&emsp;我们想达到的目的是活的一个十六进制格式的颜色例如白色对应的是<code>FFFFFF</code>，蓝色对应的是<code>0000FF</code>，或者随便一个颜色<code>37f9ac</code>。虽然我们人类喜欢十进制，但是我们的代码常常会需要十六进制的东西。<br><br>&emsp;&emsp;我们首先要学会如何使用<code>toString</code>函数将一个十进制的数组转换为一个十六进制整数。这个函数可以接受一个参数，如果参数缺省，默认为十进制，但是你完全可以使用别的数组：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(<span class="number">30</span>).toString(); <span class="comment">// "30"</span></div><div class="line">(<span class="number">30</span>).toString(<span class="number">10</span>); <span class="comment">// "30"</span></div><div class="line">(<span class="number">30</span>).toString(<span class="number">16</span>); <span class="comment">// "1e" 十六进制</span></div><div class="line">(<span class="number">30</span>).toString(<span class="number">2</span>); <span class="comment">// "11110" 二进制</span></div><div class="line">(<span class="number">30</span>).toString(<span class="number">36</span>); <span class="comment">// "u" 36是允许的最大参数值</span></div></pre></td></tr></table></figure><br>除此之外，你可以使用<code>parseInt</code>函数将十六进制数字转换为十进制。<br><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">parseInt</span>(<span class="string">"30"</span>); <span class="comment">// "30"</span></div><div class="line"><span class="built_in">parseInt</span>(<span class="string">"30"</span>, <span class="number">10</span>); <span class="comment">// "30"</span></div><div class="line"><span class="built_in">parseInt</span>(<span class="string">"1e"</span>, <span class="number">16</span>); <span class="comment">// "30"</span></div><div class="line"><span class="built_in">parseInt</span>(<span class="string">"11110"</span>, <span class="number">2</span>); <span class="comment">// "30"</span></div><div class="line"><span class="built_in">parseInt</span>(<span class="string">"u"</span>, <span class="number">36</span>); <span class="comment">// "30"</span></div></pre></td></tr></table></figure><br><br>&emsp;&emsp;因此，我们现在只需要一个位于<code>0</code>和<code>ffffff</code>之间的十六进制数，由于:</p>
<pre><code>parseInt(&quot;ffffff&quot;, 16) == 16777215
</code></pre><p>&emsp;&emsp;而这里的<code>16777215</code>实际上是<code>2^24-1</code>。如果你对二进制数学熟悉的话，你可能会知道<code>1&lt;&lt;24 == 16777216</code>。再进一步，你每在1后面添加一个0，你就相当于多做了一次2的乘方：<br><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span> <span class="comment">// 1 == 2^0</span></div><div class="line"><span class="number">100</span> <span class="comment">// 4 == 2^2</span></div><div class="line"><span class="number">10000</span> <span class="comment">// 16 == 2^4</span></div><div class="line"><span class="number">1000000000000000000000000</span> <span class="comment">// 16777216 == 2^24</span></div></pre></td></tr></table></figure><br><br>&emsp;&emsp;因此，在这里我们可以知道<code>Math.random()*(1&lt;&lt;24)</code>表示一个位于<code>0</code>和<code>16777216</code>之间的数。<br><br>&emsp;&emsp;但是这里并没有结束，因为<code>Math.random</code>返回的是一个浮点数，但是我们只想要整数部分。我们的代码中使用波浪号操作符来完成这件事。波浪操作符在JavaScript中被用来对一个变量进行取反。<br><br>&emsp;&emsp;但是我们在这里并不关心取反，我们指向获取整数部分。因此我们还可以知道两次取反可以去掉一个浮点数的小数部分，因此<code>~~</code>的作用相当于<code>parseInt</code>：<br><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">12.34</span>, <span class="comment">// ~~a = 12</span></div><div class="line">    b = <span class="number">-1231.8754</span>, <span class="comment">// ~~b = -1231</span></div><div class="line">    c = <span class="number">3213.000001</span> <span class="comment">// ~~c = 3213;	</span></div><div class="line">~~a == <span class="built_in">parseInt</span>(a, <span class="number">10</span>); <span class="comment">// true</span></div><div class="line">~~b == <span class="built_in">parseInt</span>(b, <span class="number">10</span>); <span class="comment">// true</span></div><div class="line">~~c == <span class="built_in">parseInt</span>(c, <span class="number">10</span>); <span class="comment">// true</span></div></pre></td></tr></table></figure><br>&emsp;&emsp;当然，我们还有一种更加简洁的方法，使用<code>OR</code>操作符：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">~~a == <span class="number">0</span>|a == <span class="built_in">parseInt</span>(a, <span class="number">10</span>)</div><div class="line">~~b == <span class="number">0</span>|b == <span class="built_in">parseInt</span>(b, <span class="number">10</span>)</div><div class="line">~~c == <span class="number">0</span>|c == <span class="built_in">parseInt</span>(c, <span class="number">10</span>)</div></pre></td></tr></table></figure><br>&emsp;&emsp;最终，我们获得了一个位于<code>0</code>和<code>16777216</code>之间的随机整数，也就是我们想要的随机颜色。此时我们只需要使用<code>toString(16)</code>将它转化为十六进制数即可。<br><br>&emsp;&emsp;<strong>我的改进：</strong>原文由于随机数范围是<code>0</code>-<code>16777216</code>转化为16进制时有一定概率位数小于6，而导致无颜色值，比如<code>(~~(0.01*(1&lt;&lt;24))).toString(16) = “28f5c”</code>；所以本人对转化后的十六进制进行字符串运算+”000000”，然后再<code>substr（0，6）</code>截取前前六位便能避免出现随机数没有颜色值的bug</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>&emsp;&emsp;现在，你已经完全理解了前面的这一行代码中的各个部分。作为一个程序员，我们应该在完成工作之后多问自己几遍为什么，还有没有更好更简洁的方法。当然，最应该做的事情当然是多阅读程序代码，也许你就能从某一行代码中学到很多新东西。</p>
<p>&emsp;&emsp;<span style="background:#f5f5f5">本文参考自Learning much javascript from one line of code，英文原文地址<a href="http://arqex.com/939/learning-much-javascript-one-line-code" target="_blank" rel="external">http://arqex.com/939/learning-much-javascript-one-line-code</a></span><br><br>&emsp;&emsp;<span style="background:#f5f5f5">中文参考 <em>前端乱炖</em> 原文地址<a href="http://www.html-js.com/article/A-day-to-learn-from-a-line-of-code-inside-the-JavaScript-study-JavaScript" target="_blank" rel="external">(http://www.html-js.com/article/2315)</a></span></p>
]]></content>
      
        <categories>
            
            <category> 技术分享 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> console </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[从输入URL到页面加载完成的过程中都发生了什么]]></title>
      <url>https://dsb123dsb.github.io/2016/09/24/%E4%BB%8E%E8%BE%93%E5%85%A5URL%E5%88%B0%E9%A1%B5%E9%9D%A2%E5%8A%A0%E8%BD%BD%E5%AE%8C%E6%88%90%E7%9A%84%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%83%BD%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;从输入URL到页面加载完成的过程中都发生了什么。本篇文章主要是翻译stackoverflow的一个回答，他没有非常繁琐和底层的介绍，从寥寥的几个步骤中，我们就能了解各大概了。当然，如果想看更详细的内容，可以参考这篇文章：<a href="http://fex.baidu.com/blog/2014/05/what-happen/" target="_blank" rel="external">从输入 URL 到页面加载完成的过程中都发生了什么事情？</a></p>
<p>&emsp;&emsp;这篇文章的stackoverflow链接是<a href="http://stackoverflow.com/questions/2092527/what-happens-when-you-type-in-a-url-in-browser" target="_blank" rel="external">what happens when you type in a URL in browser</a></p>
<blockquote>
<p><code>1.browser checks cache; if requested object is in cache and is fresh, skip to #9</code></p>
</blockquote>
<p>&emsp;&emsp;1.浏览器检查缓存，若缓存中存储着要请求的内容，并且内容是最新的，直接跳转到第9步<br><a id="more"></a></p>
<blockquote>
<p><code>2.browser asks OS for server’s IP address</code></p>
</blockquote>
<p>&emsp;&emsp;2.浏览器请求操作系统（OS）解析服务器的IP地址</p>
<blockquote>
<p><code>3.OS makes a DNS lookup and replies the IP address to the browser</code></p>
</blockquote>
<p>&emsp;&emsp;3.操作系统做DNS解析，查找并返回IP地址给浏览器</p>
<blockquote>
<p><code>4.browser opens a TCP connection to server (this step is much more complex with HTTPS)</code></p>
</blockquote>
<p>&emsp;&emsp;4.浏览器与服务器建立TCP连接（若使用的是https协议，连接过程会更加的复杂）</p>
<blockquote>
<p><code>5.browser sends the HTTP request through TCP connection</code></p>
</blockquote>
<p>&emsp;&emsp;5.浏览器通过TCP连接发送http请求</p>
<blockquote>
<p><code>6.browser receives HTTP response and may close the TCP connection, or reuse it for another request</code></p>
</blockquote>
<p>&emsp;&emsp;6.浏览器接收到http响应后，关闭（断开）TCP连接或者利用TCP发送其他http请求</p>
<blockquote>
<p><code>7.browser checks if the response is a redirect (3xx result status codes), authorization request (401), error (4xx and 5xx), etc.; these are handled differently from normal responses (2xx)</code></p>
</blockquote>
<p>&emsp;&emsp;7.浏览器检测http响应是否是重定向（http状态码为3xx），授权响应（401），错误响应（4xx和5xx）等；浏览器对这些状态码的处理与正常的响应（2xx）是不同的</p>
<blockquote>
<p><code>8.if cacheable, response is stored in cache</code></p>
</blockquote>
<p>&emsp;&emsp;8.若可以被缓存，则将响应存储到缓存中</p>
<blockquote>
<p><code>9.browser decodes response (e.g. if it’s gzipped)</code></p>
</blockquote>
<p>&emsp;&emsp;9.浏览器解压响应（比如页面被gzip压缩过）</p>
<blockquote>
<p><code>10.browser determines what to do with response (e.g. is it a HTML page, is it an image, is it a sound clip?)</code></p>
</blockquote>
<p>&emsp;&emsp;10.浏览器决定以什么样式的方式解析http响应（比如他可能是个html网页，可能是一张图片，或者可能是个音频短片等）</p>
<blockquote>
<p><code>11.browser renders response, or offers a download dialog for unrecognized types</code></p>
</blockquote>
<p>&emsp;&emsp;11.若响应的是浏览器不能解析的格式，则下载该文件；否则浏览器就解析响应</p>
<p>&emsp;&emsp;其实，这些都是用很简介的语言概括了一下，这里的每个步骤都能展开很多的篇幅来进行讲解。同时，除了上面的这些，也还有其他的操作（比如：处理输入的地址，把当前页面添加到浏览器浏览历史中，给用户展示加载进度，通知插件和扩展，在页面下载的同时就开始进行渲染，流水线操作，保持跟踪连接等）</p>
]]></content>
      
        <categories>
            
            <category> 基础杂谈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> http </tag>
            
            <tag> 经典面题 </tag>
            
            <tag> browser </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTTP协议入门]]></title>
      <url>https://dsb123dsb.github.io/2016/09/24/HTTP%E5%8D%8F%E8%AE%AE%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<blockquote>
<p>HTTP 协议是互联网的基础协议，也是网页开发的必备知识，最新版本 HTTP/2 更是让它成为技术热点。本文介绍 HTTP 协议的历史演变和设计思路。</p>
</blockquote>
<p><img src="https://oci0xa33t.qnssl.com/http1.jpg" alt=""></p>
<h1 id="HTTP-0-9"><a href="#HTTP-0-9" class="headerlink" title="HTTP/0.9"></a>HTTP/0.9</h1><p>&emsp;&emsp;HTTP 是基于 TCP/IP 协议的<a href="http://www.ruanyifeng.com/blog/2012/05/internet_protocol_suite_part_i.html" target="_blank" rel="external"><strong>应用层协议</strong></a>。它不涉及数据包（packet）传输，主要规定了客户端和服务器之间的通信格式，默认使用80端口。</p>
<p>&emsp;&emsp;最早版本是1991年发布的0.9版。该版本极其简单，只有一个命令GET。</p>
<pre><code>GET /index.html
</code></pre><a id="more"></a>
<p>&emsp;&emsp;上面命令表示，TCP 连接（connection）建立后，客户端向服务器请求（request）网页<code>index.html</code>。</p>
<p>&emsp;&emsp;协议规定，服务器只能回应HTML格式的字符串，不能回应别的格式。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><br>&emsp;&emsp;服务器发送完毕，就关闭TCP连接。</p>
<h1 id="HTTP-1-0"><a href="#HTTP-1-0" class="headerlink" title="HTTP/1.0"></a>HTTP/1.0</h1><h2 id="emsp-简介"><a href="#emsp-简介" class="headerlink" title="&emsp;简介"></a>&emsp;简介</h2><p>&emsp;&emsp;1996年5月，HTTP/1.0 版本发布，内容大大增加。</p>
<p>&emsp;&emsp;首先，任何格式的内容都可以发送。这使得互联网不仅可以传输文字，还能传输图像、视频、二进制文件。这为互联网的大发展奠定了基础。</p>
<p>&emsp;&emsp;其次，除了GET命令，还引入了POST命令和HEAD命令，丰富了浏览器与服务器的互动手段。</p>
<p>&emsp;&emsp;再次，HTTP请求和回应的格式也变了。除了数据部分，每次通信都必须包括头信息（HTTP header），用来描述一些元数据。</p>
<p>&emsp;&emsp;其他的新增功能还包括状态码（<code>status code</code>）、多字符集支持、多部分发送（<code>multi-part type</code>）、权限（<code>authorization</code>）、缓存（<code>cache</code>）、内容编码（<code>content encoding</code>）等。</p>
<h2 id="emsp-请求格式"><a href="#emsp-请求格式" class="headerlink" title="&emsp;请求格式"></a>&emsp;请求格式</h2><p>&emsp;&emsp;下面是一个1.0版的HTTP请求的例子。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">GET / HTTP/<span class="number">1.0</span></div><div class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Macintosh; Intel Mac OS X <span class="number">10</span>_10_5)</div><div class="line">Accept: *<span class="comment">/*</span></div></pre></td></tr></table></figure><br>&emsp;&emsp;可以看到，这个格式与0.9版有很大变化。<br>&emsp;&emsp;第一行是请求命令，必须在尾部添加协议版本（<code>HTTP/1.0</code>）。后面就是多行头信息，描述客户端的情况。</p>
<h2 id="emsp-回应格式"><a href="#emsp-回应格式" class="headerlink" title="&emsp;回应格式"></a>&emsp;回应格式</h2><p>&emsp;&emsp;服务器的回应如下。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">HTTP/1.0 200 OK </div><div class="line">Content-Type: text/plain</div><div class="line">Content-Length: 137582</div><div class="line">Expires: Thu, 05 Dec 1997 16:00:00 GMT</div><div class="line">Last-Modified: Wed, 5 August 1996 15:55:28 GMT</div><div class="line">Server: Apache 0.84</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><br>&emsp;&emsp;应的格式是”头信息 + 一个空行（<code>\r\n</code>） + 数据”。其中，第一行是”协议版本 + 状态码（<code>status code</code>） + 状态描述”。</p>
<h2 id="emsp-Content-Type-字段"><a href="#emsp-Content-Type-字段" class="headerlink" title="&emsp;Content-Type 字段"></a>&emsp;Content-Type 字段</h2><p>&emsp;&emsp;关于字符的编码，1.0版规定，头信息必须是 ASCII 码，后面的数据可以是任何格式。因此，服务器回应的时候，必须告诉客户端，数据是什么格式，这就是Content-Type字段的作用。</p>
<p>&emsp;&emsp;下面是一些常见的Content-Type字段的值。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">text/plain</div><div class="line">text/html</div><div class="line">text/css</div><div class="line">image/jpeg</div><div class="line">image/png</div><div class="line">image/svg+xml</div><div class="line">audio/mp4</div><div class="line">video/mp4</div><div class="line">application/javascript</div><div class="line">application/pdf</div><div class="line">application/zip</div><div class="line">application/atom+xml</div></pre></td></tr></table></figure><br>&emsp;&emsp;这些数据类型总称为MIME type，每个值包括一级类型和二级类型，之间用斜杠分隔。</p>
<p>&emsp;&emsp;除了预定义的类型，厂商也可以自定义类型。</p>
<pre><code>application/vnd.debian.binary-package
</code></pre><p>&emsp;&emsp;上面的类型表明，发送的是Debian系统的二进制数据包。</p>
<p>&emsp;&emsp;<code>MIME type</code>还可以在尾部使用分号，添加参数。</p>
<pre><code>Content-Type: text/html; charset=utf-8
</code></pre><p>&emsp;&emsp;上面的类型表明，发送的是网页，而且编码是UTF-8。</p>
<p>&emsp;&emsp;客户端请求的时候，可以使用Accept字段声明自己可以接受哪些数据格式。</p>
<pre><code>Accept: */*
</code></pre><p>&emsp;&emsp;上面代码中，客户端声明自己可以接受任何格式的数据。</p>
<p>&emsp;&emsp;MIME type不仅用在HTTP协议，还可以用在其他地方，比如HTML网页。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span> /&gt;</span></div><div class="line"><span class="comment">&lt;!-- 等同于 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span> </div></pre></td></tr></table></figure></p>
<h2 id="emsp-Content-Encoding-字段"><a href="#emsp-Content-Encoding-字段" class="headerlink" title="&emsp;Content-Encoding 字段"></a>&emsp;Content-Encoding 字段</h2><p>&emsp;&emsp;由于发送的数据可以是任何格式，因此可以把数据压缩后再发送。<code>Content-Encoding</code>字段说明数据的压缩方法。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Content-Encoding: gzip</div><div class="line">Content-Encoding: compress</div><div class="line">Content-Encoding: deflate</div></pre></td></tr></table></figure><br>&emsp;&emsp;客户端在请求时，用Accept-Encoding字段说明自己可以接受哪些压缩方法。</p>
<pre><code>Accept-Encoding: gzip, deflate
</code></pre><h2 id="emsp-缺点"><a href="#emsp-缺点" class="headerlink" title="&emsp;缺点"></a>&emsp;缺点</h2><p>&emsp;&emsp;HTTP/1.0 版的主要缺点是，每个TCP连接只能发送一个请求。发送数据完毕，连接就关闭，如果还要请求其他资源，就必须再新建一个连接。</p>
<p>&emsp;&emsp;TCP连接的新建成本很高，因为需要客户端和服务器三次握手，并且开始时发送速率较慢（slow start）。所以，HTTP 1.0版本的性能比较差。随着网页加载的外部资源越来越多，这个问题就愈发突出了。</p>
<p>&emsp;&emsp;为了解决这个问题，有些浏览器在请求时，用了一个非标准的Connection字段。</p>
<pre><code>Connection: keep-alive
</code></pre><p>&emsp;&emsp;这个字段要求服务器不要关闭TCP连接，以便其他请求复用。服务器同样回应这个字段。</p>
<pre><code>Connection: keep-alive
</code></pre><p>&emsp;&emsp;一个可以复用的TCP连接就建立了，直到客户端或服务器主动关闭连接。但是，这不是标准字段，不同实现的行为可能不一致，因此不是根本的解决办法。</p>
<h1 id="HTTP-1-1"><a href="#HTTP-1-1" class="headerlink" title="HTTP/1.1"></a>HTTP/1.1</h1><p>&emsp;&emsp;1997年1月，HTTP/1.1 版本发布，只比 1.0 版本晚了半年。它进一步完善了 HTTP 协议，一直用到了20年后的今天，直到现在还是最流行的版本。</p>
<h2 id="emsp-持久连接"><a href="#emsp-持久连接" class="headerlink" title="&emsp;持久连接"></a>&emsp;持久连接</h2><p>&emsp;&emsp;1.1 版的最大变化，就是引入了持久连接（<code>persistent connection</code>），即TCP连接默认不关闭，可以被多个请求复用，不用声明<code>Connection: keep-alive</code>。</p>
<p>&emsp;&emsp;客户端和服务器发现对方一段时间没有活动，就可以主动关闭连接。不过，规范的做法是，客户端在最后一个请求时，发送<code>Connection: close</code>，明确要求服务器关闭TCP连接。</p>
<pre><code>Connection: close
</code></pre><p>&emsp;&emsp;目前，对于同一个域名，大多数浏览器允许同时建立6个持久连接。</p>
<h2 id="emsp-管道机制"><a href="#emsp-管道机制" class="headerlink" title="&emsp;管道机制"></a>&emsp;管道机制</h2><p>&emsp;&emsp;1.1 版还引入了管道机制（pipelining），即在同一个TCP连接里面，客户端可以同时发送多个请求。这样就进一步改进了HTTP协议的效率。</p>
<p>&emsp;&emsp;举例来说，客户端需要请求两个资源。以前的做法是，在同一个TCP连接里面，先发送A请求，然后等待服务器做出回应，收到后再发出B请求。管道机制则是允许浏览器同时发出A请求和B请求，但是服务器还是按照顺序，先回应A请求，完成后再回应B请求。</p>
<h2 id="emsp-Content-Length-字段"><a href="#emsp-Content-Length-字段" class="headerlink" title="&emsp;Content-Length 字段"></a>&emsp;Content-Length 字段</h2><p>&emsp;&emsp;一个TCP连接现在可以传送多个回应，势必就要有一种机制，区分数据包是属于哪一个回应的。这就是<code>Content-length</code>字段的作用，声明本次回应的数据长度。</p>
<pre><code>Content-Length: 3495
</code></pre><p>&emsp;&emsp;上面代码告诉浏览器，本次回应的长度是3495个字节，后面的字节就属于下一个回应了。</p>
<p>&emsp;&emsp;在1.0版中，<code>Content-Length</code>字段不是必需的，因为浏览器发现服务器关闭了TCP连接，就表明收到的数据包已经全了。</p>
<h2 id="emsp-分块传输编码"><a href="#emsp-分块传输编码" class="headerlink" title="&emsp;分块传输编码"></a>&emsp;分块传输编码</h2><p>&emsp;&emsp;使用<code>Content-Length</code>字段的前提条件是，服务器发送回应之前，必须知道回应的数据长度。</p>
<p>&emsp;&emsp;对于一些很耗时的动态操作来说，这意味着，服务器要等到所有操作完成，才能发送数据，显然这样的效率不高。更好的处理方法是，产生一块数据，就发送一块，采用”流模式”（stream）取代”缓存模式”（buffer）。</p>
<p>&emsp;&emsp;因此，1.1版规定可以不使用<code>Content-Length</code>字段，而使用”分块传输编码”（chunked transfer encoding）。只要请求或回应的头信息有Transfer-Encoding字段，就表明回应将由数量未定的数据块组成。</p>
<pre><code>Transfer-Encoding: chunked
</code></pre><p>&emsp;&emsp;每个非空的数据块之前，会有一个16进制的数值，表示这个块的长度。最后是一个大小为0的块，就表示本次回应的数据发送完了。下面是一个例子。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 200 OK</div><div class="line">Content-Type: text/plain</div><div class="line">Transfer-Encoding: chunked</div><div class="line"></div><div class="line">25</div><div class="line">This is the data in the first chunk</div><div class="line"></div><div class="line">1C</div><div class="line">and this is the second one</div><div class="line"></div><div class="line">3</div><div class="line">con</div><div class="line"></div><div class="line">8</div><div class="line">sequence</div><div class="line"></div><div class="line">0</div></pre></td></tr></table></figure></p>
<h2 id="emsp-其他功能"><a href="#emsp-其他功能" class="headerlink" title="&emsp;其他功能"></a>&emsp;其他功能</h2><p>&emsp;&emsp;1.1版还新增了许多动词方法：PUT、PATCH、HEAD、 OPTIONS、DELETE。<br>&emsp;&emsp;另外，客户端请求的头信息新增了Host字段，用来指定服务器的域名。</p>
<pre><code>Host: www.example.com
</code></pre><p>&emsp;&emsp;有了Host字段，就可以将请求发往同一台服务器上的不同网站，为虚拟主机的兴起打下了基础。</p>
<h2 id="emsp-缺点-1"><a href="#emsp-缺点-1" class="headerlink" title="&emsp;缺点"></a>&emsp;缺点</h2><p>&emsp;&emsp;虽然1.1版允许复用TCP连接，但是同一个TCP连接里面，所有的数据通信是按次序进行的。服务器只有处理完一个回应，才会进行下一个回应。要是前面的回应特别慢，后面就会有许多请求排队等着。这称为”队头堵塞”（Head-of-line blocking）。</p>
<p>&emsp;&emsp;为了避免这个问题，只有两种方法：一是减少请求数，二是同时多开持久连接。这导致了很多的网页优化技巧，比如合并脚本和样式表、将图片嵌入CSS代码、域名分片（domain sharding）等等。如果HTTP协议设计得更好一些，这些额外的工作是可以避免的。</p>
<h1 id="SPDY-协议"><a href="#SPDY-协议" class="headerlink" title="SPDY 协议"></a>SPDY 协议</h1><p>&emsp;&emsp;2009年，谷歌公开了自行研发的 SPDY 协议，主要解决 HTTP/1.1 效率不高的问题。</p>
<p>&emsp;&emsp;这个协议在Chrome浏览器上证明可行以后，就被当作 HTTP/2 的基础，主要特性都在 HTTP/2 之中得到继承。</p>
<h1 id="HTTP-2"><a href="#HTTP-2" class="headerlink" title="HTTP/2"></a>HTTP/2</h1><p>&emsp;&emsp;2015年，HTTP/2 发布。它不叫 HTTP/2.0，是因为标准委员会不打算再发布子版本了，下一个新版本将是 HTTP/3。</p>
<h2 id="emsp-二进制协议"><a href="#emsp-二进制协议" class="headerlink" title="&emsp;二进制协议"></a>&emsp;二进制协议</h2><p>&emsp;&emsp;HTTP/1.1 版的头信息肯定是文本（ASCII编码），数据体可以是文本，也可以是二进制。HTTP/2 则是一个彻底的二进制协议，头信息和数据体都是二进制，并且统称为”帧”（frame）：头信息帧和数据帧。</p>
<p>&emsp;&emsp;二进制协议的一个好处是，可以定义额外的帧。HTTP/2 定义了近十种帧，为将来的高级应用打好了基础。如果使用文本实现这种功能，解析数据将会变得非常麻烦，二进制解析则方便得多。</p>
<h2 id="emsp-多工"><a href="#emsp-多工" class="headerlink" title="&emsp;多工"></a>&emsp;多工</h2><p>&emsp;&emsp;HTTP/2 复用TCP连接，在一个连接里，客户端和浏览器都可以同时发送多个请求或回应，而且不用按照顺序一一对应，这样就避免了”队头堵塞”。</p>
<p>&emsp;&emsp;举例来说，在一个TCP连接里面，服务器同时收到了A请求和B请求，于是先回应A请求，结果发现处理过程非常耗时，于是就发送A请求已经处理好的部分， 接着回应B请求，完成后，再发送A请求剩下的部分。</p>
<p>&emsp;&emsp;这样双向的、实时的通信，就叫做多工（Multiplexing）。</p>
<h2 id="emsp-数据流"><a href="#emsp-数据流" class="headerlink" title="&emsp;数据流"></a>&emsp;数据流</h2><p>&emsp;&emsp;因为 HTTP/2 的数据包是不按顺序发送的，同一个连接里面连续的数据包，可能属于不同的回应。因此，必须要对数据包做标记，指出它属于哪个回应。</p>
<p>&emsp;&emsp;HTTP/2 将每个请求或回应的所有数据包，称为一个数据流（stream）。每个数据流都有一个独一无二的编号。数据包发送的时候，都必须标记数据流ID，用来区分它属于哪个数据流。另外还规定，客户端发出的数据流，ID一律为奇数，服务器发出的，ID为偶数。</p>
<p>&emsp;&emsp;数据流发送到一半的时候，客户端和服务器都可以发送信号（RST_STREAM帧），取消这个数据流。1.1版取消数据流的唯一方法，就是关闭TCP连接。这就是说，HTTP/2 可以取消某一次请求，同时保证TCP连接还打开着，可以被其他请求使用。</p>
<p>&emsp;&emsp;客户端还可以指定数据流的优先级。优先级越高，服务器就会越早回应。</p>
<h2 id="emsp-头信息压缩"><a href="#emsp-头信息压缩" class="headerlink" title="&emsp;头信息压缩"></a>&emsp;头信息压缩</h2><p>&emsp;&emsp;HTTP 协议不带有状态，每次请求都必须附上所有信息。所以，请求的很多字段都是重复的，比如Cookie和User Agent，一模一样的内容，每次请求都必须附带，这会浪费很多带宽，也影响速度。</p>
<p>&emsp;&emsp;HTTP/2 对这一点做了优化，引入了头信息压缩机制（header compression）。一方面，头信息使用gzip或compress压缩后再发送；另一方面，客户端和服务器同时维护一张头信息表，所有字段都会存入这个表，生成一个索引号，以后就不发送同样字段了，只发送索引号，这样就提高速度了。</p>
<h2 id="服务器推送"><a href="#服务器推送" class="headerlink" title="服务器推送"></a>服务器推送</h2><p>&emsp;&emsp;HTTP/2 允许服务器未经请求，主动向客户端发送资源，这叫做服务器推送（server push）。</p>
<p>&emsp;&emsp;常见场景是客户端请求一个网页，这个网页里面包含很多静态资源。正常情况下，客户端必须收到网页后，解析HTML源码，发现有静态资源，再发出静态资源请求。其实，服务器可以预期到客户端请求网页后，很可能会再请求静态资源，所以就主动把这些静态资源随着网页一起发给客户端了。</p>
<p>&emsp;&emsp;<span style="background:#f5f5f5">转载自 阮一峰：<a href="http://www.ruanyifeng.com/blog/2016/08/http.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2016/08/http.html</a></span></p>
]]></content>
      
        <categories>
            
            <category> 基础杂谈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> http </tag>
            
            <tag> web基础 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[浅谈Web缓存 ]]></title>
      <url>https://dsb123dsb.github.io/2016/09/24/%E6%B5%85%E8%B0%88Web%E7%BC%93%E5%AD%98/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>&emsp;&emsp;在前端开发中，性能一直都是被大家所重视的一点，然而判断一个网站的性能最直观的就是看网页打开的速度。其中提高网页反应速度的一个方式就是使用缓存。一个优秀的缓存策略可以缩短网页请求资源的距离，减少延迟，并且由于缓存文件可以重复利用，还可以减少带宽，降低网络负荷。那么下面我们就来看看服务器端缓存的原理。</p>
</blockquote>
<h1 id="缓存分类"><a href="#缓存分类" class="headerlink" title="缓存分类"></a>缓存分类</h1><p>&emsp;&emsp;web缓存分为很多种，比如数据库缓存、代理服务器缓存、还有我们熟悉的CDN缓存，以及浏览器缓存。对于太多文字的阅读其实我是拒绝的，于是就画了个图来解释下。</p>
<p>&emsp;&emsp;浏览器通过代理服务器向源服务器发起请求的原理如下图，</p>
<p><img src="https://oci0xa33t.qnssl.com/%E7%BC%93%E5%AD%981.PNG" alt=""></p>
<p>&emsp;&emsp;浏览器先向代理服务器发起Web请求，再将请求转发到源服务器。它属于共享缓存，所以很多地方都可以使用其缓存资源，因此对于节省流量有很大作用。<br><a id="more"></a><br>&emsp;&emsp;浏览器缓存是将文件保存在客户端，在同一个会话过程中会检查缓存的副本是否足够新，在后退网页时，访问过的资源可以从浏览器缓存中拿出使用。通过减少服务器处理请求的数量，用户将获得更快的体验</p>
<p>&emsp;&emsp;下面我就来着重讲下传说中的浏览器缓存。</p>
<h1 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h1><p>页面的缓存状态是由header决定的，header的参数有四种：Cache-Control、Expires、Last-modified、ETag</p>
<h2 id="emsp-Cache-Control："><a href="#emsp-Cache-Control：" class="headerlink" title="&emsp;Cache-Control："></a>&emsp;Cache-Control：</h2><p>&emsp;&emsp;1、<strong>max-age</strong>（单位为s）指定设置缓存最大的有效时间，定义的是时间长短。当浏览器向服务器发送请求后，在max-age这段时间里浏览器就不会再向服务器发送请求了。</p>
<p>&emsp;&emsp;我们来找个资源看下。比如shang.qq.com上的css资源，max-age=2592000，也就是说缓存有效期为2592000秒（也就是30天）。于是在30天内都会使用这个版本的资源，即使服务器上的资源发生了变化，浏览器也不会得到通知。max-age会覆盖掉Expires，后面会有讨论。</p>
<p><img src="https://oci0xa33t.qnssl.com/%E7%BC%93%E5%AD%982.png" alt=""></p>
<p>&emsp;&emsp;2、<strong>s-maxage</strong>（单位为s）同max-age，只用于共享缓存（比如CDN缓存）。<br>比如，当s-maxage=60时，在这60秒中，即使更新了CDN的内容，浏览器也不会进行请求。也就是说max-age用于普通缓存，而s-maxage用于代理缓存。如果存在s-maxage，则会覆盖掉max-age和Expires header。</p>
<p>&emsp;&emsp;3、<strong>public</strong> 指定响应会被缓存，并且在多用户间共享。也就是下图的意思。如果没有指定public还是private，则默认为public。</p>
<p><img src="https://oci0xa33t.qnssl.com/%E7%BC%93%E5%AD%983.png" alt=""></p>
<p>&emsp;&emsp;4、<strong>private</strong> 响应只作为私有的缓存（见下图），不能在用户间共享。如果要求HTTP认证，响应会自动设置为private。</p>
<p><img src="https://oci0xa33t.qnssl.com/%E7%BC%93%E5%AD%984.png" alt=""></p>
<p>&emsp;&emsp;5、<strong>no-cache</strong> 指定不缓存响应，表明资源不进行缓存，比如，</p>
<p><img src="https://oci0xa33t.qnssl.com/%E7%BC%93%E5%AD%985.png" alt=""></p>
<p>&emsp;&emsp;但是设置了no-cache之后并不代表浏览器不缓存，而是在缓存前要向服务器确认资源是否被更改。因此有的时候只设置no-cache防止缓存还是不够保险，还可以加上private指令，将过期时间设为过去的时间。</p>
<p>&emsp;&emsp;6、<strong>no-store</strong> 绝对禁止缓存，一看就知道如果用了这个命令当然就是不会进行缓存啦～每次请求资源都要从服务器重新获取。</p>
<p>&emsp;&emsp;7、<strong>must-revalidate</strong>指定如果页面是过期的，则去服务器进行获取。这个指令并不常用，就不做过多的讨论了。</p>
<h2 id="emsp-Expires"><a href="#emsp-Expires" class="headerlink" title="&emsp;Expires"></a>&emsp;Expires</h2><p>&emsp;&emsp;缓存过期时间，用来指定资源到期的时间，是服务器端的具体的时间点。也就是说，Expires=max-age + 请求时间，需要和Last-modified结合使用。但在上面我们提到过，cache-control的优先级更高。 Expires是Web服务器响应消息头字段，在响应http请求时告诉浏览器在过期时间前浏览器可以直接从浏览器缓存取数据，而无需再次请求。</p>
<p><img src="https://oci0xa33t.qnssl.com/%E7%BC%93%E5%AD%986.png" alt=""></p>
<h2 id="emsp-Last-modified"><a href="#emsp-Last-modified" class="headerlink" title="&emsp;Last-modified"></a>&emsp;Last-modified</h2><p>&emsp;&emsp;服务器端文件的最后修改时间，需要和cache-control共同使用，是检查服务器端资源是否更新的一种方式。当浏览器再次进行请求时，会向服务器传送If-Modified-Since报头，询问Last-Modified时间点之后资源是否被修改过。如果没有修改，则返回码为304，使用缓存；如果修改过，则再次去服务器请求资源，返回码和首次请求相同为200，资源为服务器最新资源。</p>
<p>&emsp;&emsp;如下图，最后修改时间为2014年12月19日星期五2点50分47秒</p>
<p><img src="https://oci0xa33t.qnssl.com/%E7%BC%93%E5%AD%987.png" alt=""></p>
<h2 id="emsp-ETag"><a href="#emsp-ETag" class="headerlink" title="&emsp;ETag"></a>&emsp;ETag</h2><p>&emsp;&emsp;据实体内容生成一段hash字符串，标识资源的状态，由服务端产生。浏览器会将这串字符串传回服务器，验证资源是否已经修改，如果没有修改，过程如下：</p>
<p><img src="https://oci0xa33t.qnssl.com/%E7%BC%93%E5%AD%988.png" alt=""></p>
<p>使用ETag可以解决Last-modified存在的一些问题：</p>
<p>&emsp;&emsp;a、某些服务器不能精确得到资源的最后修改时间，这样就无法通过最后修改时间判断资源是否更新 </p>
<p>&emsp;&emsp;b、如果资源修改非常频繁，在秒以下的时间内进行修改，而Last-modified只能精确到秒 </p>
<p>&emsp;&emsp;c、一些资源的最后修改时间改变了，但是内容没改变，使用ETag就认为资源还是没有修改的。</p>
<h1 id="使用缓存流程："><a href="#使用缓存流程：" class="headerlink" title="使用缓存流程："></a>使用缓存流程：</h1><p>还是用图说话，下面是我所总结的从浏览器请求到展示资源的过程：</p>
<p><img src="https://oci0xa33t.qnssl.com/%E7%BC%93%E5%AD%989.png" alt=""></p>
<h1 id="cache-control指令使用"><a href="#cache-control指令使用" class="headerlink" title="cache-control指令使用"></a>cache-control指令使用</h1><p>说了那么多cache-control的指令，那么如何选择使用哪些指令呢？我还是不说话==<br><img src="https://oci0xa33t.qnssl.com/%E7%BC%93%E5%AD%9810.png" alt=""></p>
<h1 id="额外的"><a href="#额外的" class="headerlink" title="额外的"></a>额外的</h1><p>&emsp;&emsp;除了开头提到的那么多缓存方式以外，还有一种我们都熟悉的缓存方式：LocalStorage和sessionStorage（好像是两种23333）。</p>
<p>&emsp;&emsp;LocalStorage是一种本地存储的公共资源，域名下很多应用共享这份资源会有风险；LocalStorage是以页面域名划分的，如果有多个等价域名之间的LocalStorage不互通，则会造成缓存多份浪费。</p>
<p>&emsp;&emsp;LocalStorage在PC上的兼容性不太好，而且当网络速度快、协商缓存响应快时使用localStorage的速度比不上304。并且不能缓存css文件。而移动端由于网速慢，使用localStorage要快于304。</p>
<p>&emsp;&emsp;在html中加载一个png图，首次加载的时候时间如下图，</p>
<p><img src="https://oci0xa33t.qnssl.com/%E7%BC%93%E5%AD%9811.png" alt=""></p>
<p>&emsp;&emsp;然而将图片使用了LocalStorage存储后，再次刷新后加载时间为0。</p>
<p><img src="https://oci0xa33t.qnssl.com/%E7%BC%93%E5%AD%9812.png" alt=""></p>
<p>&emsp;&emsp;而相对LocalStorage来说，SessionStorage的数据只存储到特定的会话中，不属于持久化的存储，所以关闭浏览器会清除数据。和localstorage具有相同的方法。</p>
<p>&emsp;&emsp;在前端开发中缓存是必不可少的，那么使用怎样的缓存方式更高效、让我们项目的性能更优，还是需要我们仔细斟酌。</p>
<p>&emsp;&emsp;<span style="background:#f5f5f5">转载自AlloyTeam：<a href="http://www.alloyteam.com/2016/03/discussion-on-web-caching/" target="_blank" rel="external">http://www.alloyteam.com/2016/03/discussion-on-web-caching/</a></span></p>
]]></content>
      
        <categories>
            
            <category> 基础杂谈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> http </tag>
            
            <tag> web基础 </tag>
            
            <tag> 缓存策略 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[事件委托技术原理和使用（js，jquery）]]></title>
      <url>https://dsb123dsb.github.io/2016/09/22/%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86%E5%92%8C%E4%BD%BF%E7%94%A8%EF%BC%88js%EF%BC%8Cjquery%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="事件委托技术原理（摘自英文davidwalsh）"><a href="#事件委托技术原理（摘自英文davidwalsh）" class="headerlink" title="事件委托技术原理（摘自英文davidwalsh）"></a>事件委托技术原理（摘自英文<a href="https://davidwalsh.name/event-delegate" target="_blank" rel="external">davidwalsh</a>）</h1><p>事件委托（event delegation），使用时间委托技术能让你避免对特定的每个节点添加事件监听器；相反，事件监听器是被添加到它们的父元素上。事件监听器会分析从子元素冒泡上来的事件，找到哪个是子元素的事件。</p>
<p>&emsp;首先，我们设定一个列表<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"parent-list"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"post-1"</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"post-2"</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"post-3"</span>&gt;</span>Item 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"post-4"</span>&gt;</span>Item 4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"post-5"</span>&gt;</span>Item 5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"post-6"</span>&gt;</span>Item 6<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;我们假设要给每个li添加不同的事件，你可以给每个独立的li元素添加事件监听器，但有时这些li元素可能会被删除，可能会有新增，监听它们的新增或删除事件将会是一场噩梦，尤其是当你的监听事件的代码放在应用的另一个地方时。但是，如果你将监听器安放到它们的父元素上呢？你如何能知道是那个子元素被点击了？<br><a id="more"></a><br>简单：当子元素的事件冒泡到父ul元素时，你可以检查事件对象的target属性，捕获真正被点击的节点元素的引用。下面是一段很简单的JavaScript代码，演示了事件委托的过程：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//找到父元素，添加监听器。。。</span></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'parent-list'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">	<span class="comment">//e.target是被点击的元素</span></div><div class="line">	<span class="comment">//如果被点击的是li元素</span></div><div class="line">	<span class="keyword">if</span>(e.target &amp;&amp; e.target.nodeName == <span class="string">'Li'</span>) &#123;</div><div class="line">		<span class="comment">//执行操作，，，</span></div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'List item'</span>, e.target.id.replace(<span class="string">'post-'</span>，Item), <span class="string">"was clicked"</span>)</div><div class="line">	&#125;</div><div class="line">&#125;，<span class="literal">false</span>)</div></pre></td></tr></table></figure><br>&emsp;&emsp;第一步是给父元素添加事件监听器。当有事件触发监听器时，检查事件的来源，排除非li子元素事件。如果y是一个li元素，我们就找到了目标！如果不是一个li元素，事件将被忽略。这个例子非常简单，UL和li是标准的父子搭配。让我们试验一些差异比较大的元素搭配。假设我们有一个父元素div，里面有很多子元素，但我们关心的是里面的一个带有”classA” CSS类的A标记：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取父元素DIV,添加监听器</span></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'myDiv'</span>).addEventListener(<span class="string">'click'</span>， <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">	<span class="comment">//e.target是被点击的节点</span></div><div class="line">	<span class="keyword">if</span> (e.target &amp;&amp; e.target.nodeName == <span class="string">'A'</span>) &#123;</div><div class="line">		<span class="comment">//获取css类名</span></div><div class="line">		<span class="keyword">var</span> classes = e.target.className.split(<span class="string">' '</span>);</div><div class="line">		<span class="keyword">if</span> (classes) &#123;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">var</span> x = <span class="number">0</span>; x&lt; <span class="class"><span class="keyword">class</span>.<span class="title">length</span></span>; x++) &#123;</div><div class="line">				if (class[x] == 'classA') &#123;</div><div class="line">					<span class="comment">//找到元素 可以操作了</span></div><div class="line">					<span class="built_in">console</span>.log(<span class="string">'Anchor element clicked'</span>);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;，<span class="literal">false</span>)</div></pre></td></tr></table></figure></p>
<p>上面这个例子中不仅比较了标签名，而且比较了CSS类名。虽然稍微复杂了一点，但还是很具代表性的。比如，如果某个A标记里有一个span标记，则这个span将会成为target元素。这个时候，我们需要上溯DOM树结构，找到里面是否有一个 A.classA 的元素</p>
<h1 id="jquery中事件委托优化（摘自）"><a href="#jquery中事件委托优化（摘自）" class="headerlink" title="jquery中事件委托优化（摘自）"></a>jquery中事件委托优化（<a href="http://www.jb51.net/article/28770.htm" target="_blank" rel="external">摘自</a>）</h1><p>&emsp;&emsp;jQuery为绑定和委托事件提供了.bind()、.live()和.delegate()方法。本文在讨论这几个方法内部实现的基础上，展示它们的优劣势及适用场合。事件委托就是事件目标自身不处理事件，而是把处理任务委托给其父元素或者祖先元素，甚至根元素（document）。</p>
<p>.bind</p>
<p><code>$(&quot;info_table td&quot;).bind(&quot;click&quot;, function(){/*显示更多信息*/})</code>;bind()只能给调用它的时候已经存在的元素绑定事件，不能给未来新增的元素绑定事件（类似于新来的员工收不到快递）</p>
<p>.live</p>
<p><code>$(&quot;#info_table td&quot;).live(&quot;click&quot;,function(){/*显示更多信息*/});</code>解决了.bind的问题，将事件绑定到document对象，能够处理后续添加元素的单击事件</p>
<p>缺点：</p>
<ol>
<li><p>$()函数会找到当前页面中的所有td元素并创建jQuery对象，但在确认事件目标时却不用这个td元素集合，而是使用选择符表达式与event.target或其祖先元素进行比较，因而生成这个jQuery对象会造成不必要的开销；</p>
</li>
<li><p>默认把事件绑定到$(document)元素，如果DOM嵌套结构很深，事件冒泡通过大量祖先元素会导致性能损失；只能放在直接选择的元素后面，不能在连缀的DOM遍历方法后面使用，即<code>$(&quot;#infotable td&quot;).live...</code>可以，但<code>$(&quot;#infotable&quot;).find(&quot;td&quot;).live...</code>不行；</p>
</li>
<li><p>收集td元素并创建jQuery对象，但实际操作的却是$(document)对象，令人费解。</p>
</li>
</ol>
<p>解决方法：</p>
<p>为了避免生成不必要的jQuery对象，可以使用一种叫做“早委托”的hack，即在<code>$(document).ready()</code>方法外部调用<code>.live()</code>：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</div><div class="line">$(<span class="string">"#info_table td"</span>).live(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">/*显示更多信息*/</span>&#125;);</div><div class="line">&#125;)(jQuery); </div></pre></td></tr></table></figure><br>在此，<br><code>(function($){...})(jQuery)</code>是一个“立即执行的匿名函数”，构成了一个闭包，可以防止命名冲突。在匿名函数内部，$参数引用jQuery对象。这个匿名函数不会等到DOM就绪就会执行。注意，使用这个hack时，脚本必须是在页面的head元素中链接和(或)执行的。之所以选择这个时机，因为这时候刚好document元素可用，而整个DOM还远未生成；如果把脚本放在结束的body标签前面，就没有意义了，因为那时候DOM已经完全可用了。</p>
<p>为了避免事件冒泡造成的性能损失，jQuery从1.4开始支持在使用<code>.live()</code>方法时配合使用一个上下文参数： </p>
<p><code>$(&quot;td&quot;,$(&quot;#info_table&quot;)[0]).live(&quot;click&quot;,function(){/*显示更多信息*/});</code>这样，“受托方”就从默认的<code>$(document)</code>变成了<code>$(&quot;#infotable&quot;)[0]</code>，节省了冒泡的旅程。不过，与<code>.live()</code>共同使用的上下文参数必须是一个单独的DOM元素，所以这里指定上下文对象时使用的是<code>$(&quot;#infotable&quot;)[0]</code>，即使用数组的索引操作符来取得的一个DOM元素。</p>
<p>.delegate()</p>
<p>如前所述，为了突破单一<code>.bind()</code>方法的局限性，实现事件委托，jQuery 1.3引入了<code>.live()</code>方法。后来，为解决“事件传播链”过长的问题，jQuery 1.4又支持为.live()方法指定上下文对象。而为了解决无谓生成元素集合的问题，jQuery 1.4.2干脆直接引入了一个新方法<code>.delegate()</code>。</p>
<p>使用<code>.delegate()</code>，前面的例子可以这样写： </p>
<p><code>$(&quot;#info_table&quot;).delegate(&quot;td&quot;,&quot;click&quot;,function(){/*显示更多信息*/});</code> 使用.delegate()有如下优点（或者说解决了.live()方法的如下问题）： </p>
<p>&emsp;&emsp;1.直接将目标元素选择符（”td”）、事件（”click”）及处理程序与“受拖方”$(“#info_table”)绑定，不额外收集元素、事件传播路径缩短、语义明确；</p>
<p>&emsp;&emsp;2.支持在连缀的DOM遍历方法后面调用，即支持<code>$(&quot;table&quot;).find(&quot;#info&quot;).delegate...</code>，支持精确控制；</p>
<p>可见，.delegate()方法是一个相对完美的解决方案。但在DOM结构简单的情况下，也可以使用<code>.live()</code>。提示：使用事件委托时，如果注册到目标元素上的其他事件处理程序使用<code>.stopPropagation()</code>阻止了事件传播，那么事件委托就会失效。 </p>
<p><strong>结论</strong> </p>
<p>在下列情况下，应该使用.live()或.delegate()，而不能使用.bind()： </p>
<p>1.为DOM中的很多元素绑定相同事件；2.为DOM中尚不存在的元素绑定事件； </p>
<p>PS：根据jQuery 1.7 Beta 1的发版说明，jQuery 1.7为了解决.bind()、.live()和.delegate()并存造成的不一致性问题，将会增加一对新的事件方法：.on()和.off()：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$(elems).on(events, selector, data, fn);</div><div class="line">$(elems).off(events, selector, fn);</div></pre></td></tr></table></figure><br>如果指定selector，则为事件委托；否则，就是常规绑定。新旧API对应如下：</p>
<p><img src="http://i.imgur.com/LlGU1PX.gif" alt=""></p>
]]></content>
      
        <categories>
            
            <category> 技术分享 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> 事件委托 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用console进行性能测试和计算代码运行时间]]></title>
      <url>https://dsb123dsb.github.io/2016/09/22/%E4%BD%BF%E7%94%A8console%E8%BF%9B%E8%A1%8C%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%92%8C%E8%AE%A1%E7%AE%97%E4%BB%A3%E7%A0%81%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4/</url>
      <content type="html"><![CDATA[<blockquote>
<p>对于前端开发人员，在开发过程中经常需要监控某些表达式或变量的值，如果使用用debugger会显得过于笨重，最常用的方法是会将值输出到控制台上方便调试。最常用的语句就是console.log(expression)了。</p>
</blockquote>
<h1 id="从早前一道阿里实习生招聘笔试题目入手"><a href="#从早前一道阿里实习生招聘笔试题目入手" class="headerlink" title="从早前一道阿里实习生招聘笔试题目入手"></a>从早前一道阿里实习生招聘笔试题目入手</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.time(<span class="string">'time span'</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.timeEnd(<span class="string">'time span'</span>);</div><div class="line">&#125;</div><div class="line">setTimeout(f1, <span class="number">100</span>);</div><div class="line">setTimeout(f2, <span class="number">200</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">waitForMs</span>(<span class="params">n</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> now = <span class="built_in">Date</span>.now();</div><div class="line">	<span class="keyword">while</span> (<span class="built_in">Date</span>.now() - now &lt; n) &#123;</div><div class="line">	&#125;<span class="comment">//空while</span></div><div class="line">&#125;</div><div class="line">waitForMs(<span class="number">500</span>);<span class="comment">//输出什么？</span></div><div class="line"><span class="comment">//-&gt;time span: 0ms</span></div><div class="line"><span class="comment">//实际测试输出的是 time span: 0.023ms</span></div><div class="line"><span class="comment">//实际的time是不确定的接近于0ms的，而不是0ms;</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="我们先说说关于console的高级操作，最后在一起分析这道题目"><a href="#我们先说说关于console的高级操作，最后在一起分析这道题目" class="headerlink" title="我们先说说关于console的高级操作，最后在一起分析这道题目"></a>我们先说说关于console的高级操作，最后在一起分析这道题目</h1><h2 id="emsp-trace"><a href="#emsp-trace" class="headerlink" title="&emsp;trace"></a>&emsp;trace</h2><h3 id="emsp-emsp-console-trace-用来追踪函数的调用过程"><a href="#emsp-emsp-console-trace-用来追踪函数的调用过程" class="headerlink" title="&emsp;&emsp;console.trace()用来追踪函数的调用过程"></a>&emsp;&emsp;console.trace()用来追踪函数的调用过程</h3><p>在大型项目尤其是框架开发中，函数的调用轨迹可以十分复杂，console.trace()方法可以将函数的被调用过程清楚地输出到控制台上。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">tracer</span>(<span class="params">a</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.trace();</div><div class="line">        <span class="keyword">return</span> a;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> bar(a);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">a</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> tracer(a);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> a = foo(<span class="string">'tracer'</span>);</div><div class="line">输出chrome:</div><div class="line"><span class="built_in">console</span>.trace()</div><div class="line">    tracer                          @ VM127:<span class="number">3</span></div><div class="line">    bar                             @ VM127:<span class="number">12</span></div><div class="line">    foo                             @ VM127:<span class="number">8</span></div><div class="line">    (anonymous <span class="function"><span class="keyword">function</span>)            @ <span class="title">VM127</span>:15</span></div><div class="line"><span class="function">    <span class="title">InjectedScript</span>.<span class="title">_evaluateOn</span>      @ <span class="title">VM116</span>:895</span></div><div class="line"><span class="function">    <span class="title">InjectedScript</span>.<span class="title">_evaluateAndWrap</span> @ <span class="title">VM116</span>:828</span></div><div class="line"><span class="function">    <span class="title">InjectedScript</span>.<span class="title">evaluate</span>         @ <span class="title">VM116</span>:694</span></div></pre></td></tr></table></figure></p>
<h2 id="emsp-table"><a href="#emsp-table" class="headerlink" title="&emsp;table"></a>&emsp;table</h2><h3 id="emsp-emsp-使用console将对象以表格呈现"><a href="#emsp-emsp-使用console将对象以表格呈现" class="headerlink" title="&emsp;&emsp;使用console将对象以表格呈现"></a>&emsp;&emsp;使用console将对象以表格呈现</h3><p>可将传入的对象，或数组以表格形式输出，相比传统树形输出，这种输出方案更适合内部元素排列整齐的对象或数组，不然可能会出现很多的undefined。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> people = &#123;</div><div class="line">    flora: &#123;</div><div class="line">        name: <span class="string">'floraLam'</span>,</div><div class="line">        age: <span class="string">'12'</span></div><div class="line">    &#125;,</div><div class="line">    john: &#123;</div><div class="line">        name: <span class="string">'johnMa'</span>,</div><div class="line">        age: <span class="string">'45'</span></div><div class="line">    &#125;,</div><div class="line">    ray:&#123;</div><div class="line">        name:<span class="string">'rayGuo'</span>,</div><div class="line">        age:<span class="string">'22'</span></div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><br>console.table(people);</p>
<table>
<thead>
<tr>
<th>(index)</th>
<th style="text-align:center">name</th>
<th style="text-align:right">age</th>
</tr>
</thead>
<tbody>
<tr>
<td>flora</td>
<td style="text-align:center">“floraLam”</td>
<td style="text-align:right">“12”</td>
</tr>
<tr>
<td>rjohn</td>
<td style="text-align:center">“johnMa”</td>
<td style="text-align:right">“45”</td>
</tr>
<tr>
<td>ray</td>
<td style="text-align:center">“rayGuo”</td>
<td style="text-align:right">“22”</td>
</tr>
</tbody>
</table>
<h2 id="emsp-time和timeEnd"><a href="#emsp-time和timeEnd" class="headerlink" title="&emsp;time和timeEnd"></a>&emsp;time和timeEnd</h2><h3 id="emsp-emsp-计算程序的执行时间（成对出现）"><a href="#emsp-emsp-计算程序的执行时间（成对出现）" class="headerlink" title="&emsp;&emsp;计算程序的执行时间（成对出现）"></a>&emsp;&emsp;计算程序的执行时间（成对出现）</h3><p>可以将成对的console.time()和console.timeEnd()之间代码的运行时间输出到控制台上<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.time(<span class="string">'计时器'</span>);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">1000</span>; j++) &#123;</div><div class="line">        <span class="comment">//空</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.timeEnd(<span class="string">'计时器'</span>);</div><div class="line"><span class="comment">//-&gt;计时器: 725.726ms</span></div></pre></td></tr></table></figure></p>
<h2 id="emsp-profile"><a href="#emsp-profile" class="headerlink" title="&emsp;profile"></a>&emsp;profile</h2><h3 id="emsp-emsp-使用console测试程序性能"><a href="#emsp-emsp-使用console测试程序性能" class="headerlink" title="&emsp;&emsp;使用console测试程序性能"></a>&emsp;&emsp;使用console测试程序性能</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">parent</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</div><div class="line">        childA()</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">childA</span>(<span class="params">j</span>) </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; j; i++) &#123;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.profile(<span class="string">'性能分析'</span>);</div><div class="line">parent();</div><div class="line"><span class="built_in">console</span>.profileEnd();</div></pre></td></tr></table></figure>
<p>现在说回笔试题目题目考察对console.time的了解和js单线程的理解。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.time(<span class="string">'time span'</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.timeEnd(<span class="string">'time span'</span>);</div><div class="line">&#125;</div><div class="line">setTimeout(f1, <span class="number">100</span>);</div><div class="line">setTimeout(f2, <span class="number">200</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">waitForMs</span>(<span class="params">n</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> now = <span class="built_in">Date</span>.now();</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">Date</span>.now() - now &lt; n) &#123;</div><div class="line">    &#125;<span class="comment">//空while</span></div><div class="line">&#125;</div><div class="line">waitForMs(<span class="number">500</span>);<span class="comment">//-&gt;time span: 0ms</span></div></pre></td></tr></table></figure><br>&emsp;&emsp;console.time()语句和console.timeEnd()语句是用来对程序的执行进行计时的。setTimeout()接受两个参数，第一个是回调函数，第二个是推迟执行的毫秒数。setTimeout()只是将事件插入了”任务队列”，必须等到当前代码（执行栈）执行完，主线程才会去执行它指定的回调函数。</p>
<p>&emsp;&emsp;因为f1和f2被都setTimeout事先设置的定时器装到一个事件队列里面。本来 f1应该在100ms后就要执行了，但是因为waitForMs占用了线程，而执行JavaScript是单线程的，所以就没办法在100ms后执行那个 f1，所以需要等500ms等waitForMs执行完，然后在执行f1和f2，这时候f1和f2就几乎同时执行了。<br>还有一种说法：setTimeout()的第二个参数告诉javascript再过多长时间把当前任务添加到队列中。</p>
<p><em>&emsp;&emsp;&emsp;&emsp;文章乃参考、转载其他博客所得，仅供自己学习作笔记使用！！！</em></p>
]]></content>
      
        <categories>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> console </tag>
            
            <tag> 技巧 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[利用reduce()统计字符串中字符出现的次数]]></title>
      <url>https://dsb123dsb.github.io/2016/09/20/%E5%88%A9%E7%94%A8reduce-%E7%BB%9F%E8%AE%A1%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E5%AD%97%E7%AC%A6%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0/</url>
      <content type="html"><![CDATA[<blockquote>
<p>有人说reduce()是js的二向箔，那我们就从统计字符串中字符出现的次数这个例子领略它的强大！</p>
</blockquote>
<h1 id="何为reduce-方法"><a href="#何为reduce-方法" class="headerlink" title="何为reduce()方法"></a>何为reduce()方法</h1><h2 id="Array-reduce-方法"><a href="#Array-reduce-方法" class="headerlink" title="Array reduce()方法:"></a>Array reduce()方法:</h2><p>&emsp;&emsp;此方法可以对数组中的所有元素调用指定的回调函数。该回调函数的返回值为累积结果，并且此返回值在下一次调用该回调函数时作为参数提供。最后的返回值是通过最后一次调用回调函数获得的累积结果。</p>
<h2 id="语法结构"><a href="#语法结构" class="headerlink" title="语法结构:"></a>语法结构:</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">array.reduce(callbackfn[, initial])</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="参数解析"><a href="#参数解析" class="headerlink" title="参数解析:"></a>参数解析:</h2><p>1.<code>callbackfn(previousValue,currentValue,currentIndex,array)</code>:必需，对数组的每个元素，reduce方法都会调用callbackfn一次。<br>  一个接受最多四个参数的函数:</p>
<ul>
<li>上一次调用回调函数获得的值。 如果向reduce方法提供initial，则在首次调用函数时，第一个参数为initial。</li>
</ul>
<ul>
<li>当前数组元素的值。</li>
</ul>
<ul>
<li>当前数组元素的数字索引。</li>
</ul>
<ul>
<li>当前数组对象。</li>
</ul>
<p>2.initial:可选，如果指定此参数，则它将用作初始值来启动累积。 第一次调用callbackfn函数会将此值作为参数而非数组值提供。</p>
<h2 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明:"></a>特别说明:</h2><p><strong>在第一次调用回调函数时，作为参数提供的值取决于 reduce 方法是否具有initial参数</strong>。</p>
<p>如果向reduce方法提供initial:</p>
<ul>
<li><p>previousValue参数为initial。</p>
</li>
<li><p>currentValue参数是数组中的第一个元素的值。</p>
</li>
</ul>
<p>如果未提供initial:</p>
<ul>
<li>previousValue参数是数组中的第一个元素的值。</li>
</ul>
<ul>
<li>currentValue参数是数组中的第二个元素的值</li>
</ul>
<h2 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例:"></a>代码实例:</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> num=<span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">appendCurrent</span> (<span class="params">previousValue,currentValue</span>)</span>&#123;</div><div class="line">  num++;</div><div class="line">  <span class="keyword">return</span> previousValue + <span class="string">":"</span> + currentValue;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> elements=[<span class="string">"antzone"</span>, <span class="string">"softwhy.com"</span>, <span class="number">3</span>, <span class="string">"青岛市南区"</span>];</div><div class="line"><span class="keyword">var</span> result=elements.reduce(appendCurrent);</div><div class="line"><span class="built_in">console</span>.log(num);<span class="comment">//3</span></div><div class="line"><span class="built_in">console</span>.log(result);<span class="comment">//antzone:softwhy.com:3:青岛市南区</span></div></pre></td></tr></table></figure>
<p>当没有传递initial参数，第一次调用previousValue是数组中的第一个元素，currentValue是数组中的第二个元素。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> num=<span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addRounded</span>(<span class="params">previousValue, currentValue</span>)</span>&#123;</div><div class="line">  num++;</div><div class="line">  <span class="keyword">return</span> previousValue + <span class="built_in">Math</span>.round(currentValue);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> numbers=[<span class="number">10.9</span>,<span class="number">15.4</span>,<span class="number">0.5</span>];</div><div class="line"><span class="keyword">var</span> result=numbers.reduce(addRounded,<span class="number">0</span>);</div><div class="line"><span class="built_in">console</span>.log(num);<span class="comment">//3</span></div><div class="line"><span class="built_in">console</span>.log(result);<span class="comment">//27</span></div></pre></td></tr></table></figure><br>&emsp;&emsp;如果传递initial参数，第一次执行的时候，previousValue参数为initial，currentValue参数是数组中的第一个元素的值。</p>
<h2 id="方法对数组的修改"><a href="#方法对数组的修改" class="headerlink" title="方法对数组的修改:"></a>方法对数组的修改:</h2><p>reduce()方法调用后是否可以修改数组对象的规则:</p>
<ul>
<li>不能够给数组添加元素。</li>
</ul>
<ul>
<li>添加元素以填充数组中缺少的元素，但是该索引元素尚未传递给回调函数。</li>
</ul>
<ul>
<li>可以修改数组元素，但是该元素尚未传递给回调函数。</li>
</ul>
<ul>
<li>可以从数组中删除元素，但是该元素必须是已传递给回调函数。</li>
</ul>
<h1 id="统计字符串中字符出现的次数"><a href="#统计字符串中字符出现的次数" class="headerlink" title="统计字符串中字符出现的次数"></a>统计字符串中字符出现的次数</h1><h2 id="正常遍历方法"><a href="#正常遍历方法" class="headerlink" title="正常遍历方法"></a>正常遍历方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">numInstring</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">  str=str.replace(<span class="regexp">/ /ig</span>,<span class="string">""</span>);<span class="comment">//去除空格</span></div><div class="line">  <span class="keyword">var</span> strArr=str.split(<span class="string">""</span>);<span class="comment">//获得每个字符组成的数组</span></div><div class="line">  <span class="keyword">var</span> result=[],beforeLength,afterLength,reg;<span class="comment">//声明变量</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> index = <span class="number">0</span>; index &lt; strArr.length; index++) &#123;</div><div class="line">    <span class="keyword">if</span> (str.indexOf(strArr[index]) != <span class="number">-1</span>) &#123;<span class="comment">//若存在指定字符</span></div><div class="line">      beforeLength=str.length;</div><div class="line">      reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(strArr[index], <span class="string">"ig"</span>);<span class="comment">//指定字符作为正则表达式条件</span></div><div class="line">      str=str.replace(reg,<span class="string">""</span>);<span class="comment">//从字符串中删去指定字符</span></div><div class="line">      afterLength=str.length;</div><div class="line">      result.push(strArr[index] + <span class="string">":"</span> + (beforeLength - afterLength));<span class="comment">//存入指定字符长度</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> result;<span class="comment">//返回数组</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> result=numInstring(<span class="string">"antzone"</span>);</div><div class="line"><span class="built_in">console</span>.log(result)<span class="comment">// ["a:1", "n:2", "t:1", "z:1", "o:1", "e:1"]</span></div></pre></td></tr></table></figure>
<p>可以看到上述代码十分冗长。</p>
<h2 id="reduce-方法"><a href="#reduce-方法" class="headerlink" title="reduce()方法"></a>reduce()方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//实例1</span></div><div class="line"><span class="keyword">var</span> str =<span class="string">"antzone"</span>;</div><div class="line"><span class="keyword">var</span> obj = str.split(<span class="string">""</span>).reduce(<span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> (x[y]++ || (x[y] = <span class="number">1</span>), x);</div><div class="line">&#125;, &#123;&#125;);</div><div class="line"><span class="built_in">console</span>.log(obj);<span class="comment">//Object &#123;a: 1, n: 2, t: 1, z: 1, o: 1…&#125;</span></div><div class="line"><span class="comment">//实例2</span></div><div class="line"><span class="keyword">var</span> arr = <span class="string">'abcdaabc'</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> info = arr</div><div class="line">    .split(<span class="string">''</span>)</div><div class="line">    .reduce(<span class="function">(<span class="params">p, k</span>) =&gt;</span> (p[k]++ || (p[k] = <span class="number">1</span>), p), &#123;&#125;);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(info); <span class="comment">//&#123; a: 3, b: 2, c: 2, d: 1 &#125;</span></div></pre></td></tr></table></figure>
<p>可以看到上面方法代码十分简单粗暴，通过上面对reduce的讲解，大家应该能完全理解了吧，值得一提的是这种方法最后返回的结果是个对象而不是前面那样的数组。<br><img src="http://i.imgur.com/CAyOl0H.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> 技术分享 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> 技巧 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[详解JSON和JSONP-非官方跨域数据交互协议]]]></title>
      <url>https://dsb123dsb.github.io/2016/09/08/%E8%AF%A6%E8%A7%A3JSON%E5%92%8CJSONP-%E9%9D%9E%E5%AE%98%E6%96%B9%E8%B7%A8%E5%9F%9F%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92%E5%8D%8F%E8%AE%AE/</url>
      <content type="html"><![CDATA[<blockquote>
<p>说到AJAX就会不可避免的面临两个问题，第一个是AJAX以何种格式来交换数据？第二个是跨域的需求如何解决。</p>
</blockquote>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&emsp;&emsp;由于Sencha Touch 2这种开发模式的特性，基本决定了它原生的数据交互行为几乎只能通过AJAX来实现。当然了，通过调用强大的PhoneGap插件然后打包，你可以实现100%的Socket通讯和本地数据库功能，又或者通过HTML5的WebSocket也可以实现与服务器的通讯和服务端推功能，但这两种方式都有其局限性，前者需要PhoneGap支持，后者要求用户设备必须支持WebSocket，因此都不能算是ST2的原生解决方案，原生的只有AJAX。</p>
<p><font style="background-image:-webkit-gradient( linear, left top, right top, color-stop(0, #f22), color-stop(0.15, #f2f), color-stop(0.3, #22f), color-stop(0.45, #2ff), color-stop(0.6, #2f2),color-stop(0.75, #2f2), color-stop(0.9, #ff2), color-stop(1,#f22) );">————————————————————————————————————————————————————–</font><br><a id="more"></a><br>&emsp;&emsp; 说到AJAX就会不可避免的面临两个问题，第一个是AJAX以何种格式来交换数据？第二个是跨域的需求如何解决？这两个问题目前都有不同的解决方案，比如数据可以用自定义字符串或者用XML来描述，跨域可以通过服务器端代理来解决。 但到目前为止最被推崇或者说首选的方案还是用JSON来传数据，<strong>靠JSONP来跨域</strong>。而这就是本文将要讲述的内容。 </p>
<p>&emsp;&emsp;JSON(JavaScript Object Notation)和JSONP(JSON with Padding)虽然只有一个字母的差别，但其实他们根本不是一回事儿：JSON是一种数据交换格式，而JSONP是一种依靠开发人员的聪明才智创造出的一种非官方跨域数据交互协议。我们拿最近比较火的谍战片来打个比方，JSON是地下党们用来书写和交换情报的“暗号”，而JSONP则是把用暗号书写的情报传递给自己同志时使用的接头方式。看到没？一个是描述信息的格式，一个是信息传递双方约定的方法。 </p>
<h1 id="什么是JSON"><a href="#什么是JSON" class="headerlink" title="什么是JSON"></a>什么是JSON</h1><p>  &emsp;&emsp;前面简单说了一下，JSON是一种基于文本的数据交换方式，或者叫做数据描述格式，你是否该选用他首先肯定要关注它所拥有的优点。</p>
<p><img src="https://oci0xa33t.qnssl.com/json" alt=""></p>
<h2 id="JSON的优点："><a href="#JSON的优点：" class="headerlink" title="JSON的优点："></a><strong>JSON</strong>的优点：</h2><p>1、基于纯文本，跨平台传递极其简单；<br>2、Javascript原生支持，后台语言几乎全部支持；<br>3、轻量级数据格式，占用字符数量极少，特别适合互联网传递；<br>4、可读性较强，虽然比不上XML那么一目了然，但在合理的依次缩进之后还是很容易识别的；<br>5、容易编写和解析，当然前提是你要知道数据结构；<br>JSON的缺点当然也有，但在作者看来实在是无关紧要的东西，所以不再单独说明。 </p>
<h2 id="JSON的格式或者叫规则："><a href="#JSON的格式或者叫规则：" class="headerlink" title="JSON的格式或者叫规则："></a>JSON的格式或者叫规则：</h2><p>&emsp;&emsp;JSON能够以非常简单的方式来描述数据结构，XML能做的它都能做，因此在跨平台方面两者完全不分伯仲。<br>&emsp;&emsp;1、JSON只有两种数据类型描述符，大括号{}和方括号[]，其余英文冒号:是映射符，英文逗号,是分隔符，英文双引号””是定义符。<br>&emsp;&emsp;2、大括号{}用来描述一组“不同类型的无序键值对集合”（每个键值对可以理解为OOP的属性描述），方括号[]用来描述一组“相同类型的有序数据集合”（可对应OOP的数组）。<br>&emsp;&emsp;3、上述两种集合中若有多个子项，则通过英文逗号,进行分隔。<br>&emsp;&emsp;4、键值对以英文冒号:进行分隔，并且建议键名都加上英文双引号””，以便于不同语言的解析。<br>&emsp;&emsp;5、JSON内部常用数据类型无非就是字符串、数字、布尔、日期、null 这么几个，字符串必须用双引号引起来，其余的都不用，日期类型比较特殊，这里就不展开讲述了，只是建议如果客户端没有按日期排序功能需求的话，那么把日期时间直接作为字符串传递就好，可以省去很多麻烦。 </p>
<h2 id="JSON实例："><a href="#JSON实例：" class="headerlink" title="JSON实例："></a>JSON实例：</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">		<span class="comment">// 描述一个人 </span></div><div class="line"><span class="keyword">var</span> person = &#123; </div><div class="line"><span class="string">"Name"</span>: <span class="string">"Bob"</span>, </div><div class="line"><span class="string">"Age"</span>: <span class="number">32</span>, </div><div class="line"><span class="string">"Company"</span>: <span class="string">"IBM"</span>, </div><div class="line"><span class="string">"Engineer"</span>: <span class="literal">true</span> </div><div class="line">&#125; </div><div class="line"><span class="comment">// 获取这个人的信息 </span></div><div class="line"><span class="keyword">var</span> personAge = person.Age; </div><div class="line"><span class="comment">// 描述几个人 </span></div><div class="line"><span class="keyword">var</span> members = [ </div><div class="line">&#123; </div><div class="line"><span class="string">"Name"</span>: <span class="string">"Bob"</span>, </div><div class="line"><span class="string">"Age"</span>: <span class="number">32</span>, </div><div class="line"><span class="string">"Company"</span>: <span class="string">"IBM"</span>, </div><div class="line"><span class="string">"Engineer"</span>: <span class="literal">true</span> </div><div class="line">&#125;, </div><div class="line">&#123; </div><div class="line"><span class="string">"Name"</span>: <span class="string">"John"</span>, </div><div class="line"><span class="string">"Age"</span>: <span class="number">20</span>, </div><div class="line"><span class="string">"Company"</span>: <span class="string">"Oracle"</span>, </div><div class="line"><span class="string">"Engineer"</span>: <span class="literal">false</span> </div><div class="line">&#125;, </div><div class="line">&#123; </div><div class="line"><span class="string">"Name"</span>: <span class="string">"Henry"</span>, </div><div class="line"><span class="string">"Age"</span>: <span class="number">45</span>, </div><div class="line"><span class="string">"Company"</span>: <span class="string">"Microsoft"</span>, </div><div class="line"><span class="string">"Engineer"</span>: <span class="literal">false</span> </div><div class="line">&#125; </div><div class="line">] </div><div class="line"><span class="comment">// 读取其中John的公司名称 </span></div><div class="line"><span class="keyword">var</span> johnsCompany = members[<span class="number">1</span>].Company; </div><div class="line"><span class="comment">// 描述一次会议 </span></div><div class="line"><span class="keyword">var</span> conference = &#123; </div><div class="line"><span class="string">"Conference"</span>: <span class="string">"Future Marketing"</span>, </div><div class="line"><span class="string">"Date"</span>: <span class="string">"2012-6-1"</span>, </div><div class="line"><span class="string">"Address"</span>: <span class="string">"Beijing"</span>, </div><div class="line"><span class="string">"Members"</span>: </div><div class="line">[ </div><div class="line">&#123; </div><div class="line"><span class="string">"Name"</span>: <span class="string">"Bob"</span>, </div><div class="line"><span class="string">"Age"</span>: <span class="number">32</span>, </div><div class="line"><span class="string">"Company"</span>: <span class="string">"IBM"</span>, </div><div class="line"><span class="string">"Engineer"</span>: <span class="literal">true</span> </div><div class="line">&#125;, </div><div class="line">&#123; </div><div class="line"><span class="string">"Name"</span>: <span class="string">"John"</span>, </div><div class="line"><span class="string">"Age"</span>: <span class="number">20</span>, </div><div class="line"><span class="string">"Company"</span>: <span class="string">"Oracle"</span>, </div><div class="line"><span class="string">"Engineer"</span>: <span class="literal">false</span> </div><div class="line">&#125;, </div><div class="line">&#123; </div><div class="line"><span class="string">"Name"</span>: <span class="string">"Henry"</span>, </div><div class="line"><span class="string">"Age"</span>: <span class="number">45</span>, </div><div class="line"><span class="string">"Company"</span>: <span class="string">"Microsoft"</span>, </div><div class="line"><span class="string">"Engineer"</span>: <span class="literal">false</span> </div><div class="line">&#125; </div><div class="line">] </div><div class="line">&#125; </div><div class="line"><span class="comment">// 读取参会者Henry是否工程师 </span></div><div class="line"><span class="keyword">var</span> henryIsAnEngineer = conference.Members[<span class="number">2</span>].Engineer; </div></pre></td></tr></table></figure>
<h1 id="什么是JSONP"><a href="#什么是JSONP" class="headerlink" title="什么是JSONP"></a>什么是JSONP</h1><p><img src="https://oci0xa33t.qnssl.com/jsonp" alt=""></p>
<h2 id="JSONP是怎么产生的："><a href="#JSONP是怎么产生的：" class="headerlink" title="JSONP是怎么产生的："></a>JSONP是怎么产生的：</h2><p>&emsp;&emsp;其实网上关于JSONP的讲解有很多，但却千篇一律，而且云里雾里，对于很多刚接触的人来讲理解起来有些困难，小可不才，试着用自己的方式来阐释一下这个问题，看看是否有帮助。<br>&emsp;&emsp;1、一个众所周知的问题，Ajax直接请求普通文件存在跨域无权限访问的问题，甭管你是静态页面、动态网页、web服务、WCF，只要是跨域请求，一律不准；<br>&emsp;&emsp;2、不过我们又发现，Web页面上调用js文件时则不受是否跨域的影响（不仅如此，我们还发现凡是拥有”src”这个属性的标签都拥有跨域的能力，比如<code>&lt;script&gt;、&lt;img&gt;、&lt;iframe&gt;</code>；<br>&emsp;&emsp;3、于是可以判断，当前阶段如果想通过纯web端（ActiveX控件、服务端代理、属于未来的HTML5之Websocket等方式不算）跨域访问数据就只有一种可能，那就是在远程服务器上设法把数据装进js格式的文件里，供客户端调用和进一步处理；<br>&emsp;&emsp;4、恰巧我们已经知道有一种叫做JSON的纯字符数据格式可以简洁的描述复杂数据，更妙的是JSON还被js原生支持，所以在客户端几乎可以随心所欲的处理这种格式的数据；<br>&emsp;&emsp;5、这样子解决方案就呼之欲出了，web客户端通过与调用脚本一模一样的方式，来调用跨域服务器上动态生成的js格式文件（一般以JSON为后缀），显而易见，服务器之所以要动态生成JSON文件，目的就在于把客户端需要的数据装入进去。<br>&emsp;&emsp;6、客户端在对JSON文件调用成功之后，也就获得了自己所需的数据，剩下的就是按照自己需求进行处理和展现了，这种获取远程数据的方式看起来非常像AJAX，但其实并不一样。<br>&emsp;&emsp;7、为了便于客户端使用数据，逐渐形成了一种非正式传输协议，人们把它称作JSONP，该协议的一个要点就是允许用户传递一个callback参数给服务端，然后服务端返回数据时会将这个callback参数作为函数名来包裹住JSON数据，这样客户端就可以随意定制自己的函数来自动处理返回数据了。<br>如果对于callback参数如何使用还有些模糊的话，我们后面会有具体的实例来讲解。</p>
<h2 id="JSONP的客户端具体实现"><a href="#JSONP的客户端具体实现" class="headerlink" title="JSONP的客户端具体实现"></a>JSONP的客户端具体实现</h2><p>&emsp;&emsp;不管jQuery也好，ExtJs也罢，又或者是其他支持jsonp的框架，他们幕后所做的工作都是一样的，下面我来循序渐进的说明一下jsonp在客户端的实现：</p>
<p>&emsp;&emsp;1、我们知道，哪怕跨域js文件中的代码（当然指符合web脚本安全策略的），web页面也是可以无条件执行的。<br>&emsp;&emsp;远程服务器remoteserver.com根目录下有个remote.js文件代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alert(<span class="string">'我是远程文件'</span>)</div></pre></td></tr></table></figure><br>&emsp;&emsp;本地服务器localserver.com下有个jsonp.html页面代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://remoteserver.com/   remote.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span> </div></pre></td></tr></table></figure><br>毫无疑问，页面将会弹出一个提示窗体，显示跨域调用成功</p>
<p>&emsp;&emsp;2、现在我们在jsonp.html页面定义一个函数，然后在远程remote.js中传入数据进行调用。<br>&emsp;&emsp;jsonp.html页面代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"> </span></div><div class="line"><span class="javascript"><span class="keyword">var</span> localHandler = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123; </span></div><div class="line"><span class="javascript">   alert(<span class="string">'我是本地函数，可以被跨域的remote.js文件调用，远程js带来的数据是：'</span> + data.result); </span></div><div class="line"><span class="undefined">&#125;; </span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://remoteserver.com/remote.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><br>&emsp;&emsp;remote.js文件代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">localHandler(&#123;<span class="string">"result"</span>:<span class="string">"我是远程js带来的数据"</span>&#125;);</div></pre></td></tr></table></figure><br>运行之后查看结果，页面成功弹出提示窗口，显示本地函数被跨域的远程js调用成功，并且还接收到了远程js带来的数据。很欣喜，跨域远程获取数据的目的基本实现了，但是又一个问题出现了，我怎么让远程js知道它应该调用的本地函数叫什么名字呢？毕竟是jsonp的服务者都要面对很多服务对象，而这些服务对象各自的本地函数都不相同啊？我们接着往下看。</p>
<p>&emsp;&emsp;3、聪明的开发者很容易想到，只要服务端提供的js脚本是动态生成的就行了呗，这样调用者可以传一个参数过去告诉服务端“我想要一段调用XXX函数的js代码，请你返回给我”，于是服务器就可以按照客户端的需求来生成js脚本并响应了。 </p>
<p>　　看jsonp.html页面的代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"> </span></div><div class="line"><span class="javascript">	<span class="comment">// 得到航班信息查询结果后的回调函数 </span></span></div><div class="line"><span class="javascript">	<span class="keyword">var</span> flightHandler = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123; </span></div><div class="line"><span class="javascript">	alert(<span class="string">'你查询的航班结果是：票价 '</span> + data.price + <span class="string">' 元，'</span> + <span class="string">'余票 '</span> + data.tickets + <span class="string">' 张。'</span>); </span></div><div class="line"><span class="undefined">	&#125;; </span></div><div class="line"><span class="javascript">	<span class="comment">// 提供jsonp服务的url地址（不管是什么类型的地址，最终生成的返回值都是一段javascript代码） </span></span></div><div class="line"><span class="javascript">	<span class="keyword">var</span> url = <span class="string">"http://flightQuery.com/jsonp/flightResult.aspx?code=CA1998&amp;callback=flightHandler"</span>; </span></div><div class="line"><span class="javascript">	<span class="comment">// 创建script标签，设置其属性 </span></span></div><div class="line"><span class="javascript">	<span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>); </span></div><div class="line"><span class="javascript">	script.setAttribute(<span class="string">'src'</span>, url); </span></div><div class="line"><span class="javascript">	<span class="comment">// 把script标签加入head，此时调用开始 </span></span></div><div class="line"><span class="javascript">	<span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>].appendChild(script); </span></div><div class="line"><span class="undefined">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span> </div></pre></td></tr></table></figure><br>这次的代码变化比较大，不再直接把远程js文件写死，而是编码实现动态查询，而这也正是jsonp客户端实现的核心部分，本例中的重点也就在于如何完成jsonp调用的全过程。<br>&emsp;&emsp;我们看到调用的url中传递了一个code参数，告诉服务器我要查的是CA1998次航班的信息，而callback参数则告诉服务器，我的本地回调函数叫做flightHandler，所以请把查询结果传入这个函数中进行调用。<br>&emsp;&emsp;OK，服务器很聪明，这个叫做flightResult.aspx的页面生成了一段这样的代码提供给jsonp.html（服务端的实现这里就不演示了，与你选用的语言无关，说到底就是拼接字符串）：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">flightHandler(&#123; </div><div class="line"><span class="string">"code"</span>: <span class="string">"CA1998"</span>, </div><div class="line"><span class="string">"price"</span>: <span class="number">1780</span>, </div><div class="line"><span class="string">"tickets"</span>: <span class="number">5</span> </div><div class="line">&#125;);　</div></pre></td></tr></table></figure><br>我们看到，传递给flightHandler函数的是一个json，它描述了航班的基本信息。运行一下页面，成功弹出提示窗口，jsonp的执行全过程顺利完成！ </p>
<p>&emsp;&emsp;4、到这里为止的话，相信你已经能够理解jsonp的客户端实现原理了吧？剩下的就是如何把代码封装一下，以便于与用户界面交互，从而实现多次和重复调用。 </p>
<p>&emsp;&emsp;什么？你用的是jQuery，想知道jQuery如何实现jsonp调用？好吧，那我就好人做到底，再给你一段jQuery使用jsonp的代码（我们依然沿用上面那个航班信息查询的例子，假定返回jsonp结果不变）：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span> &gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Untitled Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">jquery.min.js</span>"&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"> </span></div><div class="line"><span class="javascript">	jQuery(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span></div><div class="line"><span class="javascript">	$.ajax(&#123; </span></div><div class="line"><span class="javascript">	type: <span class="string">"get"</span>, </span></div><div class="line"><span class="javascript">	<span class="keyword">async</span>: <span class="literal">false</span>, </span></div><div class="line"><span class="javascript">	url: <span class="string">"http://flightQuery.com/jsonp/flightResult.aspx?code=CA1998"</span>, </span></div><div class="line"><span class="javascript">	dataType: <span class="string">"jsonp"</span>, </span></div><div class="line"><span class="javascript">	jsonp: <span class="string">"callback"</span>,<span class="comment">//传递给请求处理程序或页面的，用以获得jsonp回调函数名的参数名(一般默认为:callback) </span></span></div><div class="line"><span class="javascript">	jsonpCallback:<span class="string">"flightHandler"</span>,<span class="comment">//自定义的jsonp回调函数名称，默认为jQuery自动生成的随机函数名，也可以写"?"，jQuery会自动为你处理数据 </span></span></div><div class="line"><span class="javascript">	success: <span class="function"><span class="keyword">function</span>(<span class="params">json</span>)</span>&#123; </span></div><div class="line"><span class="javascript">	alert(<span class="string">'您查询到航班信息：票价： '</span> + json.price + <span class="string">' 元，余票： '</span> + json.tickets + <span class="string">' 张。'</span>); </span></div><div class="line"><span class="undefined">	&#125;, </span></div><div class="line"><span class="javascript">	error: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span></div><div class="line"><span class="javascript">	alert(<span class="string">'fail'</span>); </span></div><div class="line"><span class="undefined">	&#125; </span></div><div class="line"><span class="undefined">	&#125;); </span></div><div class="line"><span class="undefined">	&#125;); </span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span> </div></pre></td></tr></table></figure><br>&emsp;&emsp;是不是有点奇怪？为什么我这次没有写flightHandler这个函数呢？而且竟然也运行成功了！哈哈，这就是jQuery的功劳了，jquery在处理jsonp类型的ajax时（还是忍不住吐槽，虽然jquery也把jsonp归入了ajax，但其实它们真的不是一回事儿），自动帮你生成回调函数并把数据取出来供success属性方法来调用，是不是很爽呀？</p>
]]></content>
      
        <categories>
            
            <category> 技术分享 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> json </tag>
            
            <tag> jsonp </tag>
            
            <tag> ajax </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[常用颜色及对应十六进制和Rgb表示]]></title>
      <url>https://dsb123dsb.github.io/2016/08/25/%E5%B8%B8%E7%94%A8%E9%A2%9C%E8%89%B2%E5%8F%8A%E5%AF%B9%E5%BA%94%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E5%92%8CRgb%E8%A1%A8%E7%A4%BA/</url>
      <content type="html"><![CDATA[<p><font style="background-image:-webkit-gradient( linear, left top, right top, color-stop(0, #f22), color-stop(0.15, #f2f), color-stop(0.3, #22f), color-stop(0.45, #2ff), color-stop(0.6, #2f2),color-stop(0.75, #2f2), color-stop(0.9, #ff2), color-stop(1,#f22) );">————————————————————————————————————————————————————–</font><br><a id="more"></a></p>
<table><tbody><tr><th>颜色名</th><th>十六进制颜色值</th><th>颜色</th></tr><tr><td><font color="AliceBlue">AliceBlue</font></td><td><font color="#F0F8FF">#F0F8FF</font></td><td bgcolor="#F0F8FF">rgb(240, 248, 255)</td></tr><tr><td><font color="AntiqueWhite">AntiqueWhite</font></td><td><font color="#FAEBD7">#FAEBD7</font></td><td bgcolor="#FAEBD7">rgb(250, 235, 215)</td></tr><tr><td><font color="Aqua">Aqua</font></td><td><font color="#00FFFF">#00FFFF</font></td><td bgcolor="#00FFFF">rgb(0, 255, 255)</td></tr><tr><td><font color="Aquamarine">Aquamarine</font></td><td><font color="#7FFFD4">#7FFFD4</font></td><td bgcolor="#7FFFD4">rgb(127, 255, 212)</td></tr><tr><td><font color="Azure">Azure</font></td><td><font color="#F0FFFF">#F0FFFF</font></td><td bgcolor="#F0FFFF">rgb(240, 255, 255)</td></tr><tr><td><font color="Beige">Beige</font></td><td><font color="#F5F5DC">#F5F5DC</font></td><td bgcolor="#F5F5DC">rgb(245, 245, 220)</td></tr><tr><td><font color="Bisque">Bisque</font></td><td><font color="#FFE4C4">#FFE4C4</font></td><td bgcolor="#FFE4C4">rgb(255, 228, 196)</td></tr><tr><td><font color="Black">Black</font></td><td><font color="#000000">#000000</font></td><td bgcolor="#000000">rgb(0, 0, 0)</td></tr><tr><td><font color="BlanchedAlmond">BlanchedAlmond</font></td><td><font color="#FFEBCD">#FFEBCD</font></td><td bgcolor="#FFEBCD">rgb(255, 235, 205)</td></tr><tr><td><font color="Blue">Blue</font></td><td><font color="#0000FF">#0000FF</font></td><td bgcolor="#0000FF">rgb(0, 0, 255)</td></tr><tr><td><font color="BlueViolet">BlueViolet</font></td><td><font color="#8A2BE2">#8A2BE2</font></td><td bgcolor="#8A2BE2">rgb(138, 43, 226)</td></tr><tr><td><font color="Brown">Brown</font></td><td><font color="#A52A2A">#A52A2A</font></td><td bgcolor="#A52A2A">rgb(165, 42, 42)</td></tr><tr><td><font color="BurlyWood">BurlyWood</font></td><td><font color="#DEB887">#DEB887</font></td><td bgcolor="#DEB887">rgb(222, 184, 135)</td></tr><tr><td><font color="CadetBlue">CadetBlue</font></td><td><font color="#5F9EA0">#5F9EA0</font></td><td bgcolor="#5F9EA0">rgb(95, 158, 160)</td></tr><tr><td><font color="Chartreuse">Chartreuse</font></td><td><font color="#7FFF00">#7FFF00</font></td><td bgcolor="#7FFF00">rgb(127, 255, 0)</td></tr><tr><td><font color="Chocolate">Chocolate</font></td><td><font color="#D2691E">#D2691E</font></td><td bgcolor="#D2691E">rgb(210, 105, 30)</td></tr><tr><td><font color="Coral">Coral</font></td><td><font color="#FF7F50">#FF7F50</font></td><td bgcolor="#FF7F50">rgb(255, 127, 80)</td></tr><tr><td><font color="CornflowerBlue">CornflowerBlue</font></td><td><font color="#6495ED">#6495ED</font></td><td bgcolor="#6495ED">rgb(100, 149, 237)</td></tr><tr><td><font color="Cornsilk">Cornsilk</font></td><td><font color="#FFF8DC">#FFF8DC</font></td><td bgcolor="#FFF8DC">rgb(255, 248, 220)</td></tr><tr><td><font color="Crimson">Crimson</font></td><td><font color="#DC143C">#DC143C</font></td><td bgcolor="#DC143C">rgb(220, 20, 60)</td></tr><tr><td><font color="Cyan">Cyan</font></td><td><font color="#00FFFF">#00FFFF</font></td><td bgcolor="#00FFFF">rgb(0, 255, 255)</td></tr><tr><td><font color="DarkBlue">DarkBlue</font></td><td><font color="#00008B">#00008B</font></td><td bgcolor="#00008B">rgb(0, 0, 139)</td></tr><tr><td><font color="DarkCyan">DarkCyan</font></td><td><font color="#008B8B">#008B8B</font></td><td bgcolor="#008B8B">rgb(0, 139, 139)</td></tr><tr><td><font color="DarkGoldenRod">DarkGoldenRod</font></td><td><font color="#B8860B">#B8860B</font></td><td bgcolor="#B8860B">rgb(184, 134, 11)</td></tr><tr><td><font color="DarkGray">DarkGray</font></td><td><font color="#A9A9A9">#A9A9A9</font></td><td bgcolor="#A9A9A9">rgb(169, 169, 169)</td></tr><tr><td><font color="DarkGreen">DarkGreen</font></td><td><font color="#006400">#006400</font></td><td bgcolor="#006400">rgb(0, 100, 0)</td></tr><tr><td><font color="DarkKhaki">DarkKhaki</font></td><td><font color="#BDB76B">#BDB76B</font></td><td bgcolor="#BDB76B">rgb(189, 183, 107)</td></tr><tr><td><font color="DarkMagenta">DarkMagenta</font></td><td><font color="#8B008B">#8B008B</font></td><td bgcolor="#8B008B">rgb(139, 0, 139)</td></tr><tr><td><font color="DarkOliveGreen">DarkOliveGreen</font></td><td><font color="#556B2F">#556B2F</font></td><td bgcolor="#556B2F">rgb(85, 107, 47)</td></tr><tr><td><font color="Darkorange">Darkorange</font></td><td><font color="#FF8C00">#FF8C00</font></td><td bgcolor="#FF8C00">rgb(255, 140, 0)</td></tr><tr><td><font color="DarkOrchid">DarkOrchid</font></td><td><font color="#9932CC">#9932CC</font></td><td bgcolor="#9932CC">rgb(153, 50, 204)</td></tr><tr><td><font color="DarkRed">DarkRed</font></td><td><font color="#8B0000">#8B0000</font></td><td bgcolor="#8B0000">rgb(139, 0, 0)</td></tr><tr><td><font color="DarkSalmon">DarkSalmon</font></td><td><font color="#E9967A">#E9967A</font></td><td bgcolor="#E9967A">rgb(233, 150, 122)</td></tr><tr><td><font color="DarkSeaGreen">DarkSeaGreen</font></td><td><font color="#8FBC8F">#8FBC8F</font></td><td bgcolor="#8FBC8F">rgb(143, 188, 143)</td></tr><tr><td><font color="DarkSlateBlue">DarkSlateBlue</font></td><td><font color="#483D8B">#483D8B</font></td><td bgcolor="#483D8B">rgb(72, 61, 139)</td></tr><tr><td><font color="DarkSlateGray">DarkSlateGray</font></td><td><font color="#2F4F4F">#2F4F4F</font></td><td bgcolor="#2F4F4F">rgb(47, 79, 79)</td></tr><tr><td><font color="DarkTurquoise">DarkTurquoise</font></td><td><font color="#00CED1">#00CED1</font></td><td bgcolor="#00CED1">rgb(0, 206, 209)</td></tr><tr><td><font color="DarkViolet">DarkViolet</font></td><td><font color="#9400D3">#9400D3</font></td><td bgcolor="#9400D3">rgb(148, 0, 211)</td></tr><tr><td><font color="DeepPink">DeepPink</font></td><td><font color="#FF1493">#FF1493</font></td><td bgcolor="#FF1493">rgb(255, 20, 147)</td></tr><tr><td><font color="DeepSkyBlue">DeepSkyBlue</font></td><td><font color="#00BFFF">#00BFFF</font></td><td bgcolor="#00BFFF">rgb(0, 191, 255)</td></tr><tr><td><font color="DimGray">DimGray</font></td><td><font color="#696969">#696969</font></td><td bgcolor="#696969">rgb(105, 105, 105)</td></tr><tr><td><font color="DodgerBlue">DodgerBlue</font></td><td><font color="#1E90FF">#1E90FF</font></td><td bgcolor="#1E90FF">rgb(30, 144, 255)</td></tr><tr><td><font color="Feldspar">Feldspar</font></td><td><font color="#D19275">#D19275</font></td><td bgcolor="#D19275">rgb(209, 146, 117)</td></tr><tr><td><font color="FireBrick">FireBrick</font></td><td><font color="#B22222">#B22222</font></td><td bgcolor="#B22222">rgb(178, 34, 34)</td></tr><tr><td><font color="FloralWhite">FloralWhite</font></td><td><font color="#FFFAF0">#FFFAF0</font></td><td bgcolor="#FFFAF0">rgb(255, 250, 240)</td></tr><tr><td><font color="ForestGreen">ForestGreen</font></td><td><font color="#228B22">#228B22</font></td><td bgcolor="#228B22">rgb(34, 139, 34)</td></tr><tr><td><font color="Fuchsia">Fuchsia</font></td><td><font color="#FF00FF">#FF00FF</font></td><td bgcolor="#FF00FF">rgb(255, 0, 255)</td></tr><tr><td><font color="Gainsboro">Gainsboro</font></td><td><font color="#DCDCDC">#DCDCDC</font></td><td bgcolor="#DCDCDC">rgb(220, 220, 220)</td></tr><tr><td><font color="GhostWhite">GhostWhite</font></td><td><font color="#F8F8FF">#F8F8FF</font></td><td bgcolor="#F8F8FF">rgb(248, 248, 255)</td></tr><tr><td><font color="Gold">Gold</font></td><td><font color="#FFD700">#FFD700</font></td><td bgcolor="#FFD700">rgb(255, 215, 0)</td></tr><tr><td><font color="GoldenRod">GoldenRod</font></td><td><font color="#DAA520">#DAA520</font></td><td bgcolor="#DAA520">rgb(218, 165, 32)</td></tr><tr><td><font color="Gray">Gray</font></td><td><font color="#808080">#808080</font></td><td bgcolor="#808080">rgb(128, 128, 128)</td></tr><tr><td><font color="Green">Green</font></td><td><font color="#008000">#008000</font></td><td bgcolor="#008000">rgb(0, 128, 0)</td></tr><tr><td><font color="GreenYellow">GreenYellow</font></td><td><font color="#ADFF2F">#ADFF2F</font></td><td bgcolor="#ADFF2F">rgb(173, 255, 47)</td></tr><tr><td><font color="HoneyDew">HoneyDew</font></td><td><font color="#F0FFF0">#F0FFF0</font></td><td bgcolor="#F0FFF0">rgb(240, 255, 240)</td></tr><tr><td><font color="HotPink">HotPink</font></td><td><font color="#FF69B4">#FF69B4</font></td><td bgcolor="#FF69B4">rgb(255, 105, 180)</td></tr><tr><td><font color="IndianRed">IndianRed</font></td><td><font color="#CD5C5C">#CD5C5C</font></td><td bgcolor="#CD5C5C">rgb(205, 92, 92)</td></tr><tr><td><font color="Indigo">Indigo</font></td><td><font color="#4B0082">#4B0082</font></td><td bgcolor="#4B0082">rgb(75, 0, 130)</td></tr><tr><td><font color="Ivory">Ivory</font></td><td><font color="#FFFFF0">#FFFFF0</font></td><td bgcolor="#FFFFF0">rgb(255, 255, 240)</td></tr><tr><td><font color="Khaki">Khaki</font></td><td><font color="#F0E68C">#F0E68C</font></td><td bgcolor="#F0E68C">rgb(240, 230, 140)</td></tr><tr><td><font color="Lavender">Lavender</font></td><td><font color="#E6E6FA">#E6E6FA</font></td><td bgcolor="#E6E6FA">rgb(230, 230, 250)</td></tr><tr><td><font color="LavenderBlush">LavenderBlush</font></td><td><font color="#FFF0F5">#FFF0F5</font></td><td bgcolor="#FFF0F5">rgb(255, 240, 245)</td></tr><tr><td><font color="LawnGreen">LawnGreen</font></td><td><font color="#7CFC00">#7CFC00</font></td><td bgcolor="#7CFC00">rgb(124, 252, 0)</td></tr><tr><td><font color="LemonChiffon">LemonChiffon</font></td><td><font color="#FFFACD">#FFFACD</font></td><td bgcolor="#FFFACD">rgb(255, 250, 205)</td></tr><tr><td><font color="LightBlue">LightBlue</font></td><td><font color="#ADD8E6">#ADD8E6</font></td><td bgcolor="#ADD8E6">rgb(173, 216, 230)</td></tr><tr><td><font color="LightCoral">LightCoral</font></td><td><font color="#F08080">#F08080</font></td><td bgcolor="#F08080">rgb(240, 128, 128)</td></tr><tr><td><font color="LightCyan">LightCyan</font></td><td><font color="#E0FFFF">#E0FFFF</font></td><td bgcolor="#E0FFFF">rgb(224, 255, 255)</td></tr><tr><td><font color="LightGoldenRodYellow">LightGoldenRodYellow</font></td><td><font color="#FAFAD2">#FAFAD2</font></td><td bgcolor="#FAFAD2">rgb(250, 250, 210)</td></tr><tr><td><font color="LightGrey">LightGrey</font></td><td><font color="#D3D3D3">#D3D3D3</font></td><td bgcolor="#D3D3D3">rgb(211, 211, 211)</td></tr><tr><td><font color="LightGreen">LightGreen</font></td><td><font color="#90EE90">#90EE90</font></td><td bgcolor="#90EE90">rgb(144, 238, 144)</td></tr><tr><td><font color="LightPink">LightPink</font></td><td><font color="#FFB6C1">#FFB6C1</font></td><td bgcolor="#FFB6C1">rgb(255, 182, 193)</td></tr><tr><td><font color="LightSalmon">LightSalmon</font></td><td><font color="#FFA07A">#FFA07A</font></td><td bgcolor="#FFA07A">rgb(255, 160, 122)</td></tr><tr><td><font color="LightSeaGreen">LightSeaGreen</font></td><td><font color="#20B2AA">#20B2AA</font></td><td bgcolor="#20B2AA">rgb(32, 178, 170)</td></tr><tr><td><font color="LightSkyBlue">LightSkyBlue</font></td><td><font color="#87CEFA">#87CEFA</font></td><td bgcolor="#87CEFA">rgb(135, 206, 250)</td></tr><tr><td><font color="LightSlateBlue">LightSlateBlue</font></td><td><font color="#8470FF">#8470FF</font></td><td bgcolor="#8470FF">rgb(132, 112, 255)</td></tr><tr><td><font color="LightSlateGray">LightSlateGray</font></td><td><font color="#778899">#778899</font></td><td bgcolor="#778899">rgb(119, 136, 153)</td></tr><tr><td><font color="LightSteelBlue">LightSteelBlue</font></td><td><font color="#B0C4DE">#B0C4DE</font></td><td bgcolor="#B0C4DE">rgb(176, 196, 222)</td></tr><tr><td><font color="LightYellow">LightYellow</font></td><td><font color="#FFFFE0">#FFFFE0</font></td><td bgcolor="#FFFFE0">rgb(255, 255, 224)</td></tr><tr><td><font color="Lime">Lime</font></td><td><font color="#00FF00">#00FF00</font></td><td bgcolor="#00FF00">rgb(0, 255, 0)</td></tr><tr><td><font color="LimeGreen">LimeGreen</font></td><td><font color="#32CD32">#32CD32</font></td><td bgcolor="#32CD32">rgb(50, 205, 50)</td></tr><tr><td><font color="Linen">Linen</font></td><td><font color="#FAF0E6">#FAF0E6</font></td><td bgcolor="#FAF0E6">rgb(250, 240, 230)</td></tr><tr><td><font color="Magenta">Magenta</font></td><td><font color="#FF00FF">#FF00FF</font></td><td bgcolor="#FF00FF">rgb(255, 0, 255)</td></tr><tr><td><font color="Maroon">Maroon</font></td><td><font color="#800000">#800000</font></td><td bgcolor="#800000">rgb(128, 0, 0)</td></tr><tr><td><font color="MediumAquaMarine">MediumAquaMarine</font></td><td><font color="#66CDAA">#66CDAA</font></td><td bgcolor="#66CDAA">rgb(102, 205, 170)</td></tr><tr><td><font color="MediumBlue">MediumBlue</font></td><td><font color="#0000CD">#0000CD</font></td><td bgcolor="#0000CD">rgb(0, 0, 205)</td></tr><tr><td><font color="MediumOrchid">MediumOrchid</font></td><td><font color="#BA55D3">#BA55D3</font></td><td bgcolor="#BA55D3">rgb(186, 85, 211)</td></tr><tr><td><font color="MediumPurple">MediumPurple</font></td><td><font color="#9370D8">#9370D8</font></td><td bgcolor="#9370D8">rgb(147, 112, 216)</td></tr><tr><td><font color="MediumSeaGreen">MediumSeaGreen</font></td><td><font color="#3CB371">#3CB371</font></td><td bgcolor="#3CB371">rgb(60, 179, 113)</td></tr><tr><td><font color="MediumSlateBlue">MediumSlateBlue</font></td><td><font color="#7B68EE">#7B68EE</font></td><td bgcolor="#7B68EE">rgb(123, 104, 238)</td></tr><tr><td><font color="MediumSpringGreen">MediumSpringGreen</font></td><td><font color="#00FA9A">#00FA9A</font></td><td bgcolor="#00FA9A">rgb(0, 250, 154)</td></tr><tr><td><font color="MediumTurquoise">MediumTurquoise</font></td><td><font color="#48D1CC">#48D1CC</font></td><td bgcolor="#48D1CC">rgb(72, 209, 204)</td></tr><tr><td><font color="MediumVioletRed">MediumVioletRed</font></td><td><font color="#C71585">#C71585</font></td><td bgcolor="#C71585">rgb(199, 21, 133)</td></tr><tr><td><font color="MidnightBlue">MidnightBlue</font></td><td><font color="#191970">#191970</font></td><td bgcolor="#191970">rgb(25, 25, 112)</td></tr><tr><td><font color="MintCream">MintCream</font></td><td><font color="#F5FFFA">#F5FFFA</font></td><td bgcolor="#F5FFFA">rgb(245, 255, 250)</td></tr><tr><td><font color="MistyRose">MistyRose</font></td><td><font color="#FFE4E1">#FFE4E1</font></td><td bgcolor="#FFE4E1">rgb(255, 228, 225)</td></tr><tr><td><font color="Moccasin">Moccasin</font></td><td><font color="#FFE4B5">#FFE4B5</font></td><td bgcolor="#FFE4B5">rgb(255, 228, 181)</td></tr><tr><td><font color="NavajoWhite">NavajoWhite</font></td><td><font color="#FFDEAD">#FFDEAD</font></td><td bgcolor="#FFDEAD">rgb(255, 222, 173)</td></tr><tr><td><font color="Navy">Navy</font></td><td><font color="#000080">#000080</font></td><td bgcolor="#000080">rgb(0, 0, 128)</td></tr><tr><td><font color="OldLace">OldLace</font></td><td><font color="#FDF5E6">#FDF5E6</font></td><td bgcolor="#FDF5E6">rgb(253, 245, 230)</td></tr><tr><td><font color="Olive">Olive</font></td><td><font color="#808000">#808000</font></td><td bgcolor="#808000">rgb(128, 128, 0)</td></tr><tr><td><font color="OliveDrab">OliveDrab</font></td><td><font color="#6B8E23">#6B8E23</font></td><td bgcolor="#6B8E23">rgb(107, 142, 35)</td></tr><tr><td><font color="Orange">Orange</font></td><td><font color="#FFA500">#FFA500</font></td><td bgcolor="#FFA500">rgb(255, 165, 0)</td></tr><tr><td><font color="OrangeRed">OrangeRed</font></td><td><font color="#FF4500">#FF4500</font></td><td bgcolor="#FF4500">rgb(255, 69, 0)</td></tr><tr><td><font color="Orchid">Orchid</font></td><td><font color="#DA70D6">#DA70D6</font></td><td bgcolor="#DA70D6">rgb(218, 112, 214)</td></tr><tr><td><font color="PaleGoldenRod">PaleGoldenRod</font></td><td><font color="#EEE8AA">#EEE8AA</font></td><td bgcolor="#EEE8AA">rgb(238, 232, 170)</td></tr><tr><td><font color="PaleGreen">PaleGreen</font></td><td><font color="#98FB98">#98FB98</font></td><td bgcolor="#98FB98">rgb(152, 251, 152)</td></tr><tr><td><font color="PaleTurquoise">PaleTurquoise</font></td><td><font color="#AFEEEE">#AFEEEE</font></td><td bgcolor="#AFEEEE">rgb(175, 238, 238)</td></tr><tr><td><font color="PaleVioletRed">PaleVioletRed</font></td><td><font color="#D87093">#D87093</font></td><td bgcolor="#D87093">rgb(216, 112, 147)</td></tr><tr><td><font color="PapayaWhip">PapayaWhip</font></td><td><font color="#FFEFD5">#FFEFD5</font></td><td bgcolor="#FFEFD5">rgb(255, 239, 213)</td></tr><tr><td><font color="PeachPuff">PeachPuff</font></td><td><font color="#FFDAB9">#FFDAB9</font></td><td bgcolor="#FFDAB9">rgb(255, 218, 185)</td></tr><tr><td><font color="Peru">Peru</font></td><td><font color="#CD853F">#CD853F</font></td><td bgcolor="#CD853F">rgb(205, 133, 63)</td></tr><tr><td><font color="Pink">Pink</font></td><td><font color="#FFC0CB">#FFC0CB</font></td><td bgcolor="#FFC0CB">rgb(255, 192, 203)</td></tr><tr><td><font color="Plum">Plum</font></td><td><font color="#DDA0DD">#DDA0DD</font></td><td bgcolor="#DDA0DD">rgb(221, 160, 221)</td></tr><tr><td><font color="PowderBlue">PowderBlue</font></td><td><font color="#B0E0E6">#B0E0E6</font></td><td bgcolor="#B0E0E6">rgb(176, 224, 230)</td></tr><tr><td><font color="Purple">Purple</font></td><td><font color="#800080">#800080</font></td><td bgcolor="#800080">rgb(128, 0, 128)</td></tr><tr><td><font color="Red">Red</font></td><td><font color="#FF0000">#FF0000</font></td><td bgcolor="#FF0000">rgb(255, 0, 0)</td></tr><tr><td><font color="RosyBrown">RosyBrown</font></td><td><font color="#BC8F8F">#BC8F8F</font></td><td bgcolor="#BC8F8F">rgb(188, 143, 143)</td></tr><tr><td><font color="RoyalBlue">RoyalBlue</font></td><td><font color="#4169E1">#4169E1</font></td><td bgcolor="#4169E1">rgb(65, 105, 225)</td></tr><tr><td><font color="SaddleBrown">SaddleBrown</font></td><td><font color="#8B4513">#8B4513</font></td><td bgcolor="#8B4513">rgb(139, 69, 19)</td></tr><tr><td><font color="Salmon">Salmon</font></td><td><font color="#FA8072">#FA8072</font></td><td bgcolor="#FA8072">rgb(250, 128, 114)</td></tr><tr><td><font color="SandyBrown">SandyBrown</font></td><td><font color="#F4A460">#F4A460</font></td><td bgcolor="#F4A460">rgb(244, 164, 96)</td></tr><tr><td><font color="SeaGreen">SeaGreen</font></td><td><font color="#2E8B57">#2E8B57</font></td><td bgcolor="#2E8B57">rgb(46, 139, 87)</td></tr><tr><td><font color="SeaShell">SeaShell</font></td><td><font color="#FFF5EE">#FFF5EE</font></td><td bgcolor="#FFF5EE">rgb(255, 245, 238)</td></tr><tr><td><font color="Sienna">Sienna</font></td><td><font color="#A0522D">#A0522D</font></td><td bgcolor="#A0522D">rgb(160, 82, 45)</td></tr><tr><td><font color="Silver">Silver</font></td><td><font color="#C0C0C0">#C0C0C0</font></td><td bgcolor="#C0C0C0">rgb(192, 192, 192)</td></tr><tr><td><font color="SkyBlue">SkyBlue</font></td><td><font color="#87CEEB">#87CEEB</font></td><td bgcolor="#87CEEB">rgb(135, 206, 235)</td></tr><tr><td><font color="SlateBlue">SlateBlue</font></td><td><font color="#6A5ACD">#6A5ACD</font></td><td bgcolor="#6A5ACD">rgb(106, 90, 205)</td></tr><tr><td><font color="SlateGray">SlateGray</font></td><td><font color="#708090">#708090</font></td><td bgcolor="#708090">rgb(112, 128, 144)</td></tr><tr><td><font color="Snow">Snow</font></td><td><font color="#FFFAFA">#FFFAFA</font></td><td bgcolor="#FFFAFA">rgb(255, 250, 250)</td></tr><tr><td><font color="SpringGreen">SpringGreen</font></td><td><font color="#00FF7F">#00FF7F</font></td><td bgcolor="#00FF7F">rgb(0, 255, 127)</td></tr><tr><td><font color="SteelBlue">SteelBlue</font></td><td><font color="#4682B4">#4682B4</font></td><td bgcolor="#4682B4">rgb(70, 130, 180)</td></tr><tr><td><font color="Tan">Tan</font></td><td><font color="#D2B48C">#D2B48C</font></td><td bgcolor="#D2B48C">rgb(210, 180, 140)</td></tr><tr><td><font color="Teal">Teal</font></td><td><font color="#008080">#008080</font></td><td bgcolor="#008080">rgb(0, 128, 128)</td></tr><tr><td><font color="Thistle">Thistle</font></td><td><font color="#D8BFD8">#D8BFD8</font></td><td bgcolor="#D8BFD8">rgb(216, 191, 216)</td></tr><tr><td><font color="Tomato">Tomato</font></td><td><font color="#FF6347">#FF6347</font></td><td bgcolor="#FF6347">rgb(255, 99, 71)</td></tr><tr><td><font color="Turquoise">Turquoise</font></td><td><font color="#40E0D0">#40E0D0</font></td><td bgcolor="#40E0D0">rgb(64, 224, 208)</td></tr><tr><td><font color="Violet">Violet</font></td><td><font color="#EE82EE">#EE82EE</font></td><td bgcolor="#EE82EE">rgb(238, 130, 238)</td></tr><tr><td><font color="VioletRed">VioletRed</font></td><td><font color="#D02090">#D02090</font></td><td bgcolor="#D02090">rgb(208, 32, 144)</td></tr><tr><td><font color="Wheat">Wheat</font></td><td><font color="#F5DEB3">#F5DEB3</font></td><td bgcolor="#F5DEB3">rgb(245, 222, 179)</td></tr><tr><td><font color="White">White</font></td><td><font color="#FFFFFF">#FFFFFF</font></td><td bgcolor="#FFFFFF">rgb(255, 255, 255)</td></tr><tr><td><font color="WhiteSmoke">WhiteSmoke</font></td><td><font color="#F5F5F5">#F5F5F5</font></td><td bgcolor="#F5F5F5">rgb(245, 245, 245)</td></tr><tr><td><font color="Yellow">Yellow</font></td><td><font color="#FFFF00">#FFFF00</font></td><td bgcolor="#FFFF00">rgb(255, 255, 0)</td></tr><tr><td><font color="YellowGreen">YellowGreen</font></td><td><font color="#9ACD32">#9ACD32</font></td><td bgcolor="#9ACD32">rgb(154, 205, 50)</td></tr></tbody></table>]]></content>
      
        <categories>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> color </tag>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTML5 Canvas小游戏实战篇—小游戏初体验hero]]></title>
      <url>https://dsb123dsb.github.io/2016/08/23/HTML5-Canvas%E5%B0%8F%E6%B8%B8%E6%88%8F%E5%AE%9E%E6%88%98%E7%AF%87%E4%B9%8B%E2%80%94%E2%80%94%E5%B0%8F%E6%B8%B8%E6%88%8F%E5%88%9D%E4%BD%93%E9%AA%8Chero/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;首先是我参考的英文原作出处:<a href="http://www.lostdecadegames.com/how-to-make-a-simple-html5-canvas-game/" target="_blank" rel="external">How to make a simple HTML5 Canvas game</a>，当然也有译文也有的:<a href="http://www.cnblogs.com/Wayou/p/how-to-make-a-simple-html5-canvas-game.html" target="_blank" rel="external">如何开发一个简单的HTML5 Canvas 小游戏</a>，在参考原文的基础上做了很多改进。</p>
<h3 id="附：源码地址（欢迎fork、star）-，-点击链接试玩（触摸设备不支持）"><a href="#附：源码地址（欢迎fork、star）-，-点击链接试玩（触摸设备不支持）" class="headerlink" title="附：源码地址（欢迎fork、star）  ， 点击链接试玩（触摸设备不支持）"></a>附：<a href="https://github.com/dsb123dsb/simple_canvas_game01/tree/hero2.0" target="_blank" rel="external">源码地址（欢迎fork、star）</a>  ， <a href="http://yhgame.cethik.vip/" target="_blank" rel="external">点击链接试玩（触摸设备不支持）</a></h3><blockquote>
<p>以下是自己具体创作过程:</p>
</blockquote>
<a id="more"></a>
<h1 id="1-创建画布，创建媒体文件"><a href="#1-创建画布，创建媒体文件" class="headerlink" title="1.创建画布，创建媒体文件"></a>1.创建画布，创建媒体文件</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//在html文件中</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"drawing"</span> <span class="attr">width</span>=<span class="string">"512"</span> <span class="attr">height</span>=<span class="string">"480"</span>&gt;</span>A drawing of something.<span class="tag">&lt;/<span class="name">canvas</span>&gt;</span>; //css文件中设置使画布居中</div><div class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">"audio/backmusic.mp3"</span> <span class="attr">autoplay</span>=<span class="string">true</span> <span class="attr">type</span>=<span class="string">"audio/mpeg"</span> <span class="attr">loop</span>=<span class="string">true</span>&gt;</span>f<span class="tag">&lt;/<span class="name">audio</span>&gt;</span>;</div><div class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">id</span>=<span class="string">"monsterget"</span> <span class="attr">src</span>=<span class="string">"audio/geomonster.mp3"</span> <span class="attr">autoplay</span>=<span class="string">true</span> <span class="attr">type</span>=<span class="string">"audio/mpeg"</span>&gt;</span>f <span class="tag">&lt;/<span class="name">audio</span>&gt;</span>;</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//js文件中获取上下文</span></div><div class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"drawing"</span>);</div><div class="line"><span class="keyword">if</span>(drawing.getContext)&#123;</div><div class="line"><span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</div><div class="line">  &#125;;</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;首先我们需要创建一张画布作为游戏的舞台。这里通过JS代码也可以实现以上效果，不过我选择直接在HTML里写canvas、audio元素，有了画布后就可以获得它的上下文来进行绘图了。然后我们还设置了画布大小，最后将其添加到页面上。</p>
<h1 id="2-准备图片"><a href="#2-准备图片" class="headerlink" title="2.准备图片"></a>2.准备图片</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//背景图片</span></div><div class="line"><span class="keyword">var</span> bgReady = <span class="literal">false</span>;</div><div class="line"><span class="keyword">var</span> bgImage = <span class="keyword">new</span> Image();</div><div class="line">bgImage.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    bgReady = <span class="literal">true</span>;</div><div class="line">    &#125;;</div><div class="line">bgImage.src = <span class="string">"images/background.png"</span>;</div></pre></td></tr></table></figure>
<p>游戏嘛少不了图片的，所以我们先加载一些图片先。简便起见，这里仅创建简单的图片对象，而不是专门写一个类或者Helper来做图片加载。bgReady这个变量用来标识图片是否已经加载完成从而可以放心地使用了，因为如果在图片加载未完成情况下进行绘制是会报错的。整个游戏中需要用到的三张图片：背景，英雄及怪物我们都用上面的方法来处理。</p>
<h1 id="3-游戏对象"><a href="#3-游戏对象" class="headerlink" title="3.游戏对象"></a>3.游戏对象</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 游戏对象</span></div><div class="line"><span class="keyword">var</span> hero = &#123;</div><div class="line">    speed: <span class="number">256</span>, <span class="comment">// 每秒移动的像素</span></div><div class="line">    x: <span class="number">0</span>,</div><div class="line">    y: <span class="number">0</span></div><div class="line">    &#125;;</div><div class="line"><span class="keyword">var</span> monster = &#123;</div><div class="line">    x: <span class="number">0</span>,</div><div class="line">    y: <span class="number">0</span></div><div class="line">    &#125;;</div><div class="line"><span class="keyword">var</span> monstersCaught = <span class="number">0</span>;<span class="comment">//来存储怪物被捉住的次数。</span></div></pre></td></tr></table></figure>
<p>现在定义一些对象将在后面用到。我们的英雄有一个speed属性用来控制他每秒移动多少像素。怪物游戏过程中不会移动，所以只有坐标属性就够了。monstersCaught则用来存储怪物被捉住的次数。</p>
<h1 id="4-处理用户的输入"><a href="#4-处理用户的输入" class="headerlink" title="4.处理用户的输入"></a>4.处理用户的输入</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 处理按键</span></div><div class="line"><span class="keyword">var</span> keysDown = &#123;&#125;;</div><div class="line"><span class="keyword">var</span> player=<span class="built_in">document</span>.getElementById(<span class="string">"monsterget"</span>)<span class="comment">//获取audio元素                                           </span></div><div class="line">addEventListener(<span class="string">"keydown"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;																</div><div class="line">    keysDown[e.keyCode] = <span class="literal">true</span>;																			 </div><div class="line">    &#125;, <span class="literal">false</span>);																							</div><div class="line"></div><div class="line">addEventListener(<span class="string">"keyup"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">    <span class="keyword">delete</span> keysDown[e.keyCode];</div><div class="line">    &#125;, <span class="literal">false</span>);</div></pre></td></tr></table></figure>
<p>现在开始处理用户的输入(对初次接触游戏开发的前端同学来说，这部分开始可能就需要一些脑力了)。在前端开发中，一般是用户触发了点击事件然后才去执行动画或发起异步请求之类的，但这里我们希望游戏的逻辑能够更加紧凑同时又要及时响应输入。所以我们就把用户的输入先保存下来而不是立即响应。为此，我们用keysDown这个对象来保存用户按下的键值(keyCode)，如果按下的键值在这个对象里，那么我们就做相应处理。</p>
<h1 id="5-开始一轮游戏"><a href="#5-开始一轮游戏" class="headerlink" title="5.开始一轮游戏"></a>5.开始一轮游戏</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 当用户抓住一只怪物后开始新一轮游戏</span></div><div class="line"><span class="keyword">var</span> reset = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    hero.x = canvas.width / <span class="number">2</span>;</div><div class="line">    hero.y = canvas.height / <span class="number">2</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 将新的怪物随机放置到界面上</span></div><div class="line">    monster.x = <span class="number">32</span> + (<span class="built_in">Math</span>.random() * (canvas.width - <span class="number">64</span>));<span class="comment">//怪物和英雄大小都是32像素</span></div><div class="line">    monster.y = <span class="number">32</span> + (<span class="built_in">Math</span>.random() * (canvas.height - <span class="number">64</span>));</div><div class="line">	&#125;;</div></pre></td></tr></table></figure>
<p>reset方法用于开始新一轮和游戏，在这个方法里我们将英雄放回画布中心同时将怪物放到一个随机的地方。</p>
<h1 id="6-更新对象"><a href="#6-更新对象" class="headerlink" title="6.更新对象"></a>6.更新对象</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 更新游戏对象的属性																						 </span></div><div class="line"><span class="keyword">var</span> update = <span class="function"><span class="keyword">function</span> (<span class="params">modifier</span>) </span>&#123;																		</div><div class="line">   <span class="keyword">if</span> (<span class="number">38</span> <span class="keyword">in</span> keysDown) &#123; <span class="comment">// Player holding up															</span></div><div class="line">		hero.y -= hero.speed * modifier;</div><div class="line">	<span class="keyword">if</span>( hero.y &lt; <span class="number">32</span> )<span class="comment">//英雄到达边界时限制行动</span></div><div class="line">		hero.y = <span class="number">32</span>;</div><div class="line">	&#125;</div><div class="line"><span class="keyword">if</span> (<span class="number">40</span> <span class="keyword">in</span> keysDown) &#123; <span class="comment">// Player holding down</span></div><div class="line">	hero.y += hero.speed * modifier;</div><div class="line">	<span class="keyword">if</span>( hero.y &gt;= <span class="number">416</span>) &#123;</div><div class="line">		hero.y = <span class="number">416</span>;</div><div class="line">	&#125;</div><div class="line">	&#125;</div><div class="line"><span class="keyword">if</span> (<span class="number">37</span> <span class="keyword">in</span> keysDown) &#123; <span class="comment">// Player holding left</span></div><div class="line">	hero.x -= hero.speed * modifier;</div><div class="line">	<span class="keyword">if</span>( hero.x &lt; <span class="number">32</span>)&#123;</div><div class="line">		hero.x = <span class="number">32</span>;</div><div class="line">	&#125;</div><div class="line">	&#125;</div><div class="line"><span class="keyword">if</span> (<span class="number">39</span> <span class="keyword">in</span> keysDown) &#123; <span class="comment">// Player holding right</span></div><div class="line">	hero.x += hero.speed * modifier;</div><div class="line">	<span class="keyword">if</span>( hero.x &gt; <span class="number">448</span>)&#123;</div><div class="line">		hero.x = <span class="number">448</span>;</div><div class="line">	&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"><span class="comment">// 英雄怪物相遇了吗?</span></div><div class="line"><span class="keyword">if</span> (</div><div class="line">	hero.x &lt;= (monster.x + <span class="number">32</span>)</div><div class="line">	&amp;&amp; monster.x &lt;= (hero.x + <span class="number">32</span>)</div><div class="line">	&amp;&amp; hero.y &lt;= (monster.y + <span class="number">32</span>)</div><div class="line">	&amp;&amp; monster.y &lt;= (hero.y + <span class="number">32</span>)</div><div class="line">	) &#123;</div><div class="line">		player.play();<span class="comment">//播放音乐</span></div><div class="line">		++monstersCaught;</div><div class="line">		reset();</div><div class="line">	&#125;</div><div class="line">	&#125;;</div></pre></td></tr></table></figure>
<p>这就是游戏中用于更新画面的update函数，会被规律地重复调用。首先它负责检查用户当前按住的是中方向键，然后将英雄往相应方向移动。有点费脑力的或许是这个传入的modifier 变量。你可以在main 方法里看到它的来源，但这里还是有必要详细解释一下。它是基于1开始且随时间变化的一个因子。例如1秒过去了，它的值就是1，英雄的速度将会乘以1，也就是每秒移动256像素；如果半秒钟则它的值为0.5，英雄的速度就乘以0.5也就是说这半秒内英雄以正常速度一半的速度移动。理论上说因为这个update 方法被调用的非常快且频繁，所以modifier的值会很小，但有了这一因子后，不管我们的代码跑得快慢，都能够保证英雄的移动速度是恒定的。</p>
<p>现在英雄的移动已经是基于用户的输入了，接下来该检查移动过程中所触发的事件了，也就是英雄与怪物相遇。这就是本游戏的胜利点，同时触发音乐，monstersCaught +1然后重新开始新一轮。</p>
<h1 id="7-渲染物体"><a href="#7-渲染物体" class="headerlink" title="7.渲染物体"></a>7.渲染物体</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 画出所有物体</span></div><div class="line"><span class="keyword">var</span> render = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (bgReady) &#123;</div><div class="line">        ctx.drawImage(bgImage, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (heroReady) &#123;</div><div class="line">        ctx.drawImage(heroImage, hero.x, hero.y);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (monsterReady) &#123;</div><div class="line">        ctx.drawImage(monsterImage, monster.x, monster.y);</div><div class="line">    &#125;</div><div class="line">	<span class="comment">// 计分同时文本样式设置</span></div><div class="line">    ctx.fillStyle = <span class="string">"rgb(250, 0, 0)"</span>;<span class="comment">//填充颜色</span></div><div class="line">    ctx.font = <span class="string">"24px Helvetica"</span>;</div><div class="line">    ctx.textAlign = <span class="string">"left"</span>;</div><div class="line">    ctx.textBaseline = <span class="string">"top"</span>;</div><div class="line">    ctx.fillText(<span class="string">"Monsterrs caught: "</span> + monstersCaught, <span class="number">32</span>, <span class="number">32</span>);</div><div class="line">	&#125;;</div></pre></td></tr></table></figure>
<p>之前的工作都是枯燥的，直到你把所有东西画出来之后。首先当然是把背景图画出来。然后如法炮制将英雄和怪物也画出来。这个过程中的顺序是有讲究的，因为后画的物体会覆盖之前的物体。</p>
<p>这之后我们改变了一下Canvas的绘图上下文的样式并调用fillText来绘制文字，也就是记分板那一部分。本游戏没有其他复杂的动画效果和打斗场面，绘制部分大功告成！</p>
<h1 id="8-主循环函数"><a href="#8-主循环函数" class="headerlink" title="8.主循环函数"></a>8.主循环函数</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 游戏主函数</span></div><div class="line"><span class="keyword">var</span> main = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> now = <span class="built_in">Date</span>.now();</div><div class="line">    <span class="keyword">var</span> delta = now - then;	</div><div class="line">    update(delta / <span class="number">1000</span>);</div><div class="line">    render();	</div><div class="line">    then = now;	</div><div class="line">    <span class="comment">// 立即调用主函数</span></div><div class="line">    requestAnimationFrame(main);</div><div class="line">	&#125;;</div></pre></td></tr></table></figure>
<p>上面的主函数控制了整个游戏的流程。先是拿到当前的时间用来计算时间差（距离上次主函数被调用时过了多少毫秒）。得到modifier后除以1000(也就是1秒中的毫秒数)再传入update函数。最后调用render 函数并且将本次的时间保存下来。</p>
<p>关于游戏中循环更新画面的讨论可参见：<a href="http://www.html5rocks.com/en/tutorials/casestudies/onslaught/#toc-the-game-loop" target="_blank" rel="external">Onslaught! Arena Case Study</a>。关于循环的进一步解释<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// requestAnimationFrame 的浏览器兼容性处理</span></div><div class="line"><span class="keyword">var</span> w = <span class="built_in">window</span>;</div><div class="line">requestAnimationFrame = w.requestAnimationFrame || w.webkitRequestAnimationFrame || w.msRequestAnimationFrame || w.mozRequestAnimationFrame;</div></pre></td></tr></table></figure><br>如果你不是完全理解上面的代码也没关系，我只是觉得拿出来解释一下总是极好的,为了循环地调用main函数，本游戏之前用的是setInterval。但现今已经有了更好的方法那就是requestAnimationFrame。使用新方法就不得不考虑浏览器兼容性。上面的垫片就是出于这样的考虑，它是Paul Irish 博客原版的一个简化版本。</p>
<h1 id="9-启动游戏！"><a href="#9-启动游戏！" class="headerlink" title="9.启动游戏！"></a>9.启动游戏！</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 少年，开始游戏吧！</span></div><div class="line"><span class="keyword">var</span> then = <span class="built_in">Date</span>.now();</div><div class="line">reset();</div><div class="line">main();</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;总算完成了，这是本游戏最后一段代码了。先是设置一个初始的时间变量then用于首先运行main函数使用。然后调用 reset 函数来开始新一轮游戏（如果你还记得的话，这个函数的作用是将英雄放到画面中间同时将怪物放到随机的地方以方便英雄去捉它）。</p>
<blockquote>
<p>最后，本来准备添加事件，实现在触摸设备上操作，不过由于懒癌犯没有测试，纪念下，蟹蟹！来副美图愉悦下身心，哈哈</p>
</blockquote>
<p><img src="https://oci0xa33t.qnssl.com/monentum03" alt=""></p>
]]></content>
      
        <categories>
            
            <category> 编程实战 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> html5 </tag>
            
            <tag> js </tag>
            
            <tag> &lt;font color=#00ff face=&quot;黑体&quot;size=4&gt;小游戏&lt;/font&gt; </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[终于搭建出自己博客啦 ]]></title>
      <url>https://dsb123dsb.github.io/2016/08/21/%E7%BB%88%E4%BA%8E%E6%90%AD%E5%BB%BA%E5%87%BA%E8%87%AA%E5%B7%B1%E5%8D%9A%E5%AE%A2%E5%95%A6/</url>
      <content type="html"><![CDATA[<blockquote>
<p>纸上得来终觉浅，绝知此事要躬行</p>
</blockquote>
<h1 id="所谓缘由"><a href="#所谓缘由" class="headerlink" title="所谓缘由"></a>所谓缘由</h1><p>&emsp;&emsp;总觉得bog是跟自己很遥远的事情，直到现在搭建属于自己的bog，事情总发展的出乎预料。具体的搭建看了很多，主要参考 <a href="http://sunwhut.com/2015/10/30/buildBlog/?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io" target="_blank" rel="external">如何利用GitHub Pages和Hexo快速搭建个人博客</a>，关键是很喜欢这款主题，哈哈，拖延这么久能下静下心来做出来可能也有点这个原因，以前是觉得既然以后想做技术，没个博客总感觉少点啥，但是一直懒惰癌晚期发作，不过做完之后发现也没有想的那么复杂，哈哈！<br><a id="more"></a></p>
<h1 id="立个flag"><a href="#立个flag" class="headerlink" title="立个flag"></a>立个flag</h1><p><img src="https://oci0xa33t.qnssl.com/monentum02" alt=""></p>
]]></content>
      
        <categories>
            
            <category> 搭建bog </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
