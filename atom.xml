<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XX雨中人</title>
  
  <subtitle>纸上得来终觉浅，绝知此事要躬行</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://dsb123dsb.github.io/"/>
  <updated>2021-07-12T11:07:13.300Z</updated>
  <id>https://dsb123dsb.github.io/</id>
  
  <author>
    <name>qijiIng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>北京三年</title>
    <link href="https://dsb123dsb.github.io/2021/07/12/%E4%B8%89%E5%B9%B4%E6%9D%82%E8%AE%B0/"/>
    <id>https://dsb123dsb.github.io/2021/07/12/三年杂记/</id>
    <published>2021-07-12T10:16:56.000Z</published>
    <updated>2021-07-12T11:07:13.300Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>纸上得来终觉浅，绝知此事要躬行</p></blockquote><p>转眼来北京已经三年有余，在北京遇到另一半结婚，回想毕业时一阵恍然，不敢想自己会坚持这么久，也换了一份工作，新工作不知不觉也已经一年了，有过离开的选择和挣扎，也更明白坚守的意义，幸运的了双月spot bonus，希望一切都是最好的安排啊。</p><span id="more"></span><p>回想毕业后的三年种种选择际遇，还仿佛在昨日版清晰，毕业时去搜狗，接触了非常广泛的业务和技术，视野变得开阔，遗憾的是最后一年繁忙的业务让你几乎不再有很多时间去深入一个方向沉淀，或许也只是资质愚笨需要更多历练，来到字节更加明快的节奏和更高的要求让自己时刻思考事情本身的意义，对你的要求也不再是一个执行者，owner意识的建立也许是最大的成长？做的事情也更加专一和精细，有过思考其间种种弊端和益处，想来追求极致的企业文化本身并没有错。现在再看一些原理性的技术文章时，竟没了最初的晦涩费解，莫名有种豁然贯通的感觉，这也许就是学以致用厚积薄发的道理吧。</p><p>未来一年的期望能够真正在某个方向做到深入贯通吧，保持学习的初心，毕竟上次博客更新已经是一年前了，虽然也有因为公司内部飞书文档太好用了的缘故，那也可以做个勤劳的搬运工喔，fighting！</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;纸上得来终觉浅，绝知此事要躬行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;转眼来北京已经三年有余，在北京遇到另一半结婚，回想毕业时一阵恍然，不敢想自己会坚持这么久，也换了一份工作，新工作不知不觉也已经一年了，有过离开的选择和挣扎，也更明白坚守的意义，幸运的了双月spot bonus，希望一切都是最好的安排啊。&lt;/p&gt;
    
    </summary>
    
      <category term="生活随笔" scheme="https://dsb123dsb.github.io/categories/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="感悟" scheme="https://dsb123dsb.github.io/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>回溯算法</title>
    <link href="https://dsb123dsb.github.io/2020/05/24/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/"/>
    <id>https://dsb123dsb.github.io/2020/05/24/回溯算法/</id>
    <published>2020-05-24T03:43:26.000Z</published>
    <updated>2020-05-24T05:26:02.622Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>纸上得来终觉浅，绝知此事要躬行</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>解决一个回溯问题，实际上就是一个决策树的遍历过程</strong>。你只需要思考 3 个问题：</p><p><strong>1、路径</strong>：也就是已经做出的选择。</p><p><strong>2、选择列表</strong>：也就是你当前可以做的选择。</p><p><strong>3、结束条件</strong>：也就是到达决策树底层，无法再做选择的条件。</p><p>代码方面，回溯算法的框架：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">result = []</span><br><span class="line">function backtrack(路径, 选择列表):</span><br><span class="line">    if 满足结束条件:</span><br><span class="line">        result.add(路径)</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line">    for 选择 in 选择列表:</span><br><span class="line">        做选择</span><br><span class="line">        backtrack(路径, 选择列表)</span><br><span class="line">        撤销选择</span><br></pre></td></tr></table></figure><p><strong>其核心就是 for 循环里面的递归，在递归调用之前「做选择」，在递归调用之后「撤销选择」</strong></p><p>什么叫做选择和撤销选择呢，这个框架的底层原理是什么呢？下面我们就通过「全排列」这个问题来解开之前的疑惑，详细探究一下其中的奥妙！</p><span id="more"></span><h2 id="全排列问题"><a href="#全排列问题" class="headerlink" title="全排列问题"></a>全排列问题</h2><p>知道<code>n</code>个不重复的数，全排列共有 n! 个。PS：<strong>为了简单清晰起见，我们这次讨论的全排列问题不包含重复的数字</strong>。</p><p>手动我们一般是这样计算：</p><p>先固定第一位为 1，然后第二位可以是 2，那么第三位只能是 3；然后可以把第二位变成 3，第三位就只能是 2 了；然后就只能变化第一位，变成 2，然后再穷举后两位……</p><p>其实这就是回溯算法，我们高中无师自通就会用，或者有的同学直接画出如下这棵回溯树，也可以成为决策树，遍历树上路径记录数字就是全排列：</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf3eq7jl3dj30wa0icdwv.jpg" alt="image-20200524115509548"></p><p><strong>为啥说这是决策树呢，因为你在每个节点上其实都在做决策</strong>：比如站在第二层第二个节点2，你现在就在做决策，可以选择 1 那条树枝，也可以选择 3 那条树枝。为啥只能在 1 和 3 之中选择呢？因为 2 这个树枝在你身后，这个选择你之前做过了，而全排列是不允许重复使用数字的。</p><p><strong>现在可以解答开头的几个名词：[2]就是「路径」，记录你已经做过的选择；[1,3]就是「选择列表」，表示你当前可以做出的选择；「结束条件」就是遍历到树的底层，在这里就是选择列表为空的时候</strong></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf3ghvm73dj30vw0jiqnb.jpg" alt="image-20200524130455093"></p><p>完整代码实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 主函数，输入一组不重复的数字，返回它们的全排列 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">permute</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 记录「路径」</span></span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    backtrack(nums, res, []);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路径：记录在 track 中</span></span><br><span class="line"><span class="comment">// 选择列表：nums 中不存在于 track 的那些元素</span></span><br><span class="line"><span class="comment">// 结束条件：nums 中的元素全都在 track 中出现</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">backtrack</span>(<span class="params">nums, res, track</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 触发结束条件</span></span><br><span class="line">    <span class="keyword">if</span> (track.length == nums.length) &#123;</span><br><span class="line">        res.push(track.slice());</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="comment">// 排除不合法的选择</span></span><br><span class="line">        <span class="keyword">if</span> (track.includes(nums[i]))</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="comment">// 做选择</span></span><br><span class="line">        track.push(nums[i]);</span><br><span class="line">        <span class="comment">// 进入下一层决策树</span></span><br><span class="line">        backtrack(nums, res, track);</span><br><span class="line">        <span class="comment">// 取消选择</span></span><br><span class="line">        track.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是必须说明的是，不管怎么优化，都符合回溯框架，而且时间复杂度都不可能低于 O(N!)，因为穷举整棵决策树是无法避免的。<strong>这也是回溯算法的一个特点，不像动态规划存在重叠子问题可以优化，回溯算法就是纯暴力穷举，复杂度一般都很高</strong>。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>回溯算法就是个多叉树的遍历问题，关键就是在前序遍历和后序遍历的位置做一些操作，算法框架如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">backtrack(...):</span><br><span class="line">    <span class="keyword">for</span> 选择 <span class="keyword">in</span> 选择列表:</span><br><span class="line">        做选择</span><br><span class="line">        backtrack(...)</span><br><span class="line">        撤销选择</span><br></pre></td></tr></table></figure><p><strong>写backtrack函数时，需要维护走过的「路径」和当前可以做的「选择列表」，当触发「结束条件」时，将「路径」记入结果集</strong>。</p><p>其实想想看，回溯算法和动态规划是不是有点像呢？动态规划的三个需要明确的点就是「状态」「选择」和「base case」，是不是就对应着走过的「路径」，当前的「选择列表」和「结束条件」？</p><p>某种程度上说，动态规划的暴力求解阶段就是回溯算法。只是有的问题具有重叠子问题性质，可以用 dp table 或者备忘录优化，将递归树大幅剪枝，这就变成了动态规划。而上面的问题，都没有重叠子问题，也就是回溯算法问题了，复杂度非常高是不可避免的。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;纸上得来终觉浅，绝知此事要躬行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;解决一个回溯问题，实际上就是一个决策树的遍历过程&lt;/strong&gt;。你只需要思考 3 个问题：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、路径&lt;/strong&gt;：也就是已经做出的选择。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、选择列表&lt;/strong&gt;：也就是你当前可以做的选择。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、结束条件&lt;/strong&gt;：也就是到达决策树底层，无法再做选择的条件。&lt;/p&gt;
&lt;p&gt;代码方面，回溯算法的框架：&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;result = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function backtrack(路径, 选择列表):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if 满足结束条件:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        result.add(路径)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    for 选择 in 选择列表:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        做选择&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        backtrack(路径, 选择列表)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        撤销选择&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;其核心就是 for 循环里面的递归，在递归调用之前「做选择」，在递归调用之后「撤销选择」&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;什么叫做选择和撤销选择呢，这个框架的底层原理是什么呢？下面我们就通过「全排列」这个问题来解开之前的疑惑，详细探究一下其中的奥妙！&lt;/p&gt;
    
    </summary>
    
      <category term="基础杂谈" scheme="https://dsb123dsb.github.io/categories/%E5%9F%BA%E7%A1%80%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>龟兔赛跑，floyd判圈算法</title>
    <link href="https://dsb123dsb.github.io/2020/02/14/%E9%BE%9F%E5%85%94%E8%B5%9B%E8%B7%91%EF%BC%8Cfloyd%E5%88%A4%E5%9C%88%E7%AE%97%E6%B3%95/"/>
    <id>https://dsb123dsb.github.io/2020/02/14/龟兔赛跑，floyd判圈算法/</id>
    <published>2020-02-14T03:46:02.000Z</published>
    <updated>2020-05-24T03:44:30.013Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>纸上得来终觉浅，绝知此事要躬行</p></blockquote><h2 id="算法推导"><a href="#算法推导" class="headerlink" title="算法推导"></a>算法推导</h2><p><img src="https://raw.githubusercontent.com/polar9527/polar9527.github.io/master/image/post/floydtortoiseandhare1.jpg" alt=""></p><span id="more"></span><p>当<code>hare</code>的移动速度是<code>tortoise</code>的 2 倍，<br><br>设起始点到环的入口的距离是<code>T</code>，环的长度是<code>C</code>，<br><br>当<code>tortoise</code>第一次走到环的入口<code>entry point</code>时，我们假设这是<code>tortoise</code>与<code>hare</code>之间的在环上的距离是<code>r</code>，<br><br>从<code>start point</code>开始出发到<code>tortoise</code>第一次走到环的入口时，<code>hare</code>移动的距离是 <code>T + r + k*C，k &gt;= 0</code>，<br><br>又因为，<code>hare</code>移动的速度是<code>tortoise</code>的两倍，且这时<code>tortoise</code>移动的距离是<code>T</code>，所以<code>hare</code>移动的距离是 2T。<br><br>得到等式 A <code>T + r + k*C = 2T，k &gt;= 0</code> 简化得到等式 B <code>r + k*C = T，k &gt;= 0</code><br></p><p><img src="https://raw.githubusercontent.com/polar9527/polar9527.github.io/master/image/post/floydtortoiseandhare2.jpg" alt=""></p><p>当 tortoise 第一次走到环的入口<code>entry point</code>时，而这时<code>tortoise</code>与<code>hare</code>之间的距离是 r，<br><br>那么如果<code>tortoise</code>现在就不继续移动的话，<code>hare</code>还需要往前走<code>C-r</code>才能追上<code>tortoise</code>。<br><br>但是<code>hare</code>在往前追赶<code>tortoise</code>的时候，<code>tortoise</code>也在移动，而<code>hare</code>的移动速度是<code>tortoise</code>的两倍，<br><br>所以<code>hare</code>可以追上<code>tortoise</code>,并且需要往前走<code>2*（C-r）</code>才能追上<code>tortoise</code>。<br></p><p>当<code>hare</code>移动了<code>2*（C-r）</code>的距离追上<code>tortoise</code>的时候，<code>tortoise</code>从相对于环的入口<code>entry point</code>移动了<code>C-r</code>。<br></p><p>所以，在<code>tortoise</code>与<code>hare</code>第一次在环上相遇时，环的入口<code>entry point</code>到这个点<code>meet point</code>的距离是<code>C-r</code>, 而从这个相遇点<code>meet point</code>再往前移动<code>r</code>，就又回到了环的入口<code>entry point</code>。<br></p><p><img src="https://raw.githubusercontent.com/polar9527/polar9527.github.io/master/image/post/floydtortoiseandhare3.jpg" alt=""></p><p>在<code>hare</code>与<code>tortoise</code>第一次相遇的这个时候，将<code>hare</code>从<code>meet point</code>重新放到起始点<code>start point</code>，<code>tortoise</code>仍放在这个相遇点<code>meet point</code>，<br><br>然后让它们以<strong>相同的速度</strong>开始移动，<br></p><p>根据等式 B <code>r + k*C = T，k &gt;= 0</code>，<br></p><p><code>tortoise</code>和<code>hare</code>必然会在环的入口点<code>entry point</code>再次相遇<br></p><p>入口<code>entry point</code>找到后，就能很容易得到<code>T</code>，<br><br>然后入口<code>entry point</code>，让<code>tortoise</code>停下，<code>hare</code> 继续跑一圈，就能得到 <code>C</code>。<br></p><h2 id="算法应用"><a href="#算法应用" class="headerlink" title="算法应用"></a>算法应用</h2><ol><li>链表有环检测 两个指针，慢指针移动速度为 1，快指针移动速度为 2，判断两个指针是否相遇</li><li>找出有环链表的入口节点 当两个指针相遇时，将其中一个指针重新放到链表头，然后让两个指针移动速度都为 1，当两个指针再次相遇，就找到了有环链表的入口节点</li><li>计算环长度 在入口节点放置两个个指针，一个指针不动，一个指针移动速度为 1，两个指针相遇，就可计算出环的长度</li></ol><h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h2><p>golang</p><ol><li>链表有环检测 <code>leetcode 141</code></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode id=141 lang=golang</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [141] Linked List Cycle</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * type ListNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Next *ListNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hasCycle</span><span class="params">(head *ListNode)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> head == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">t, h := head, head</span><br><span class="line">started := <span class="literal">false</span></span><br><span class="line"><span class="keyword">for</span> h != <span class="literal">nil</span> &amp;&amp; h.Next != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> t == h &#123;</span><br><span class="line"><span class="keyword">if</span> started &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">started = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">t = t.Next</span><br><span class="line">h = h.Next.Next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>找出有环链表的入口节点 <code>leetcode 142</code></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode id=142 lang=golang</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [142] Linked List Cycle II</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * type ListNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Next *ListNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">detectCycle</span><span class="params">(head *ListNode)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> cycPoint *ListNode</span><br><span class="line"><span class="keyword">if</span> head == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> cycPoint</span><br><span class="line">&#125;</span><br><span class="line">t, h := head, head</span><br><span class="line">started := <span class="literal">false</span></span><br><span class="line">hasCycle := <span class="literal">false</span></span><br><span class="line"><span class="keyword">for</span> h != <span class="literal">nil</span> &amp;&amp; h.Next != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> t == h &#123;</span><br><span class="line"><span class="keyword">if</span> started &#123;</span><br><span class="line">hasCycle = <span class="literal">true</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">started = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">t = t.Next</span><br><span class="line">h = h.Next.Next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> hasCycle &#123;</span><br><span class="line">h = head</span><br><span class="line"><span class="keyword">for</span> h != <span class="literal">nil</span> &amp;&amp; t != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> h == t &#123;</span><br><span class="line">cycPoint = h</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">h = h.Next</span><br><span class="line">t = t.Next</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cycPoint</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="写在结尾"><a href="#写在结尾" class="headerlink" title="写在结尾"></a>写在结尾</h2><p>算法实现仔细想想就是初中做过的数学题目啊，哎，过了这么多年竟然忘的一干二净。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;纸上得来终觉浅，绝知此事要躬行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;算法推导&quot;&gt;&lt;a href=&quot;#算法推导&quot; class=&quot;headerlink&quot; title=&quot;算法推导&quot;&gt;&lt;/a&gt;算法推导&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/polar9527/polar9527.github.io/master/image/post/floydtortoiseandhare1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="基础杂谈" scheme="https://dsb123dsb.github.io/categories/%E5%9F%BA%E7%A1%80%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="algorithm" scheme="https://dsb123dsb.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>贪心、分治、回溯、动态回归比较分析</title>
    <link href="https://dsb123dsb.github.io/2019/10/21/%E8%B4%AA%E5%BF%83%E3%80%81%E5%88%86%E6%B2%BB%E3%80%81%E5%9B%9E%E6%BA%AF%E3%80%81%E5%8A%A8%E6%80%81%E5%9B%9E%E5%BD%92%E6%AF%94%E8%BE%83%E5%88%86%E6%9E%90/"/>
    <id>https://dsb123dsb.github.io/2019/10/21/贪心、分治、回溯、动态回归比较分析/</id>
    <published>2019-10-21T15:56:22.000Z</published>
    <updated>2019-10-21T15:58:08.763Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>纸上得来终觉浅，绝知此事要躬行</p></blockquote><p>贪心、回溯、动态规划可划分为一类，而分治单独一类</p><p>前三个都是解决问题的模型，可抽象成多阶段决策最优解，而分治问题尽管大部分也是最优解问题，但是大部分不能抽象成多阶段决策模型</p><p>回溯算法是万金油，基本上能用动态规划、贪心解决的问题，都可以用回溯算法解决，其实相当于穷举搜索，但是⌚️复杂度比较高，是指数级别的，只能用来解决小规模数据问题。</p><p>动态规划相对比较高效，能用动态规划解决的问题需要满足三个特征：最优子结构、无后效性、重复子问题。对于重复子问题，分治要求分割成子问题不能有重复，而动态规划之所以高效就在于回溯算法实现中存在大量重复子问题。</p><p>贪心算法实际上是动态规划的特殊情况。她解决的问题起来更加高效，代码实现也更加简洁，但是她需要满足三个条件：最优子结构、无后效性</p><p>、贪心选择性（即选择只当前最优解，不记录之前状态）</p><p>总结起来：</p><ol><li>贪心： 一条路走到黑，就一次机会，只能那边看着顺眼走哪边 ；</li><li>回溯： 一条路走到黑，无数次重来机会，还怕我走不出去；</li><li>动态规划： 拥有上帝视角，手握无数平时宇宙的历史存档，同时发展出无数个未来；</li><li>分治：大问题肢解为小问题，然后再把结果合并</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;纸上得来终觉浅，绝知此事要躬行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;贪心、回溯、动态规划可划分为一类，而分治单独一类&lt;/p&gt;
&lt;p&gt;前三个都是解决问题的模型，可抽象成多阶段决策最优解，而分治问题尽管大部分也是最优解问题，但是大部分不能
      
    
    </summary>
    
      <category term="基础杂谈" scheme="https://dsb123dsb.github.io/categories/%E5%9F%BA%E7%A1%80%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="算法" scheme="https://dsb123dsb.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>字符串匹配BM算法笔记</title>
    <link href="https://dsb123dsb.github.io/2019/05/05/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8DBM%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    <id>https://dsb123dsb.github.io/2019/05/05/字符串匹配BM算法笔记/</id>
    <published>2019-05-05T05:59:30.000Z</published>
    <updated>2019-05-05T06:38:01.216Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>纸上得来终觉浅，绝知此事要躬行</p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>BM算法的核心思想是通过将模式串沿主串大踏步向后滑动，从而大大减少比较次数，降低时间复杂度。而算法的关键在于如何兼顾步子迈得足够大与无遗漏，同时尽量提高执行效率。这需要模式串在向后滑动式，遵守<strong>坏字符与好后缀规则</strong>，同时采用一些技巧。</p><span id="more"></span><h2 id="坏字符规则"><a href="#坏字符规则" class="headerlink" title="坏字符规则"></a>坏字符规则</h2><p>从后往前逐位比较模式串与主串的字符，当找到不匹配的坏字符时，记录模式串的下标值si，并找到坏字符在模式串中，位于下表si前的最近位置xi(若无则记为-1), si-xi即为向后滑动距离（ps：是否可以加上xi必须在si前面，以防止计算出来负数）。但是坏字符规则向后滑动的步幅还不够大，于是需要好后缀规则。</p><h2 id="好后缀规则"><a href="#好后缀规则" class="headerlink" title="好后缀规则"></a>好后缀规则</h2><p>从后往前逐位比较模式串与主串的字符，当出现坏字符时停止。若存在已匹配成功的子串{u}，那么在模式串的{u}前面找到最近的{u}，记做{u’}。再将模式串后移，使得模式串的{u’}与主串的{u}重叠。若不存在{u’}，则直接把模式串移到主串{u}后面。为了没有遗漏，需要找到最长的、能够跟模式串的前缀子串匹配的，好后缀的后缀子串（同时也是模式串的后缀子串）。然后把模式串向后移到其边界，与这个好后缀的后缀子串在主串中的左边界对齐。</p><h2 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h2><p>何时使用坏字符和好后缀规则呢？首先在每一次匹配过程中，一旦发现坏字符，先执行坏字符规则，如果发现存在好后缀，还要执行好后缀规则，并从两者中选择后移距离最大的方案执行。具体技巧总结：</p><ol><li>通过散列表实现，坏字符在模式串中下标位置的快速查询</li><li>每次执行好后缀原则时，都会计算多次能够与模式串前缀子串相匹配的好后缀的最长后缀子串。为了提高效率，可以预先计算模式串的所有后缀子串，在模式串中与之匹配的另一个子串的位置。同时预计算模式串中（同长度）后缀子串与前缀子串是否匹配并记录。在具体操作中使用，大大提高效率。</li><li>上述2技巧如何实现呢？先用一个suffix数组，下标k为后缀子串的长度，从模式串下标为i(0~m-2)的字符为最后一个字符，查找这个子串是否与后缀子串匹配，若匹配则将子串起始位置的下标j赋给suffix[k]。若j为0，说明这个匹配子串的起始位置为模式串的起始位置，则用一个数组prefix，将prefix[k]设为true，否则为false。 k从0到m(模式串的长度)于是就到了模式串所有前缀与后缀子串的匹配情况。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;纸上得来终觉浅，绝知此事要躬行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;BM算法的核心思想是通过将模式串沿主串大踏步向后滑动，从而大大减少比较次数，降低时间复杂度。而算法的关键在于如何兼顾步子迈得足够大与无遗漏，同时尽量提高执行效率。这需要模式串在向后滑动式，遵守&lt;strong&gt;坏字符与好后缀规则&lt;/strong&gt;，同时采用一些技巧。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="https://dsb123dsb.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>一段replace into 引发的血案</title>
    <link href="https://dsb123dsb.github.io/2019/01/13/%E4%B8%80%E6%AE%B5replace-into-%E5%BC%95%E5%8F%91%E7%9A%84%E8%A1%80%E6%A1%88/"/>
    <id>https://dsb123dsb.github.io/2019/01/13/一段replace-into-引发的血案/</id>
    <published>2019-01-13T07:16:02.000Z</published>
    <updated>2019-01-13T07:30:52.732Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>纸上得来终觉浅，绝知此事要躬行</p></blockquote><p>最近项目更新数据库，由于语句使用不善，踩了许多坑，特做此总结引以为戒。</p><p>在向表中插入数据的时候，经常遇到这样的情况：1. 首先判断数据是否存在； 2. 如果不存在，则插入；3.如果存在，则更新。</p><p>通常使用<code>replace into</code>和<code>insert into on deplicate key update</code></p><span id="more"></span><p>执行的逻辑</p><ol><li><p>遇到PRIMARY KEY或UNIQUE索引的，新记录与旧记录有冲突的（这里实际产生了异常duplicate key error），replace into会把旧记录删除，然后再插入新记录， insert into on deplicate key update则只会更新。</p></li><li><p>若是新记录没有冲突，就直接插入一条新记录，与insert into一样。</p></li></ol><p>关键问题就在第一条，本人也是这里踩的坑</p><p>针对第一种逻辑会有问题</p><ul><li><p>把旧记录删除之后，插入的新记录只是插入了那些指定的字段，原本不想更新的字段，直接为默认值了，会导致数据丢失</p></li><li><p>若旧记录的id跟其他表是有关联的，更新后新记录会产生新的id，导致这种关联丢失</p></li><li><p>而且使用replace into会导致自增主键id一直增大，很容易导致id值范围不够用</p></li><li><p>若是数据库存在主从关系，在主机器上进行了replace into操作之后，从机器上对应表的AUTO_INCREMENT是不会更新的，导致从机器转为主机器时，新插入数据会出现异常，直到AUTO_INCREMENT增加到原来主机器的值为止。 </p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;纸上得来终觉浅，绝知此事要躬行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最近项目更新数据库，由于语句使用不善，踩了许多坑，特做此总结引以为戒。&lt;/p&gt;
&lt;p&gt;在向表中插入数据的时候，经常遇到这样的情况：1. 首先判断数据是否存在； 2. 如果不存在，则插入；3.如果存在，则更新。&lt;/p&gt;
&lt;p&gt;通常使用&lt;code&gt;replace into&lt;/code&gt;和&lt;code&gt;insert into on deplicate key update&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="基础杂谈" scheme="https://dsb123dsb.github.io/categories/%E5%9F%BA%E7%A1%80%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="mysql" scheme="https://dsb123dsb.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>mysql语句小结</title>
    <link href="https://dsb123dsb.github.io/2019/01/06/mysql%E8%AF%AD%E5%8F%A5%E5%B0%8F%E7%BB%93/"/>
    <id>https://dsb123dsb.github.io/2019/01/06/mysql语句小结/</id>
    <published>2019-01-06T01:01:37.000Z</published>
    <updated>2019-01-06T02:01:11.635Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>纸上得来终夜寝啊，据知此事要躬行</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>说起数据库学习历程，启蒙应该是毕业前完成的学习了慕课网的一门课程两遍吧，还自我感觉尚可，接下来就是入职以来在公司内部奥特曼系统写sql吧，算上真正操练了，对联合查询子查询等高级使用有个进阶，然后就是现在写node项目直连数据库啦，更多的是考虑了大量数据下查询性能以及安全权限方面的问题。</p><span id="more"></span><h2 id="常用全局命令"><a href="#常用全局命令" class="headerlink" title="常用全局命令"></a>常用全局命令</h2><p>删除表数据：</p><ol><li><code>drop table tb</code>：暴力，删除内容和定义，释放空间，直接完全删除</li><li><code>truncate table tb</code>：意义上和drop相同，区别是只是清空表数据而已, 比较温柔。</li><li><code>delete table tb</code>：也是删除整个表的数据,但是过程是痛苦的(系统一行一行地删,效率较truncate低)</li></ol><p>查看sql配置项： <code>show global variables like &#39;%secure_file_priv%&#39;;</code></p><h2 id="批量插入记录-重复更新"><a href="#批量插入记录-重复更新" class="headerlink" title="批量插入记录(重复更新)"></a>批量插入记录(重复更新)</h2><p>海量数据常常面临高效入库的过程，如果一次条记录入库，反复新增断开数据库连接，开销是很惊人的，常用的方法有两种，replace和insert，均是需要存在唯一索引，具体写法如下。</p><ol><li><p><code>REPLACE INTO T (id, c1, c2) VALUES (1, 1, 1), (2, 2, 2) ON DUPLICATE KEY UPDATE c1 = c1 + VALUES(c1), c2 = c2 + VALUES(c2);</code>插入数据可以编写函数<strong>拼接sql</strong>语句，项目中我们就是这种方式 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sql = <span class="string">`replace into <span class="subst">$&#123;tableName&#125;</span>(<span class="subst">$&#123;columns.join(<span class="string">&#x27;, &#x27;</span>)&#125;</span>) values `</span>;</span><br><span class="line"><span class="keyword">let</span> str = [];</span><br><span class="line"><span class="keyword">let</span> _push = <span class="function"><span class="keyword">function</span>(<span class="params">row</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> values = columns.map(<span class="function"><span class="params">column</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> value = row[column];</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">typeof</span> value === <span class="string">&#x27;number&#x27;</span> || value === <span class="string">&#x27;NOW()&#x27;</span> ? value : <span class="string">`&#x27;<span class="subst">$&#123;value&#125;</span>&#x27;`</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    str.push(<span class="string">`(<span class="subst">$&#123;values.join(<span class="string">&#x27;, &#x27;</span>)&#125;</span>)`</span>);</span><br><span class="line">&#125;;</span><br><span class="line">rowsList.forEach(<span class="function"><span class="params">rows</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(rows)) &#123;</span><br><span class="line">        rows.forEach(<span class="function"><span class="params">row</span> =&gt;</span> &#123;</span><br><span class="line">            _push(row);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> rows === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">        _push(rows);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">sql += str.join(<span class="string">&#x27;,&#x27;</span>) + <span class="string">&#x27;;&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p><code>INSERT</code>其实和replace类似，只是insert可以仅仅更新个别字段，而replace要全部更新前面插入的字段</p></li></ol><h2 id="批量更新"><a href="#批量更新" class="headerlink" title="批量更新"></a>批量更新</h2><p>批量更新其实前面讲的那两种方法也可以做到，只是我们有时仅仅想想大量更新数据某个字段用不到前面的<strong>两种牛刀</strong>，那么<code>update</code>就要出场了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">UPDATE T</span><br><span class="line">SET c1 = c1 + CASE id </span><br><span class="line">WHEN 1 THEN 1 </span><br><span class="line">WHEN 2 THEN 2 </span><br><span class="line">END, </span><br><span class="line">c2 = c2 + CASE id </span><br><span class="line">WHEN 1 THEN 1 </span><br><span class="line">WHEN 2 THEN 2 </span><br><span class="line">END</span><br><span class="line">WHERE id IN (1, 2);</span><br></pre></td></tr></table></figure><p>当然where条件也可以不加的。</p><h2 id="随机查询指定数量数据"><a href="#随机查询指定数量数据" class="headerlink" title="随机查询指定数量数据"></a>随机查询指定数量数据</h2><p>之前因为对sql rand()函数原理不了解，查询我们一个千万级的数据库时使用了rand()函数，结果可想而知了。</p><ol><li><code>Order by Rand()</code>：rand() 函数会先为每一行数据生成一个 1~0之间的随机数，然后在根据这个数字，进行<strong>排序</strong>再选出最小的N行数据（N取决于limit N), 如果数据海量排序比较速度可想而知了，一般来说超过万行的数据就不推荐使用这种方式了。</li><li><code>rand()改进1</code> ：<code>SELECT id FROM users, (SELECT ((1/COUNT(*))*100) as n FROM users) as x WHERE RAND()&lt;=x.n LIMIT 1;</code>首先使用了一个<strong>子查询</strong>，计算出你想要随机出的记录所<strong>在总记录的百分比</strong>，然后再乘上100（防止比例过小）再使用这个小数，去和随机数比较，取出小于或等于这个小数的记录。举个例子 你想从一百万条记录中随机取10条记录，那么算式就是 10/1_000_000 <em> 100 = 0.001 查询语句就是：<code>SELECT id FROM users WHERE RAND()&lt;=0.001 LIMIT 10;</code>。其实也可以首先子查询查询出数据总量，根据总量偏移进行正常查询<em>*不使用rand函数</em></em>。</li><li><code>rand()改进2</code>: <code>SELECT id FROM users, (SELECT ((1/COUNT(*))*100) as n FROM users) as x WHERE RAND()&lt;=x.n ORDER BY RAND() LIMIT 1;</code>改进方法1中达到了快速数据的目的，但是它的随机性不好，那么改进方法2就是使用一定的性能去换取随机分布率.</li><li><code>inner join</code>: <code>SELECT * FROM users as u JOIN (SELECT ROUND(RAND() * (SELECT MAX(id) FROM users)) AS id ) AS u2 WHERE u.id &gt;= u2.id ORDER BY u.id DESC LIMIT 1;</code>巧妙的使用了自增长的ID主键，取其最大值，然后再乘上随机函数 的到一个 随机的ID，这样你就可以根据想要得到的随机记录数，决定使用 &gt;= 或是 = 运算符去筛选结果了( = 仅用于随机一条记录的情况)。被查询的表必须是<strong>连续自增</strong>的主键表，很多表其实不是连续自增的。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;纸上得来终夜寝啊，据知此事要躬行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;说起数据库学习历程，启蒙应该是毕业前完成的学习了慕课网的一门课程两遍吧，还自我感觉尚可，接下来就是入职以来在公司内部奥特曼系统写sql吧，算上真正操练了，对联合查询子查询等高级使用有个进阶，然后就是现在写node项目直连数据库啦，更多的是考虑了大量数据下查询性能以及安全权限方面的问题。&lt;/p&gt;
    
    </summary>
    
      <category term="基础杂谈" scheme="https://dsb123dsb.github.io/categories/%E5%9F%BA%E7%A1%80%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="mysql" scheme="https://dsb123dsb.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>webpack Tree Shaking</title>
    <link href="https://dsb123dsb.github.io/2018/10/15/webpack%20treeshaking/"/>
    <id>https://dsb123dsb.github.io/2018/10/15/webpack treeshaking/</id>
    <published>2018-10-15T12:58:12.000Z</published>
    <updated>2018-11-02T13:55:15.670Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>纸上得来终觉浅，绝知此事要躬行</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>很久前看过<code>webpack</code>，入职来一直做小程序快应用相关需求，对于框架和工程化的东西渐渐拉下了，忽然发现webpack都到4.0了，想想之前看还是2.0时代，真是是新月异啊，<code>webpack</code>入门的初始化配置就不再记述，基本看下编译之后的文件就能读明白（普通模块依赖、动态引用编译）主要记述下自己看<code>tree shaking</code>时的坑。</p><h2 id="Tree-Shaking"><a href="#Tree-Shaking" class="headerlink" title="Tree Shaking"></a>Tree Shaking</h2><h3 id="它是何方神圣"><a href="#它是何方神圣" class="headerlink" title="它是何方神圣"></a>它是何方神圣</h3><p>首先介绍下什么是<code>tree shaking</code>，可以理解为通过工具”摇”我们的JS文件，将其中用不到的代码”摇”掉，是一个性能优化的范畴。具体来说，在 <code>webpack</code>项目中，有一个入口文件，相当于一棵树的主干，入口文件有很多依赖的模块，相当于树枝。实际情况中，虽然依赖了某个模块，但其实只使用其中的某些功能。通过<code>tree-shaking</code>，将没有使用的模块摇掉，这样来达到删除无用代码的目的。</p><span id="more"></span><h3 id="how原理"><a href="#how原理" class="headerlink" title="how原理"></a>how原理</h3><p>Tree-shaking 较早由 Rich_Harris 的 rollup 实现，后来，<code>webpack2</code> 也增加了<code>tree-shaking</code> 的功能。</p><p><code>Tree-shaking</code>的本质是消除无用的js代码，这个称之为<code>DCE（dead code elimination）</code>。</p><p><code>Dead Code</code> 一般具有以下几个特征:</p><ul><li>代码不会被执行，不可到达</li><li>代码执行的结果不会被用到</li><li>代码只会影响死变量（只写不读）</li></ul><p>传统编译型的语言中，都是由编译器将<code>Dead Code</code>从AST（抽象语法树）中删除，那javascript中是由谁做DCE呢？</p><p>首先肯定不是浏览器做DCE，因为当我们的代码送到浏览器，那还谈什么消除无法执行的代码来优化呢，所以肯定是送到浏览器之前的步骤进行优化。</p><p>其实也不是通常使用的打包工具<code>rollup、webpack</code>做的，而是著名的代码压缩优化工具uglify，uglify完成了javascript的DCE（本人就是因为知道这一点纠结了很久，5555）。</p><h2 id="看下编译代码"><a href="#看下编译代码" class="headerlink" title="看下编译代码"></a>看下编译代码</h2><p>首先时入口和依赖文件，可以看到math.js导出了square和cube两个函数，index.js引入了其中一个，按照前面说的原理编译后不应该存在cube导出的函数的，结果却出乎预料。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js 入口文件</span></span><br><span class="line"><span class="keyword">import</span> &#123;cube&#125; <span class="keyword">from</span> <span class="string">&#x27;./math.js&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(cube(<span class="number">5</span>))</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// math.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">square</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">cube</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x * x * x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/******/</span> (<span class="function"><span class="keyword">function</span>(<span class="params">modules</span>) </span>&#123; <span class="comment">// webpackBootstrap</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// The module cache</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> installedModules = &#123;&#125;;</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// The require function</span></span><br><span class="line"><span class="comment">/******/</span> <span class="function"><span class="keyword">function</span> <span class="title">__webpack_require__</span>(<span class="params">moduleId</span>) </span>&#123;</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// Check if module is in cache</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">if</span>(installedModules[moduleId]) &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">return</span> installedModules[moduleId].exports;</span><br><span class="line"><span class="comment">/******/</span> &#125;</span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// Create a new module (and put it into the cache)</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> <span class="built_in">module</span> = installedModules[moduleId] = &#123;</span><br><span class="line"><span class="comment">/******/</span> i: moduleId,</span><br><span class="line"><span class="comment">/******/</span> l: <span class="literal">false</span>,</span><br><span class="line"><span class="comment">/******/</span> <span class="built_in">exports</span>: &#123;&#125;</span><br><span class="line"><span class="comment">/******/</span> &#125;;</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// Execute the module function</span></span><br><span class="line"><span class="comment">/******/</span> modules[moduleId].call(<span class="built_in">module</span>.exports, <span class="built_in">module</span>, <span class="built_in">module</span>.exports, __webpack_require__);</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// Flag the module as loaded</span></span><br><span class="line"><span class="comment">/******/</span> <span class="built_in">module</span>.l = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// Return the exports of the module</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line"><span class="comment">/******/</span> &#125;</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// expose the modules object (__webpack_modules__)</span></span><br><span class="line"><span class="comment">/******/</span> __webpack_require__.m = modules;</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// expose the module cache</span></span><br><span class="line"><span class="comment">/******/</span> __webpack_require__.c = installedModules;</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// define getter function for harmony exports</span></span><br><span class="line"><span class="comment">/******/</span> __webpack_require__.d = <span class="function"><span class="keyword">function</span>(<span class="params"><span class="built_in">exports</span>, name, getter</span>) </span>&#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">if</span>(!__webpack_require__.o(<span class="built_in">exports</span>, name)) &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="built_in">Object</span>.defineProperty(<span class="built_in">exports</span>, name, &#123; <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="attr">get</span>: getter &#125;);</span><br><span class="line"><span class="comment">/******/</span> &#125;</span><br><span class="line"><span class="comment">/******/</span> &#125;;</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// define __esModule on exports</span></span><br><span class="line"><span class="comment">/******/</span> __webpack_require__.r = <span class="function"><span class="keyword">function</span>(<span class="params"><span class="built_in">exports</span></span>) </span>&#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">Symbol</span> !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; <span class="built_in">Symbol</span>.toStringTag) &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="built_in">Object</span>.defineProperty(<span class="built_in">exports</span>, <span class="built_in">Symbol</span>.toStringTag, &#123; <span class="attr">value</span>: <span class="string">&#x27;Module&#x27;</span> &#125;);</span><br><span class="line"><span class="comment">/******/</span> &#125;</span><br><span class="line"><span class="comment">/******/</span> <span class="built_in">Object</span>.defineProperty(<span class="built_in">exports</span>, <span class="string">&#x27;__esModule&#x27;</span>, &#123; <span class="attr">value</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"><span class="comment">/******/</span> &#125;;</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// create a fake namespace object</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// mode &amp; 1: value is a module id, require it</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// mode &amp; 2: merge all properties of value into the ns</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// mode &amp; 4: return value when already ns object</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// mode &amp; 8|1: behave like require</span></span><br><span class="line"><span class="comment">/******/</span> __webpack_require__.t = <span class="function"><span class="keyword">function</span>(<span class="params">value, mode</span>) </span>&#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">if</span>(mode &amp; <span class="number">1</span>) value = __webpack_require__(value);</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">if</span>(mode &amp; <span class="number">8</span>) <span class="keyword">return</span> value;</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">if</span>((mode &amp; <span class="number">4</span>) &amp;&amp; <span class="keyword">typeof</span> value === <span class="string">&#x27;object&#x27;</span> &amp;&amp; value &amp;&amp; value.__esModule) <span class="keyword">return</span> value;</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> ns = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line"><span class="comment">/******/</span> __webpack_require__.r(ns);</span><br><span class="line"><span class="comment">/******/</span> <span class="built_in">Object</span>.defineProperty(ns, <span class="string">&#x27;default&#x27;</span>, &#123; <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="attr">value</span>: value &#125;);</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">if</span>(mode &amp; <span class="number">2</span> &amp;&amp; <span class="keyword">typeof</span> value != <span class="string">&#x27;string&#x27;</span>) <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> value) __webpack_require__.d(ns, key, <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123; <span class="keyword">return</span> value[key]; &#125;.bind(<span class="literal">null</span>, key));</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">return</span> ns;</span><br><span class="line"><span class="comment">/******/</span> &#125;;</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// getDefaultExport function for compatibility with non-harmony modules</span></span><br><span class="line"><span class="comment">/******/</span> __webpack_require__.n = <span class="function"><span class="keyword">function</span>(<span class="params"><span class="built_in">module</span></span>) </span>&#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> getter = <span class="built_in">module</span> &amp;&amp; <span class="built_in">module</span>.__esModule ?</span><br><span class="line"><span class="comment">/******/</span> <span class="function"><span class="keyword">function</span> <span class="title">getDefault</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="built_in">module</span>[<span class="string">&#x27;default&#x27;</span>]; &#125; :</span><br><span class="line"><span class="comment">/******/</span> <span class="function"><span class="keyword">function</span> <span class="title">getModuleExports</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="built_in">module</span>; &#125;;</span><br><span class="line"><span class="comment">/******/</span> __webpack_require__.d(getter, <span class="string">&#x27;a&#x27;</span>, getter);</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">return</span> getter;</span><br><span class="line"><span class="comment">/******/</span> &#125;;</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// Object.prototype.hasOwnProperty.call</span></span><br><span class="line"><span class="comment">/******/</span> __webpack_require__.o = <span class="function"><span class="keyword">function</span>(<span class="params">object, property</span>) </span>&#123; <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.hasOwnProperty.call(object, property); &#125;;</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// __webpack_public_path__</span></span><br><span class="line"><span class="comment">/******/</span> __webpack_require__.p = <span class="string">&quot;/Users/zhouyh/codebase/webpack_test/dist&quot;</span>;</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// Load entry module and return exports</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">return</span> __webpack_require__(__webpack_require__.s = <span class="string">&quot;./src/index.js&quot;</span>);</span><br><span class="line"><span class="comment">/******/</span> &#125;)</span><br><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line"><span class="comment">/******/</span> (&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> <span class="string">&quot;./src/index.js&quot;</span>:</span><br><span class="line"><span class="comment">/*!**********************!*\</span></span><br><span class="line"><span class="comment">  !*** ./src/index.js ***!</span></span><br><span class="line"><span class="comment">  \**********************/</span></span><br><span class="line"><span class="comment">/*! no exports provided */</span></span><br><span class="line"><span class="comment">/***/</span> (<span class="function"><span class="keyword">function</span>(<span class="params"><span class="built_in">module</span>, __webpack_exports__, __webpack_require__</span>) </span>&#123;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&quot;__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./math.js */ \&quot;./src/math.js\&quot;);\n\nconsole.log(12)\nconsole.log(Object(_math_js__WEBPACK_IMPORTED_MODULE_0__[\&quot;cube\&quot;])(5))\n\n//# sourceURL=webpack:///./src/index.js?&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;),</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> <span class="string">&quot;./src/math.js&quot;</span>:</span><br><span class="line"><span class="comment">/*!*********************!*\</span></span><br><span class="line"><span class="comment">  !*** ./src/math.js ***!</span></span><br><span class="line"><span class="comment">  \*********************/</span></span><br><span class="line"><span class="comment">/*! exports provided: square, cube */</span></span><br><span class="line"><span class="comment">/***/</span> (<span class="function"><span class="keyword">function</span>(<span class="params"><span class="built_in">module</span>, __webpack_exports__, __webpack_require__</span>) </span>&#123;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&quot;__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \&quot;square\&quot;, function() &#123; return square; &#125;);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \&quot;cube\&quot;, function() &#123; return cube; &#125;);\nfunction square(x) &#123;\n  return x * x;\n&#125;\n\nfunction cube(x) &#123;\n  return x * x * x;\n&#125;\n\n//# sourceURL=webpack:///./src/math.js?&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span> &#125;);</span><br></pre></td></tr></table></figure><p>其实主要就是最后那个eval函数，可以看到cube和square函数都有定义，当时花了很多时间调试，比如和babel编译冲突，等等，最后居然发现是开发模式的原因，巨坑啊，webpack文档上写的就是开发模式的，哎，到底还是对原理了解不深，前面也说了tree shaking的原理是使用uglify实现的。</p><p>想想也能理解，开发模式是不开启开启压缩的，接下来看下压缩后的编译代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">! <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> t = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (t[n]) <span class="keyword">return</span> t[n].exports;</span><br><span class="line"><span class="keyword">var</span> o = t[n] = &#123;</span><br><span class="line"><span class="attr">i</span>: n,</span><br><span class="line"><span class="attr">l</span>: !<span class="number">1</span>,</span><br><span class="line"><span class="attr">exports</span>: &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">return</span> e[n].call(o.exports, o, o.exports, r), o.l = !<span class="number">0</span>, o.exports</span><br><span class="line">&#125;</span><br><span class="line">r.m = e, r.c = t, r.d = <span class="function"><span class="keyword">function</span>(<span class="params">e, t, n</span>) </span>&#123;</span><br><span class="line">r.o(e, t) || <span class="built_in">Object</span>.defineProperty(e, t, &#123;</span><br><span class="line"><span class="attr">enumerable</span>: !<span class="number">0</span>,</span><br><span class="line"><span class="attr">get</span>: n</span><br><span class="line">&#125;)</span><br><span class="line">&#125;, r.r = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"><span class="string">&quot;undefined&quot;</span> != <span class="keyword">typeof</span> <span class="built_in">Symbol</span> &amp;&amp; <span class="built_in">Symbol</span>.toStringTag &amp;&amp; <span class="built_in">Object</span>.defineProperty(e, <span class="built_in">Symbol</span>.toStringTag, &#123;</span><br><span class="line"><span class="attr">value</span>: <span class="string">&quot;Module&quot;</span></span><br><span class="line">&#125;), <span class="built_in">Object</span>.defineProperty(e, <span class="string">&quot;__esModule&quot;</span>, &#123;</span><br><span class="line"><span class="attr">value</span>: !<span class="number">0</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;, r.t = <span class="function"><span class="keyword">function</span>(<span class="params">e, t</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">1</span> &amp; t &amp;&amp; (e = r(e)), <span class="number">8</span> &amp; t) <span class="keyword">return</span> e;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">4</span> &amp; t &amp;&amp; <span class="string">&quot;object&quot;</span> == <span class="keyword">typeof</span> e &amp;&amp; e &amp;&amp; e.__esModule) <span class="keyword">return</span> e;</span><br><span class="line"><span class="keyword">var</span> n = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line"><span class="keyword">if</span> (r.r(n), <span class="built_in">Object</span>.defineProperty(n, <span class="string">&quot;default&quot;</span>, &#123;</span><br><span class="line"><span class="attr">enumerable</span>: !<span class="number">0</span>,</span><br><span class="line"><span class="attr">value</span>: e</span><br><span class="line">&#125;), <span class="number">2</span> &amp; t &amp;&amp; <span class="string">&quot;string&quot;</span> != <span class="keyword">typeof</span> e)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> o <span class="keyword">in</span> e) r.d(n, o, <span class="function"><span class="keyword">function</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> e[t]</span><br><span class="line">&#125;.bind(<span class="literal">null</span>, o));</span><br><span class="line"><span class="keyword">return</span> n</span><br><span class="line">&#125;, r.n = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> t = e &amp;&amp; e.__esModule ? <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> e.default</span><br><span class="line">&#125; : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> e</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">return</span> r.d(t, <span class="string">&quot;a&quot;</span>, t), t</span><br><span class="line">&#125;, r.o = <span class="function"><span class="keyword">function</span>(<span class="params">e, t</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Object</span>.prototype.hasOwnProperty.call(e, t)</span><br><span class="line">&#125;, r.p = <span class="string">&quot;/Users/zhouyh/codebase/webpack_test/dist&quot;</span>, r(r.s = <span class="number">0</span>)</span><br><span class="line">&#125;([<span class="function"><span class="keyword">function</span>(<span class="params">e, t, r</span>) </span>&#123;</span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line">r.r(t), <span class="built_in">console</span>.log(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> e * e * e</span><br><span class="line">&#125;(<span class="number">5</span>))</span><br><span class="line">&#125;]);</span><br></pre></td></tr></table></figure><p>主要关注最后的立即执行函数传入的参数数组即可,可以看到现在只有用到的cube函数了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">! <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">&#125;([<span class="function"><span class="keyword">function</span>(<span class="params">e, t, r</span>) </span>&#123;</span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line">r.r(t), <span class="built_in">console</span>.log(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> e * e * e</span><br><span class="line">&#125;(<span class="number">5</span>))</span><br><span class="line">&#125;]);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;纸上得来终觉浅，绝知此事要躬行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;很久前看过&lt;code&gt;webpack&lt;/code&gt;，入职来一直做小程序快应用相关需求，对于框架和工程化的东西渐渐拉下了，忽然发现webpack都到4.0了，想想之前看还是2.0时代，真是是新月异啊，&lt;code&gt;webpack&lt;/code&gt;入门的初始化配置就不再记述，基本看下编译之后的文件就能读明白（普通模块依赖、动态引用编译）主要记述下自己看&lt;code&gt;tree shaking&lt;/code&gt;时的坑。&lt;/p&gt;
&lt;h2 id=&quot;Tree-Shaking&quot;&gt;&lt;a href=&quot;#Tree-Shaking&quot; class=&quot;headerlink&quot; title=&quot;Tree Shaking&quot;&gt;&lt;/a&gt;Tree Shaking&lt;/h2&gt;&lt;h3 id=&quot;它是何方神圣&quot;&gt;&lt;a href=&quot;#它是何方神圣&quot; class=&quot;headerlink&quot; title=&quot;它是何方神圣&quot;&gt;&lt;/a&gt;它是何方神圣&lt;/h3&gt;&lt;p&gt;首先介绍下什么是&lt;code&gt;tree shaking&lt;/code&gt;，可以理解为通过工具”摇”我们的JS文件，将其中用不到的代码”摇”掉，是一个性能优化的范畴。具体来说，在 &lt;code&gt;webpack&lt;/code&gt;项目中，有一个入口文件，相当于一棵树的主干，入口文件有很多依赖的模块，相当于树枝。实际情况中，虽然依赖了某个模块，但其实只使用其中的某些功能。通过&lt;code&gt;tree-shaking&lt;/code&gt;，将没有使用的模块摇掉，这样来达到删除无用代码的目的。&lt;/p&gt;
    
    </summary>
    
      <category term="基础杂谈" scheme="https://dsb123dsb.github.io/categories/%E5%9F%BA%E7%A1%80%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="webpack" scheme="https://dsb123dsb.github.io/tags/webpack/"/>
    
      <category term="工程化" scheme="https://dsb123dsb.github.io/tags/%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>数组扁平化</title>
    <link href="https://dsb123dsb.github.io/2018/08/05/%E6%95%B0%E7%BB%84%E6%89%81%E5%B9%B3%E5%8C%96/"/>
    <id>https://dsb123dsb.github.io/2018/08/05/数组扁平化/</id>
    <published>2018-08-05T13:21:03.000Z</published>
    <updated>2018-08-05T13:36:25.836Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>纸上得来终觉浅，绝知此事要躬行</p></blockquote><p>转眼又要开始校招了，组内也要求每人出一道题，忽然就想起自己面试遇到的一道数组扁平化的问题，就顺便温习做下总结。</p><p>题目：请使用尽可能多的方法将一个js嵌套数组转换为只有一层的数组。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span>  arr = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]]];</span><br><span class="line"><span class="built_in">console</span>.log(flatten(arr)) <span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><span id="more"></span><p>参考答案：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法 1，常规深度遍历</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]]];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> flatten = <span class="function">(<span class="params">arr</span>)=&gt;</span>  &#123;</span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(arr[i])===<span class="string">&#x27;[object Array]&#x27;</span>) &#123;</span><br><span class="line">            result = result.concat(flatten(arr[i]))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            result.push(arr[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(flatten(arr))</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法2 遍历，但是使用reduce简化代码</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]]];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> flatten = <span class="function">(<span class="params">arr</span>)=&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev, next</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> prev.concat(<span class="built_in">Object</span>.prototype.toString.call(next)===<span class="string">&#x27;[object Array]&#x27;</span>? flatten(next) : next)</span><br><span class="line">    &#125;, [])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(flatten(arr))</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法3 遍历 ES6拓展运算符简化代码</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]]];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> flatten = <span class="function">(<span class="params">arr</span>)=&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (arr.some(<span class="function"><span class="params">item</span> =&gt;</span> <span class="built_in">Object</span>.prototype.toString.call(item)===<span class="string">&#x27;[object Array]&#x27;</span>)) &#123;</span><br><span class="line">        arr = [].concat(...arr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(flatten(arr))</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法4,不使用遍历, JSON.stringify转化为字符串, 正则取出内容，拼接为JSON数组，转为数组（注意转化字符串方法，toString和join会无法处理极端数据如[2, [3.2, [&#x27;s,d,w&#x27;],&#x27;a,b,c,d,e&#x27;]]</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]]];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> flatten = <span class="function">(<span class="params">arr</span>)=&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(<span class="string">`[<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(arr).replace(<span class="regexp">/\[|\]/g</span>, <span class="string">&#x27;&#x27;</span>)&#125;</span>]`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(flatten(arr))</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法5，不使用循环，JSON.stringify转化为字符串, 正则取出内容，拼接为JSON数组，JSON.parse转为数组</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]]];</span><br><span class="line"><span class="keyword">let</span> flatten = <span class="function">(<span class="params">arr</span>)=&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(<span class="string">`[<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(arr).replace(<span class="regexp">/\[|\]/g</span>, <span class="string">&#x27;&#x27;</span>)&#125;</span>]`</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(flatten(arr))</span><br></pre></td></tr></table></figure><p>考察知识点：主要考察数组方面知识</p><ol><li>数组类型判断<code>（typeof, Array.isArray, Object.prototype.toString.call(arr)）</code></li><li>数组遍历方法的熟悉reduce、some、 map、concat等，ES6少许知识，以及简化代码的意识</li></ol><p>需要说明的时后面两种不使用遍历的方<code>·JSON.stringify</code>，对于一些数据类型可能不太适用，这是使用时需要注意的。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;纸上得来终觉浅，绝知此事要躬行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;转眼又要开始校招了，组内也要求每人出一道题，忽然就想起自己面试遇到的一道数组扁平化的问题，就顺便温习做下总结。&lt;/p&gt;
&lt;p&gt;题目：请使用尽可能多的方法将一个js嵌套数组转换为只有一层的数组。例如：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt;  arr = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, [&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, [&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(flatten(arr)) &lt;span class=&quot;comment&quot;&gt;// [1, 2, 3, 4]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://dsb123dsb.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>快应用开发实践踩坑</title>
    <link href="https://dsb123dsb.github.io/2018/07/21/%E5%BF%AB%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%B8%A9%E5%9D%91/"/>
    <id>https://dsb123dsb.github.io/2018/07/21/快应用开发实践踩坑/</id>
    <published>2018-07-21T12:46:34.000Z</published>
    <updated>2018-08-05T13:25:56.983Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>纸上得来终觉浅，觉知此事要躬行</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​    工作后发现写文章的频率变得少了很多，还是要多总结下的，最近在开发公司搜狗搜索快应用，开发最初毫无经验完全对着文档，快速迭代了好几版，也是时候做个总结和吐槽了。、</p><h2 id="快应用是什么？"><a href="#快应用是什么？" class="headerlink" title="快应用是什么？"></a>快应用是什么？</h2><p>借用官方的说法有三点：</p><ol><li>基于手机硬件平台的新型应用形态，标准由主流手机厂商（==仅限安卓==）组成的快应用联盟联合制定。</li><li>快应用标准的诞生将在研发接口、能力接入、开发者服务等层面建设标准平台，以平台化的生态模式对个人开发者和企业开发者全品类开放。</li><li>快应用无需安装、即点即用。</li></ol><p>个人觉得就是应用商店内部的小程序吧，而且还要面临各个厂商的问题，ios缺阵也是一大不爽，无论如何既然作为一种生态还是很有而且无需安装能力也和app相近还是有很大的前景的（参加快应用沙龙指导汽车之间DAU有10w，还是不错的），作为前端人员还是很有学习必要的。</p><span id="more"></span><p>##开发流水账</p><ol><li>开发工具：首先官方提供了开发工具<code>hap-toolkit</code> 和快应用调试器（直接下载安装，支持扫码本地安装）,具体开发可参见文档，值得注意的是使用hap开发时，如果升级了hap版本，要记得在项目目录下执行<code>hap update</code> 不然后面执行hap命令打包会出问题。说到打包，打包签名包后要想使用调试器本地安装要记得先清空系统快应用缓存。快应用官方没有ide，华为自己开发了一个ide，为了和ide搭配又开发了个调试器，很坑，在官方调试器没问题，放到华为调试器上会报一堆错误，，目前还没完美解决。真希望对于开发工具和标准能做到统一啊</li><li>全局配置<code>manifest.json</code>文件:包括项目的一些基本信息，和全局配置项和全局数据，比如标题栏、debug级别、路由、最低平台、菜单、页面设计基准等</li><li>样式：样式感觉比较坑，支持特别少，盒模型border-box模型，布局不支持绝对定位，想要灵活定位只能使用stack组件</li><li>路由：支持新增、替换、回退路由，并且能获取当前路由页面栈，路由可以传递参数，路由页面可以通过<code>this.params</code>取到，实际中发现死活去不到，最后发现要想渠道商必须在页面public对象内定义</li><li>web组件：我们搜索结果页是使用的webview，发现某些case下页面会特别卡顿，最后偶然发现web组件是直接暴漏在template下的，外面包一层div，就可以解决webview内部再次搜索卡顿，也是侥幸能发现这个问题的解决方案。</li><li>输入框输入某些case 出sug框时会莫名闪退，以为我们为了提高list组件滚动性能把搜索框放进了list组件内部，接着就出现了某些查询词时闪退，反复验证搜索框放在外面就不会，后面考虑到既然是因为sug直接暴漏在在list内部会闪退，那我们就把sug框也放进list内部进行嵌套，果然解决了闪退问题</li><li>list组件滚动有个坑，通过scrollTo事件到顶时不会触发到顶事件,在tab组件内嵌套时外部也不能跟着滚动，嵌套list内部list不识别三元判别(不识别绑定数据变化)，tab组件直接嵌套list滚动置顶会有一个tab的距离差值，list外面包一层div</li><li>接口问题：这个感觉最不合理的，他们接口竟然几乎全部都是异步接口，这让对数据流有所要求的地方写起来极其别扭，彷佛回到回调地狱</li><li>父子组件传递参数不能用驼峰，这个被坑了好几次</li><li>channelReady判断不准，false也可以吊起，吊起url参数长度限制，吊起也必须关闭代理</li><li>push消息：push消息有最低版本要求，而且用户必须创建桌面图标才能收到</li><li>最后吐槽：文档很多使用地方写的很不详细，而且厂商有变动的地方开发者也无法第一时间得知，从而多浪费很多时间。</li></ol><p>最后，希望快应用能越来也好吧，自己技术也能越来越进步。</p><p>，</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;纸上得来终觉浅，觉知此事要躬行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;​    工作后发现写文章的频率变得少了很多，还是要多总结下的，最近在开发公司搜狗搜索快应用，开发最初毫无经验完全对着文档，快速迭代了好几版，也是时候做个总结和吐槽了。、&lt;/p&gt;
&lt;h2 id=&quot;快应用是什么？&quot;&gt;&lt;a href=&quot;#快应用是什么？&quot; class=&quot;headerlink&quot; title=&quot;快应用是什么？&quot;&gt;&lt;/a&gt;快应用是什么？&lt;/h2&gt;&lt;p&gt;借用官方的说法有三点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;基于手机硬件平台的新型应用形态，标准由主流手机厂商（==仅限安卓==）组成的快应用联盟联合制定。&lt;/li&gt;
&lt;li&gt;快应用标准的诞生将在研发接口、能力接入、开发者服务等层面建设标准平台，以平台化的生态模式对个人开发者和企业开发者全品类开放。&lt;/li&gt;
&lt;li&gt;快应用无需安装、即点即用。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;个人觉得就是应用商店内部的小程序吧，而且还要面临各个厂商的问题，ios缺阵也是一大不爽，无论如何既然作为一种生态还是很有而且无需安装能力也和app相近还是有很大的前景的（参加快应用沙龙指导汽车之间DAU有10w，还是不错的），作为前端人员还是很有学习必要的。&lt;/p&gt;
    
    </summary>
    
      <category term="编程实战" scheme="https://dsb123dsb.github.io/categories/%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="快应用" scheme="https://dsb123dsb.github.io/tags/%E5%BF%AB%E5%BA%94%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>lint-staged和husky在pre-commit阶段做代码检查</title>
    <link href="https://dsb123dsb.github.io/2018/05/26/lint-staged%E5%92%8Chusky%E5%9C%A8pre-commit%E9%98%B6%E6%AE%B5%E5%81%9A%E4%BB%A3%E7%A0%81%E6%A3%80%E6%9F%A5/"/>
    <id>https://dsb123dsb.github.io/2018/05/26/lint-staged和husky在pre-commit阶段做代码检查/</id>
    <published>2018-05-26T01:49:24.000Z</published>
    <updated>2018-05-26T02:51:28.162Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>纸上得来终终觉浅，绝知此事要躬行</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前几天给项目代码加eslint，并且使用lint-staged和husky在pre-commit阶段做代码检查，也踩了个坑，这里对这两个npm包作简要介绍。</p><h1 id="为什么使用"><a href="#为什么使用" class="headerlink" title="为什么使用"></a>为什么使用</h1><p>通常项目中我们通过<code>eslint</code>和<code>stylelint</code>这些lint工具来检查代码的规范与否，保证良好的代码规范，从而在多人协作中保障项目质量和可维护性。正常我们会在提交代码前手动执行语法检查，而<code>lint-staged</code>和<code>husky</code>而让这一过程自动化，在git的pre-commit阶段来检测你的代码，如果存在语法错误会中断commit。</p><span id="more"></span><h1 id="husky"><a href="#husky" class="headerlink" title="husky"></a>husky</h1><p><a href="https://github.com/typicode/husky">husky</a>可以让git hooks的使用变得更简单方便。运行<code>npm install husky@next --save-dev</code>安装最新版本，它会在我们项目根目录下面的<code>.git/hooks</code>文件夹下面创建<code>pre-commit</code>、<code>pre-push</code>等hooks。这些hooks可以让我们直接在<code>package.json</code>的<code>script</code>里运行我们想要在某个hook阶段执行的命令。</p><p>版本0.14之后配置有所改变，之前不知道npm安装使用@next会安装最新开发版本，一直安装稳定版本却使用心得配置，也算踩的坑吧，具体配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json， 最新版本</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;husky&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;hooks&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;pre-commit&quot;</span>: <span class="string">&quot;npm test&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;pre-push&quot;</span>: <span class="string">&quot;npm test&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;...&quot;</span>: <span class="string">&quot;...&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// package.json 版本0.14之前</span></span><br><span class="line">&#123;  <span class="attr">&quot;scripts&quot;</span>: &#123;    </span><br><span class="line"><span class="attr">&quot;precommit&quot;</span>: <span class="string">&quot;npm test&quot;</span>,  </span><br><span class="line">    <span class="attr">&quot;prepush&quot;</span>: <span class="string">&quot;npm test&quot;</span>,  </span><br><span class="line">    <span class="attr">&quot;...&quot;</span>: <span class="string">&quot;...&quot;</span>  </span><br><span class="line"> &#125;&#125;</span><br></pre></td></tr></table></figure><p>而仅使用husky在提交代码时会检查所有文件，我们肯定不希望这样，仅仅检查git add .的文件才是我们期望的。</p><h1 id="lint-staged"><a href="#lint-staged" class="headerlink" title="lint-staged"></a>lint-staged</h1><p><a href="https://github.com/okonet/lint-staged">lint-staged</a>可以在git staged阶段的文件上执行linters，简单点来说就是当我们运行<code>eslint</code>或<code>stylelint</code>的命令时，只会检查我们通过<code>git add</code>添加到暂存区的文件，可以避免我们每次检查都把整个项目的代码都检查一遍。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line"><span class="string">&quot;lint-staged&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;*.js&quot;</span>: [<span class="string">&quot;eslint --fix&quot;</span>, <span class="string">&quot;git add&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;纸上得来终终觉浅，绝知此事要躬行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;前几天给项目代码加eslint，并且使用lint-staged和husky在pre-commit阶段做代码检查，也踩了个坑，这里对这两个npm包作简要介绍。&lt;/p&gt;
&lt;h1 id=&quot;为什么使用&quot;&gt;&lt;a href=&quot;#为什么使用&quot; class=&quot;headerlink&quot; title=&quot;为什么使用&quot;&gt;&lt;/a&gt;为什么使用&lt;/h1&gt;&lt;p&gt;通常项目中我们通过&lt;code&gt;eslint&lt;/code&gt;和&lt;code&gt;stylelint&lt;/code&gt;这些lint工具来检查代码的规范与否，保证良好的代码规范，从而在多人协作中保障项目质量和可维护性。正常我们会在提交代码前手动执行语法检查，而&lt;code&gt;lint-staged&lt;/code&gt;和&lt;code&gt;husky&lt;/code&gt;而让这一过程自动化，在git的pre-commit阶段来检测你的代码，如果存在语法错误会中断commit。&lt;/p&gt;
    
    </summary>
    
      <category term="tools" scheme="https://dsb123dsb.github.io/categories/tools/"/>
    
    
      <category term="工程化" scheme="https://dsb123dsb.github.io/tags/%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>北漂初感</title>
    <link href="https://dsb123dsb.github.io/2018/04/15/%E5%8C%97%E6%BC%82%E5%88%9D%E6%84%9F/"/>
    <id>https://dsb123dsb.github.io/2018/04/15/北漂初感/</id>
    <published>2018-04-15T12:09:55.000Z</published>
    <updated>2018-04-15T12:52:23.217Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>纸上得来终觉浅，绝知此事要躬行</p></blockquote><p>转眼来北京四天了，过了第一个周末，也渐渐重新适应北方的气候，变成了原来自己眼里有些傻傻的戴口罩的匆匆行人，作为北方出生的汉纸在南方呆了几年竞变得不适应自己土生土长的北方土地，内心难免产生些许情绪。行走在北京校园的街头，看着遍地的杨树，在这个最好的季节，仿佛梦回幼时的家乡，原来我的内心深处一直对故乡的一切有着深深的眷恋，一点点相似的物事便已暴露，几年江南烟雨的温柔婉约也不能将之改变。</p><p>工作上第一次进入这么大的前端组，充满兴奋和忐忑，周五分享会想也了解到组内的一些业务和技术情况，有些业务技术虽然很老，但也看到组内积极想新技术转变的决心和努力，希望自己能够在这个过程获得成长和作出贡献。这里的也充满挑战，linux开发流程，偏后端知识的学习（ngnix，java），vue，微信小程序等等，有挑战才有进步，加油，期待两年后的自己。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;纸上得来终觉浅，绝知此事要躬行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;转眼来北京四天了，过了第一个周末，也渐渐重新适应北方的气候，变成了原来自己眼里有些傻傻的戴口罩的匆匆行人，作为北方出生的汉纸在南方呆了几年竞变得不适应自己土生土长的北方土地，
      
    
    </summary>
    
      <category term="生活随笔" scheme="https://dsb123dsb.github.io/categories/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="北漂" scheme="https://dsb123dsb.github.io/tags/%E5%8C%97%E6%BC%82/"/>
    
  </entry>
  
  <entry>
    <title>原生WebGL小试牛刀</title>
    <link href="https://dsb123dsb.github.io/2018/01/09/%E5%8E%9F%E7%94%9FWebGL%E5%B0%8F%E8%AF%95%E7%89%9B%E5%88%80/"/>
    <id>https://dsb123dsb.github.io/2018/01/09/原生WebGL小试牛刀/</id>
    <published>2018-01-09T11:35:28.000Z</published>
    <updated>2018-01-09T12:51:05.757Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>纸上得来终觉浅，绝知此事要躬行</p></blockquote><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>​    最近学习WebGL，各个知识点讲解比较分散，自己把整理了下知识点，并综合起来写了简单demo，学习中也感觉到3D图形制作知识的繁杂，当时看懂了其实并未太懂，只有不断学习消化。友情提醒，由于本地测试要访问文件图片，所以要使用命令<code>open -a &quot;Google Chrome&quot; --args --allow-file-access-from-files</code>。本文仅是个人总结，先介绍初始化着色器、纹理、阴影，后续细节会继续整理增加，先看下demo。</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fnallq6sa7g30bf07074m.gif" alt=""></p><span id="more"></span><h1 id="我们开始吧"><a href="#我们开始吧" class="headerlink" title="我们开始吧"></a>我们开始吧</h1><h2 id="初始化着色器程序"><a href="#初始化着色器程序" class="headerlink" title="初始化着色器程序"></a>初始化着色器程序</h2><p>​    书中开始一直使用<code>initShaders()</code>函数，隐藏了创建着色器和程序对象的细节，其中着色器对象管理一个顶点着色器或者一个片元着色器，程序对象管理着色器对象的容器，具体包括下面七个步骤：</p><ol><li><p><code>gl.createShader(type)</code>创建着色器对象，根据传入的参数</p></li><li><p><code>gl.shaderSource(shader, source)</code> 指定着色器对象的代码GLSL ES源代码</p></li><li><p><code>gl.compileShader(shader)</code>向着色器传入源代码后，还需要进行编译才能使用（二进制可执行格式）,调用gl.getShaderParameter(shader, pname)函数来检查着色器状态。</p></li><li><p><code>gl.createProgram()</code>创建程序对象</p></li><li><p><code>gl.attachShader(progtam,shader)</code>为程序对象分配着色器对象</p></li><li><p><code>gl.linkProgram(program</code>)为程序对象分配着色器对象后，还需要将（顶点和片元）着色器连接起来，调用<code>gl.getProgramParameters(program,pname)</code>检查是否连接成功，调用<code>gl.getProgramInfoLog()</code>获取连接出错信息</p></li><li><p><code>gl.useProgram()</code>告知WebGL系统所使用的程序对象，可以在绘制前准备多个程序对象，然后在绘制时根据需要切换程序对象。</p><p>然后根据这七个步骤分成了封装成了三个流程即最前面提到的<code>initShaders()</code>函数，内部调用<code>createProgram()</code>,它内部又会调用<code>loaderShader()</code>    ，后者负责创建一个编译好的着色器对象。</p></li></ol><p>##纹理一二须知</p><p>​    首先知道纹理映射：texture mapping,即将一张图像映射到一个几何图形的表面 。具体步骤：</p><ul><li>准备好映射到几何图形的纹理图像（需要先加载好图像）</li><li><p>为几何图形配置纹理映射方式（利用图形的顶点确定屏幕上哪部分被纹理图像覆盖，使用纹理坐标texture coordinate（纹理坐标很通用，坐标值与图像自身的尺寸无关）确定纹理图像的哪部分将覆盖到几何图形上）。</p><p>​通过纹理图像的纹理坐标与几何形体顶点坐标的映射关系确定怎样将纹理图像贴上去。WebGL中无法直接操作纹理对象，必须将纹理对象绑定到纹理单元上，间接操作。顶点之间的片元的纹理坐标会在光栅化的过程中内插出来。纹理单元机制可以同时使用多个纹理，默认下至少支持8个纹理</p></li></ul><p>##渲染到纹理</p><p>​    渲染到纹理是把渲染结果作为纹理使用，动态的生成图像，不是像服务器请求加载图像（在纹理图像被贴上图像被贴上图形之前还可以对其做一些额外处理，比如动态模糊或景深效果）。</p><p>​    通常WebGL在颜色缓冲区中进行绘制，在开启隐藏面消除功能时还会用到深度缓冲区，总之绘制结果存储在颜色缓冲区中。而帧缓冲区对象(framebuffer object)可以用来替代颜色缓冲区或深度缓冲区，可以先对帧缓冲区中的内容进行一些处理再显示或者直接用其中的内容作为纹理图像，被称为<strong>离屏绘制</strong>(offscreen drawing)。一个帧缓冲区有三个关联对象：颜色关联对象(color attachment)、深度关联区(depth attachment)和模板关联区(stencil attachment)，分别用来替换颜色缓冲区、深度缓冲区、模板缓冲区。每个关联对象又有两种类型：纹理对象和渲染缓冲区，具体步骤如下：</p><ul><li>创建帧缓冲区：<code>framebuffer = gl.createFramebuffer()</code>，创建之后还需要将其颜色关联对象指定为一个纹理对象，将其深度关联对象指定为一个渲染缓冲区对象</li><li>创建纹理对象并设置其尺寸和参数：<code>texture=gl.createTexture()，gl.bindTexture(gl.TEXTURE_2D,texture), gl.textImage2D(gl.TEXTURE_2D,0,gl.RGBA,OFFSCREEN_WIDTH,OFFSCREEN_HEIGHT,0,gl.RGBA,gl.UNSIGNED_BYTE,null)</code>存储纹理高宽，最后一个参数设为null可以新建一块空白区域, <code>gl.textParameteri(gl.TEXTURE_MIN_FILTER,gl.LINEAR)</code>;</li><li>创建渲染缓冲区对象: <code>depthBuffer = gl.createRenderbuffer()</code></li><li>绑定渲染缓冲区并设置其尺寸：<code>gl.bindRenderbuffer(gl.RENDERBUFFER, depthBuffer); gl.renderbufferStorage(gl.RENDER, gl.DEPTH_COMPONENT16, OFFSCREEn_WIDTH, OFFSCREEN_HEIGHT);</code> 深度关联对象的渲染缓冲区，其宽度和高度必须与作为颜色关联对象的纹理缓冲区一致。</li><li>将纹理对象关联到帧缓冲区：<code>gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer)</code>绑定帧缓冲区。<code>gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D,texture,0)</code>关联</li><li><p>将渲染缓冲区对象关联到帧缓冲区: <code>gl.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.DEPTH_ATTAACHMENT, gl.RENDERBUFFER, depthBuffer)</code></p></li><li><p>检查帧缓冲区的配置： <code>gl.checkFramebufferStatus(gl.FRAMEBUFFER)</code>（返回<code>gl.FRAMEBUFFER_COMPLETE</code>表示正确配置）</p></li><li>在帧缓冲区进行绘图：首先切换目标未帧缓冲区对象fbo，并在其颜色关联对象既在纹理对象上绘制立方体，然后切换绘制目标到canvas在颜色缓冲区绘制矩形同时把上一步在纹理对象中绘制的图像贴到矩形表面。</li></ul><h2 id="绘制阴影"><a href="#绘制阴影" class="headerlink" title="绘制阴影"></a>绘制阴影</h2><p>绘制过程可以简要概述为：一对着色器用来计算光源到物体的距离，另一对着色器根据一中计算出的距离。使用一张纹理图像把一中结果传入二中，这张纹理图像就被称为阴影贴图（shadow map），而通过阴影贴图实现阴影的方法就是阴影映射（shadow mapping），具体分为两步：</p><ol><li>将视点移到光源位置处，并运行第一个着色器，这是那些“要被绘制”的片元都是被照射到的，我们并不实际绘制片元，而是将其z值写入阴影贴图。</li><li>将视点移回原来位置，运行第二对着色器绘制场景，此时需要计算每个片元在光源坐标系中的坐标，并与阴影贴图中记录的值比较，如果前者大于后者，则说明在阴影中，使用较暗的颜色绘制。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;纸上得来终觉浅，绝知此事要躬行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;​    最近学习WebGL，各个知识点讲解比较分散，自己把整理了下知识点，并综合起来写了简单demo，学习中也感觉到3D图形制作知识的繁杂，当时看懂了其实并未太懂，只有不断学习消化。友情提醒，由于本地测试要访问文件图片，所以要使用命令&lt;code&gt;open -a &amp;quot;Google Chrome&amp;quot; --args --allow-file-access-from-files&lt;/code&gt;。本文仅是个人总结，先介绍初始化着色器、纹理、阴影，后续细节会继续整理增加，先看下demo。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNc79gy1fnallq6sa7g30bf07074m.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程实战" scheme="https://dsb123dsb.github.io/categories/%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="WebGL" scheme="https://dsb123dsb.github.io/tags/WebGL/"/>
    
  </entry>
  
  <entry>
    <title>参加D2论坛的一二收获想法</title>
    <link href="https://dsb123dsb.github.io/2017/12/17/%E5%8F%82%E5%8A%A0D2%E8%AE%BA%E5%9D%9B%E7%9A%84%E4%B8%80%E4%BA%8C%E6%94%B6%E8%8E%B7%E6%83%B3%E6%B3%95/"/>
    <id>https://dsb123dsb.github.io/2017/12/17/参加D2论坛的一二收获想法/</id>
    <published>2017-12-17T14:13:35.000Z</published>
    <updated>2017-12-17T14:45:04.428Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>纸上得来终觉浅，绝知此事要躬行</p></blockquote><p>今年第二次参加D2，相比去年新入行听的们懵懵懂懂，经过一年洗礼，今年听的能有些体会也有选择性的听了一些主题。</p><p>前几天参加GDD，谷歌发了Android Things，所以对于<strong>IoT</strong>比较感兴趣，而且也算前端的一个新的方向吧，上午去的比较迟，到的时候已经讲了一部分，讲师对于应用的实现分别用js和java、python都实现了，不过也谈到存在效率问题，实际落地使用的java，动态语言仅仅内部比赛idea时开发，不得不说很遗憾，不论如何重在尝试，希望自己也写个demo出来。</p><span id="more"></span><p>高性能react同构方案：在SPA时代，同构能够很好弥补客户端渲染不足，提升用户体验，讲师分享了beidou框架，也讲了同构常见的内存泄漏的排查和解决提出cpuProfile，它们自己开发的一个工具。具体性能优化部分就是不断修改代码：插件》prodcution 》缓存》node8》升级react16，应该还有方法记不住了。最后数据很惊人；还提到<strong>智能降级</strong>很感兴趣，查了下就是当流量暴增，接近或超过阈值时，会直接导致服务的RT快速上升。可以实时监测CPU和内存的使用率，超过一定的比例自动降级为客户端渲染，降低服务端压力，CPU和内存恢复常态时，自动切回服务端渲染。最后讲师提到的方法论很有启迪意义：上面提到的优化性能策略很多迟早都会过时，比如react16 ssr重构后，之前的组件级别缓存逻辑不再有效，真正的方法就是我们可以在代码层面定位到底应用慢在那个地方，从而针对性的改进（具体工具方法有点记不清了，回去在看下视频）。</p><p>很佩服贺师俊老师的，对于技术的纯粹追求和刨根问题的态度在演讲中表现的淋淋尽致，从Fastify的JSON解析优化快在哪里，到性能的基准测试，console.time由于抢占式多任务系统的测不准，64HZ级数导致的精度15ms，自己有些之前虽然略有了解不过并没有像今天贺老这般带着深入根源。</p><p>还有腾讯小伙伴分享的PWA，因为之前在GDD听了很多这方面东西，所以了解较多，但是也有一些新的体会，比如具体缓存设置和service worker的一些细节，但是自己也体验了PWA，感觉体验确实非常好；不过感觉PWA和微信小程序是对立的哈，哈哈</p><p>后面对于一些主题也很感兴趣，比如前端监控和http2，不过由于有事只能先走，后面有空去看回放视频吧。</p><p>虽然这次被小伙伴放鸽子，自己一个人去，但是看到前端有这么磨多优秀的前辈，也给予我无限前进动力，加油！！！</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;纸上得来终觉浅，绝知此事要躬行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;今年第二次参加D2，相比去年新入行听的们懵懵懂懂，经过一年洗礼，今年听的能有些体会也有选择性的听了一些主题。&lt;/p&gt;
&lt;p&gt;前几天参加GDD，谷歌发了Android Things，所以对于&lt;strong&gt;IoT&lt;/strong&gt;比较感兴趣，而且也算前端的一个新的方向吧，上午去的比较迟，到的时候已经讲了一部分，讲师对于应用的实现分别用js和java、python都实现了，不过也谈到存在效率问题，实际落地使用的java，动态语言仅仅内部比赛idea时开发，不得不说很遗憾，不论如何重在尝试，希望自己也写个demo出来。&lt;/p&gt;
    
    </summary>
    
      <category term="生活随笔" scheme="https://dsb123dsb.github.io/categories/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="D2" scheme="https://dsb123dsb.github.io/tags/D2/"/>
    
  </entry>
  
  <entry>
    <title>css揭秘中的一些技巧</title>
    <link href="https://dsb123dsb.github.io/2017/11/17/css%E6%8F%AD%E7%A7%98%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E6%8A%80%E5%B7%A7/"/>
    <id>https://dsb123dsb.github.io/2017/11/17/css揭秘中的一些技巧/</id>
    <published>2017-11-17T07:13:40.000Z</published>
    <updated>2017-11-17T08:31:20.150Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>纸上得来终觉浅，绝知此事要躬行</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>看完css揭秘，对表现和结构分离的理解更加深刻，之前写样式只求能做出来，对于结构有多复杂，代码有多冗余，并没有太多考虑，或者心有余而力不足，之前也没有真正认真进阶学习过css，读完此书，css magical不虚此名。</p><h1 id="偷师技巧一二"><a href="#偷师技巧一二" class="headerlink" title="偷师技巧一二"></a>偷师技巧一二</h1><p>个人总结了下，让css变得如魔法一般的有以下几个：</p><ol><li><p>巧用渐变</p></li><li><p>善用阴影</p></li><li><p>令人激动的动画和过渡的一些部位常人熟知的属性：<code>animation-play-state;animation-direction;steps()</code></p><span id="more"></span></li></ol><h3 id="毛玻璃效果"><a href="#毛玻璃效果" class="headerlink" title="毛玻璃效果"></a>毛玻璃效果</h3><p><strong>要点</strong>：父元素背景，子元素模糊（半透明处理，溢出隐藏，伪元素模糊放filter:blur()在子元素下面，负边距处理边缘）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Frosted glass effect</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line"><span class="attribute">min-height</span>: <span class="number">100vh</span>;</span><br><span class="line"><span class="attribute">box-sizing</span>: border-box;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">padding-top</span>: <span class="built_in">calc</span>(<span class="number">50vh</span> - <span class="number">6em</span>);</span><br><span class="line"><span class="attribute">font</span>: <span class="number">150%</span>/<span class="number">1.6</span> Baskerville, Palatino, serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span>, <span class="selector-tag">main</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;http://csssecrets.io/images/tiger.jpg&quot;</span>) <span class="number">0</span> / cover fixed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">main</span> &#123;</span><br><span class="line"><span class="attribute">position</span>: relative;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">1em</span>;</span><br><span class="line"><span class="attribute">max-width</span>: <span class="number">23em</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">hsla</span>(<span class="number">0</span>,<span class="number">0%</span>,<span class="number">100%</span>,.<span class="number">25</span>) border-box;</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="attribute">border-radius</span>: .<span class="number">3em</span>;</span><br><span class="line"><span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1px</span> <span class="built_in">hsla</span>(<span class="number">0</span>,<span class="number">0%</span>,<span class="number">100%</span>,.<span class="number">3</span>) inset,</span><br><span class="line">            <span class="number">0</span> .<span class="number">5em</span> <span class="number">1em</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.6</span>);</span><br><span class="line"><span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">1px</span> <span class="built_in">hsla</span>(<span class="number">0</span>,<span class="number">0%</span>,<span class="number">100%</span>,.<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">main</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line"><span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">0</span>; <span class="attribute">right</span>: <span class="number">0</span>; <span class="attribute">bottom</span>: <span class="number">0</span>; <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">margin</span>: -<span class="number">30px</span>;</span><br><span class="line"><span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">-webkit-<span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">20px</span>);</span><br><span class="line"><span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">20px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">blockquote</span> &#123; <span class="attribute">font-style</span>: italic &#125;</span><br><span class="line"><span class="selector-tag">blockquote</span> <span class="selector-tag">cite</span> &#123; <span class="attribute">font-style</span>: normal; &#125;</span><br></pre></td></tr></table></figure><h3 id="文本行的斑马纹效果"><a href="#文本行的斑马纹效果" class="headerlink" title="文本行的斑马纹效果"></a>文本行的斑马纹效果</h3><p>斑马纹可以帮助把人们视线保持在长条水平空间内，众所周知表格的斑马纹可使用伪类选择器<code>tr:nth-child(even)</code>实现，文本行的可以使用渐变背景实现</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">padding</span>:.<span class="number">5em</span>;</span><br><span class="line"><span class="attribute">line-height</span>:<span class="number">1.5em</span>;</span><br><span class="line"><span class="attribute">background</span>:beige;</span><br><span class="line"><span class="attribute">background-size</span>:auto <span class="number">3em</span>;</span><br><span class="line"><span class="attribute">background-origin</span>:content-box;<span class="comment">/*背景相对content-box定位，从而保持和文本对齐*/</span></span><br><span class="line"><span class="attribute">background-image</span>:<span class="built_in">linear-gradient</span>(<span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">2</span>) <span class="number">50%</span>, transparent <span class="number">0</span>);<span class="comment">/*渐变第二个角标中0表示和前面角标的值相同*/</span></span><br></pre></td></tr></table></figure><h3 id="自适应内部元素"><a href="#自适应内部元素" class="headerlink" title="自适应内部元素"></a>自适应内部元素</h3><p>如果不给内部元素制定一个height，他就会自动适应内容高度，而块级元素通常独占一行，如果我们希望它也这样 <code>max-width:min-content；</code></p><h3 id="满幅背景"><a href="#满幅背景" class="headerlink" title="满幅背景"></a>满幅背景</h3><p>很多时候我们希望背景满幅，内容定宽</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--<span class="number">1.0</span>--&gt;</span><br><span class="line"><span class="selector-tag">footer</span> &#123;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line"><span class="attribute">max-width</span>: <span class="number">900px</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">1em</span> auto;</span><br><span class="line">&#125;</span><br><span class="line">&lt;!--<span class="number">2.0</span>--&gt;</span><br><span class="line"><span class="selector-tag">footer</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">1em</span> <span class="built_in">calc</span>(<span class="number">50%</span> - <span class="number">450px</span>);</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.0中减少了内层多余的一层结构样式</p><h3 id="sticky-footer"><a href="#sticky-footer" class="headerlink" title="sticky-footer"></a>sticky-footer</h3><p>这是一种常见的布局，之前我们会使用计算高度<code>min-height:calc(100vh-footer)</code>,但是每当我们改变页脚尺寸或者折行时就会出现问题；更好的方法是使用flex布局，非footer部分设置<code>flex:1;</code>即可</p><h3 id="逐帧动画"><a href="#逐帧动画" class="headerlink" title="逐帧动画"></a>逐帧动画</h3><p><code>animation:loader 1s inifinite steps(8)</code>硬切为8部分，仅用css制作动图（动图切成多帧合并在一幅图上）</p><h3 id="闪烁效果"><a href="#闪烁效果" class="headerlink" title="闪烁效果"></a>闪烁效果</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*1.平滑闪烁*/</span></span><br><span class="line"><span class="keyword">@keyframes</span> blink-smooth &#123;<span class="selector-tag">to</span> &#123;<span class="attribute">color</span>:transparent;&#125;&#125;</span><br><span class="line"><span class="selector-class">.highlight</span> &#123;</span><br><span class="line">    <span class="attribute">animation</span>:.<span class="number">5s</span> blink-smooth <span class="number">6</span> alternate;<span class="comment">/*alternate为animation-direction*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*2.普通闪烁*/</span></span><br><span class="line"><span class="keyword">@keyframes</span> blink &#123;<span class="number">50%</span> &#123;<span class="attribute">color</span>:transparent;&#125;&#125;</span><br><span class="line"><span class="selector-class">.highlight</span> &#123;</span><br><span class="line">    <span class="attribute">animation</span>:<span class="number">1s</span> blink <span class="number">3</span> <span class="built_in">steps</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="状态平稳动画"><a href="#状态平稳动画" class="headerlink" title="状态平稳动画"></a>状态平稳动画</h3><p>有一些动画，比如交互性的：鼠标hover时动画，离开终止，我们希望动画暂停而不是突兀切回初始状态，可使用<code>animation-play-state:pause/running;</code>控制</p><h3 id="打字效果"><a href="#打字效果" class="headerlink" title="打字效果"></a>打字效果</h3><p>利用动画逐渐增加文本宽度</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> typing &#123;</span><br><span class="line">    <span class="selector-tag">from</span> &#123; <span class="attribute">width</span>: <span class="number">0</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> caret &#123;</span><br><span class="line">    <span class="number">50%</span> &#123; <span class="attribute">border-color</span>: transparent; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">15ch</span>; <span class="comment">/* 文本的宽度 可能有兼容问题，可设置固定来优雅回退*/</span></span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">border-right</span>: .<span class="number">05em</span> solid;</span><br><span class="line">    <span class="attribute">animation</span>: typing <span class="number">6s</span> <span class="built_in">steps</span>(<span class="number">15</span>),</span><br><span class="line">    caret <span class="number">1s</span> <span class="built_in">steps</span>(<span class="number">1</span>) infinite;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//js</span></span><br><span class="line">$$(<span class="string">&#x27;h1&#x27;</span>).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">h1</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> len = h1.textContent.length, s = h1.style;</span><br><span class="line">s.width = len + <span class="string">&#x27;ch&#x27;</span>;</span><br><span class="line">s.animationTimingFunction = <span class="string">&quot;steps(&quot;</span>+len+<span class="string">&quot;),steps(1)&quot;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello awesome css<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h1><p>对css越来越感兴趣，前端的三把利器真是样样都要行，之前很厌烦来回调样式，说到底还是没有好好学习，功夫到了很多样式往往几行代码就能产生魔法般的效果，fighting！！！！！</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;纸上得来终觉浅，绝知此事要躬行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;看完css揭秘，对表现和结构分离的理解更加深刻，之前写样式只求能做出来，对于结构有多复杂，代码有多冗余，并没有太多考虑，或者心有余而力不足，之前也没有真正认真进阶学习过css，读完此书，css magical不虚此名。&lt;/p&gt;
&lt;h1 id=&quot;偷师技巧一二&quot;&gt;&lt;a href=&quot;#偷师技巧一二&quot; class=&quot;headerlink&quot; title=&quot;偷师技巧一二&quot;&gt;&lt;/a&gt;偷师技巧一二&lt;/h1&gt;&lt;p&gt;个人总结了下，让css变得如魔法一般的有以下几个：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;巧用渐变&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;善用阴影&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;令人激动的动画和过渡的一些部位常人熟知的属性：&lt;code&gt;animation-play-state;animation-direction;steps()&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="css" scheme="https://dsb123dsb.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>http2.0小结</title>
    <link href="https://dsb123dsb.github.io/2017/10/28/http2-0%E5%B0%8F%E7%BB%93/"/>
    <id>https://dsb123dsb.github.io/2017/10/28/http2-0小结/</id>
    <published>2017-10-28T04:35:31.000Z</published>
    <updated>2017-10-28T06:15:11.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>纸上得来终觉浅，觉知此事要躬行</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>如今，http1.1是互联网中的主要协议，随着web技术的飞速发展，http1.1已经无法满足用户对性能的要求，此后谷歌推出SPDY,意在解决http1.1中广为人知的性能问题，其在被行业采用并证明能够大幅提升性能后，已经具备了成为一个标准的条件。</p><p>Http2.0是http协议自1999年http1.1发布后的首个更新，主要基于SPDY协议，於2015年正式发表。</p><h1 id="http2-0变化"><a href="#http2-0变化" class="headerlink" title="http2.0变化"></a>http2.0变化</h1><h2 id="二进制分帧"><a href="#二进制分帧" class="headerlink" title="二进制分帧"></a>二进制分帧</h2><p>帧：http2.0数据通信的最小单位。</p><p>消息（message）：指http2.0中逻辑上的http消息。例如请求和响应，消息由一个或多个帧组成。</p><p>流：存在于连接中的一个虚拟通道。流可以承载双向消息，每个流都有一个唯一的证书ID。</p><p>http2.0采用二进制格式传输数据，而非http1x的文本格式，二进制协议解析起来更高效。</p><p>Http1.x的请求和响应报文，都是起始行，首部和整体正文（可选）组成，各部分之间以文本换行符分隔。http2.0将请求和响应数据分割为更小的帧，并且它们采用二进制编码。</p><p>http2.0中，同域名下所有通信都在单个连接上完成（多路复用中介绍），这个连接可以承载任意数量数量的双向数据流。每个数据流都以消息的形式发送，而消息又由一个或多个帧组成。多个帧之间可以乱序发送，因为根据帧首部的流标识可以重新组装。</p><span id="more"></span><h2 id="多路复用"><a href="#多路复用" class="headerlink" title="多路复用"></a>多路复用</h2><p>多路复用，代替原来的序列和阻塞机制。所有的请求都是通过==一个TCP==连接并发完成。</p><p>http1.x中，如果想并发多个请求，必须使用多个tcp连接，并且浏览器为了控制资源，还会对单个域名有6-8个数限制，如下图，红色圈出来的请求就因域名链接数超过限制，而被挂起等待了一段时间：</p><p><img src="http://blog.upyun.com/wp-content/uploads/2017/03/%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8.png" alt=""></p><p>在http2.0中，有了二进制分帧后，就不再依赖TCP连接去实现多流并行了：</p><ul><li>同域名下所用通信都在单个连接上完成</li><li>单个连接可以承载任意数量的双向数据流</li><li>数据流以消息的形式发送，而消息又由一个或多个帧组成，多个帧可以乱序发送，因为根据帧首部的流标识可以重新组装</li></ul><p>这一特性，性能会有极大提升，因为：</p><ul><li>同个域名下只需要占用一个TCP连接，消除了因多个TCP连接而带来的延时和内存消耗</li><li>单个连接上可以并行交错请求和响应，之间互不干扰</li><li>在http2.0中，每个请求都可以带一个31bit的优先值，0表示最高优先级，数值越大优先级越低。有了这个优先值，客户端和服务器就可以在处理不同的流时采取不同的策略，以最优的方式发送流、消息和帧</li></ul><h2 id="服务器推送"><a href="#服务器推送" class="headerlink" title="服务器推送"></a>服务器推送</h2><p>服务端可以在发送页面html时主动推送其它资源，而不用等到浏览器解析到相应位置，发起请求再响应。例如服务端可以主动把js和css文件推送给客户端，而不需要客户端解析html在请求发送这些请求。服务端可以主动送，客户端也有权利选择接收与否，如果服务端推送的资源已经被浏览器缓存过，浏览器可以通过RST_STREAM帧来拒收。主动推送也遵守同源策略，服务端不会随便推送第三方资源给客户端。</p><h2 id="头部压缩"><a href="#头部压缩" class="headerlink" title="头部压缩"></a>头部压缩</h2><p>Http1.1请求的大小变得越来越大，有时甚至会大于TCP窗口的初始大小，因为它们需要等待带着ACK的响应回来以后才能继续发送。http2.0对消息头部采用HACK（专门为http2头部设计的压缩格式）进行压缩传输，能够节省消息头占用的网络流量。而http1.x每次请求，都会携带大量冗余头部信息，浪费很多带宽资源，如果算cookie，增加的负荷会达到上千字节，为了减少开销并且提升性能，http2.0会压缩首部元数据。</p><ul><li>http2.0在客户端和服务端使用“首部表”来跟踪和存储之前发送的键-值对，对于相同的数据，不再通过每次请求和响应发送</li><li>首部表在http2.0的连接存续期内始终存在，由客户端和服务端共同渐进的更新</li><li>每个新的首部键-值对要么被追加到当前表尾部，要么替换表中之前的值</li></ul><p>于是，http2.0连接的两端都知道已经发送了那些首部，这些首部的值是什么，从而针对之前的数据至编码发送这些差异的数据。在通信期间几乎不会改变的键值对只需要发送一次即可，这就大大提高了数据的载荷。</p><p>头部压缩需要客户端和服务端做好以下工作：</p><ul><li>维护一份相同的静态字典（Static Table），包含常见的头部名称，以及特别常见的头部名称和值的组合</li><li>维护一份相同的动态字典（Dynamic Table），可以动态的添加内容</li><li>支持基于静态哈夫曼编码（Huffman Coding）</li></ul><p>静态字典的作用有两个：</p><ol><li>对于完全匹配的头部键值对，可以直接使用一个字符表示</li><li>对于头部名称可以匹配的键值对，可以将名称使用一个字符表示</li></ol><p>哈夫曼编码的核心理念就是使用最少的位数表示最多的信息，HTTP2.0中这份哈夫曼编码表是根据一个大样本的HTTP报头的统计数据生成，经常出现的字符会用较短的二进制数标识，出现频率较低的字符用较长的二进制数标识，这样就保证了综合来看报头信息占用了较少的空间，进一步压缩了报头信息。</p><p>在服务端接收到压缩过的报头信息后，会先进行哈夫曼编码解码，得到报首信息后，再结合维护的静态字典和动态字典信息得出完整的报首信息，随后进行请求的处理和响应。在需要更新动态字典信息时，对字典进行更新。</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>向HTTP2.0的迁移不可能瞬间完成，无论服务器端还是客户端都需要进行必要的更新升级才能使用。好消息是，大多数现代浏览器都内置有高效的后台升级机制，对大多数既有用户来说，这些浏览器可以很快的支持HTTP2.0，不会带来很大困扰。然而，服务器端和中间设备的升级、更新就不是那么容易，是一个长期的过程，而且很费力、费钱。</p><p>HTTP1.X至少还会存续十年以上，大多数服务器和客户端在此期间必须同时支持1.x和2.0标准。于是，支持HTTP2.0的客户端在发起新请求之前，必须能发现服务器及中间设备是否支持HTTP2.0协议。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;纸上得来终觉浅，觉知此事要躬行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;如今，http1.1是互联网中的主要协议，随着web技术的飞速发展，http1.1已经无法满足用户对性能的要求，此后谷歌推出SPDY,意在解决http1.1中广为人知的性能问题，其在被行业采用并证明能够大幅提升性能后，已经具备了成为一个标准的条件。&lt;/p&gt;
&lt;p&gt;Http2.0是http协议自1999年http1.1发布后的首个更新，主要基于SPDY协议，於2015年正式发表。&lt;/p&gt;
&lt;h1 id=&quot;http2-0变化&quot;&gt;&lt;a href=&quot;#http2-0变化&quot; class=&quot;headerlink&quot; title=&quot;http2.0变化&quot;&gt;&lt;/a&gt;http2.0变化&lt;/h1&gt;&lt;h2 id=&quot;二进制分帧&quot;&gt;&lt;a href=&quot;#二进制分帧&quot; class=&quot;headerlink&quot; title=&quot;二进制分帧&quot;&gt;&lt;/a&gt;二进制分帧&lt;/h2&gt;&lt;p&gt;帧：http2.0数据通信的最小单位。&lt;/p&gt;
&lt;p&gt;消息（message）：指http2.0中逻辑上的http消息。例如请求和响应，消息由一个或多个帧组成。&lt;/p&gt;
&lt;p&gt;流：存在于连接中的一个虚拟通道。流可以承载双向消息，每个流都有一个唯一的证书ID。&lt;/p&gt;
&lt;p&gt;http2.0采用二进制格式传输数据，而非http1x的文本格式，二进制协议解析起来更高效。&lt;/p&gt;
&lt;p&gt;Http1.x的请求和响应报文，都是起始行，首部和整体正文（可选）组成，各部分之间以文本换行符分隔。http2.0将请求和响应数据分割为更小的帧，并且它们采用二进制编码。&lt;/p&gt;
&lt;p&gt;http2.0中，同域名下所有通信都在单个连接上完成（多路复用中介绍），这个连接可以承载任意数量数量的双向数据流。每个数据流都以消息的形式发送，而消息又由一个或多个帧组成。多个帧之间可以乱序发送，因为根据帧首部的流标识可以重新组装。&lt;/p&gt;
    
    </summary>
    
      <category term="基础杂谈" scheme="https://dsb123dsb.github.io/categories/%E5%9F%BA%E7%A1%80%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="http2.0" scheme="https://dsb123dsb.github.io/tags/http2-0/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://dsb123dsb.github.io/2017/10/03/hello-world/"/>
    <id>https://dsb123dsb.github.io/2017/10/03/hello-world/</id>
    <published>2017-10-03T13:53:51.000Z</published>
    <updated>2017-10-03T13:53:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.<br><span id="more"></span></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
      <category term="搭建bog" scheme="https://dsb123dsb.github.io/categories/%E6%90%AD%E5%BB%BAbog/"/>
    
    
      <category term="initial" scheme="https://dsb123dsb.github.io/tags/initial/"/>
    
  </entry>
  
  <entry>
    <title>redux和flux学习</title>
    <link href="https://dsb123dsb.github.io/2017/09/30/redux%E5%92%8Cflux%E5%AD%A6%E4%B9%A0/"/>
    <id>https://dsb123dsb.github.io/2017/09/30/redux和flux学习/</id>
    <published>2017-09-30T03:25:21.000Z</published>
    <updated>2017-10-03T13:53:51.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>纸上得来终觉浅，绝知此事要躬行</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>工作虽然一直用react，但是都是现学现用，花了点时间通读《深入react技术栈》，学习笔记略作整理</p><p>传统MVC缺点，在项目越来越大，逻辑越来越复杂时，数据流动变的越来越混乱。<br><img src="https://i.imgur.com/oIfBMk2.png" alt=""><br><span id="more"></span></p><h1 id="Flux-的解决方案"><a href="#Flux-的解决方案" class="headerlink" title="Flux 的解决方案"></a>Flux 的解决方案</h1><p>Flux 的核心思想就是数据和逻辑永远单向流动。<br><strong>flux数据模型</strong><br><img src="https://i.imgur.com/HtXn7dm.png" alt=""></p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>一个 Flux 应用由 3 大部分组成——dispatcher、store 和 view，其中 </p><ol><li>dispatcher 负责分发事件；</li><li>store 负责保存数据，同时响应事件并更新数据；</li><li>view 负责订阅 store 中的数据，并使用这些数据<br>渲染相应的页面</li></ol><p><img src="https://i.imgur.com/1IFv9jz.png" alt=""></p><h2 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h2><ol><li>Flux 的中心化控制。让所有的请求与改变都只能通过 action 发出，统一由 dispatcher 来分配。<ul><li>View 可以保持高度简洁，它不需要关心太多的逻辑，只需要关心传入的数据；</li><li>中心化还控制了所有数据，发生问题时可以方便查询。比起 MVC 架构下数据或逻<br>辑的改动可能来自多个完全不同的源头，Flux 架构追查问题的复杂度和困难度显然要小得多。</li></ul></li><li>Flux 把 action 做了统一归纳，提高了系统抽象程度。不论 action 是由用户触发的，从服务端发起的，还是应用本身的行为，对于我们而言，它都只是一个动作而已。与 MVC 架构下<br>不同的触发方式管理混乱相比，Flux 要优雅许多。<h2 id="flux不足"><a href="#flux不足" class="headerlink" title="flux不足"></a>flux不足</h2></li><li>Flux 的冗余代码太多，Flux 源码中几乎只有 dispatcher的实现，但是在每个应用中都需要手动创建一个 dispatcher 的示例</li><li>Flux 给开发者提供的还是它的思想。Flux 在很大程度上是一种很松散的设计约定，不同的开发者对 Flux 都会有自己的理解<h1 id="redux"><a href="#redux" class="headerlink" title="redux"></a>redux</h1><h2 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h2>Redux 参考了 Flux 的设计，但是对 Flux 许多冗余的部分（如 dispatcher）做了<br>简化，同时将 Elm 语言中函数式编程的思想融合其中。<br><img src="https://i.imgur.com/OzoHXun.png" alt=""><h2 id="Redux-三大原则"><a href="#Redux-三大原则" class="headerlink" title="Redux 三大原则"></a>Redux 三大原则</h2></li><li>单一数据源。 <ul><li>整个应用状态都保存在一个对象中，可以提取出整个应用的状态进行持久化（比如实现一个针对整个应用的即时保存功能）</li><li>也为服务端渲染提供了可能。</li></ul></li><li>状态是只读的。<ul><li>在 Redux 中不会定义一个 store，而是定义一个 reducer，它的功能是根据当前触发的 action 对当前应用的状态（state）进行迭代，这里并没有直接修改应用的状态，而是返回了一份全新的状态。</li><li>Redux 提供的 createStore 方法会根据reducer 生成 store。</li><li>最后，我们可以利用 store. dispatch方法来达到修改状态的目的。</li></ul></li><li>状态修改均由纯函数完成。<ul><li>这是Redux 与Flux 在表现上的最大不同。在 Flux 中，在actionCreator 里调用<br>AppDispatcher.dispatch 方法来触发 action，不仅有冗余的代码，而且因为直接修改了 store 中的数据，导致无法保存每次数据变化前后的状态。</li><li>在 Redux 里，通过定义 reducer 来确定状态的修改，而每一个 reducer 都是纯函数，这意味着它没有副作用，即接受一定的输入，必定会得到一定的输出。<h1 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h1>这里仅对redux和flux的基本知识进行了总结，redux在大型应用的实现后续学习有了深刻体会在做总结</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;纸上得来终觉浅，绝知此事要躬行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;工作虽然一直用react，但是都是现学现用，花了点时间通读《深入react技术栈》，学习笔记略作整理&lt;/p&gt;
&lt;p&gt;传统MVC缺点，在项目越来越大，逻辑越来越复杂时，数据流动变的越来越混乱。&lt;br&gt;&lt;img src=&quot;https://i.imgur.com/oIfBMk2.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="基础杂谈" scheme="https://dsb123dsb.github.io/categories/%E5%9F%BA%E7%A1%80%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="学习笔记" scheme="https://dsb123dsb.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="react" scheme="https://dsb123dsb.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>携程两个月工作小结</title>
    <link href="https://dsb123dsb.github.io/2017/09/06/%E6%90%BA%E7%A8%8B%E4%B8%A4%E4%B8%AA%E6%9C%88%E5%B7%A5%E4%BD%9C%E5%B0%8F%E7%BB%93/"/>
    <id>https://dsb123dsb.github.io/2017/09/06/携程两个月工作小结/</id>
    <published>2017-09-06T14:41:26.000Z</published>
    <updated>2017-10-03T13:53:51.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>纸上得来终觉浅，绝知此事要躬行</p></blockquote><p>时间过的很快 ，需要放慢脚步来丈量，两个月收获很多，也失去不少</p><h1 id="工作与收获"><a href="#工作与收获" class="headerlink" title="工作与收获"></a>工作与收获</h1><h2 id="软文大赛"><a href="#软文大赛" class="headerlink" title="软文大赛"></a>软文大赛</h2><p>简单的H5页面展示，之前没学过react，利用这个项目，熟悉了react技术栈，能够使用react进行简单页面开发、代码简化。期间也学习了很多技术，大图片快速加载、图片预占位、scss简化代码等</p><h2 id="开通首页兼容性修复"><a href="#开通首页兼容性修复" class="headerlink" title="开通首页兼容性修复"></a>开通首页兼容性修复</h2><p>我们的页面是同时跑在app、微信、和手机浏览器的，发现页面在浏览器会存在拥挤情况，学习了flex布局和hysdk简单使用，使用flex布局使空余空间自动填充，同时考虑在浏览器环境下做专门处理，或者改用滚动布局，思考了很多方案也做了实践</p><h2 id="touchable组件和yo-公共样式"><a href="#touchable组件和yo-公共样式" class="headerlink" title="touchable组件和yo-公共样式"></a>touchable组件和yo-公共样式</h2><p>做这个项目进行项目的组件化和代码复用以及组件源码的学习，养成主动进行项目抽离和阅读源码的习惯。<br>我们页面中使用tuchable组件的地方很多未添加按下态或者按下态不一致，我对组件进行了优化，可进行配置。yo提供了很多封装的现成样式，但是我们代码里基本都是自己写的，没有用到yo封装的样式，通过阅读源码，能使用封装的全部使用，减少代码</p><h2 id="暂停服务公告"><a href="#暂停服务公告" class="headerlink" title="暂停服务公告"></a>暂停服务公告</h2><p>这是完全自己单独写的组件，学习接口设计，展示后端接口返回数据。<br>动画速度和不同字数的计算关系、动画重绘对滚动框影响、动画进入效果优化，动画播放效果优化、flex布局对offsetWidth影响、react生命周期学习，组件的可配置化<br><span id="more"></span></p><h2 id="和第三方app页面交互"><a href="#和第三方app页面交互" class="headerlink" title="和第三方app页面交互"></a>和第三方app页面交互</h2><p>需求是页面需要跳转到另一个页面，然后成功 完成任务后回来，我们页面根据回传参数进行下一步处理，hysdk的学习，app内使用openWebview，期间遇到不同版本app的兼容、h5内直接更换loaction.href, 第三方app通过closeWebview关闭，并且透传参数，通过onreceiveData接收参数，期间调试涉及方面较多，交互逻辑也比较复杂，踩了很多坑。</p><h1 id="后面"><a href="#后面" class="headerlink" title="后面"></a>后面</h1><p>回来需要更加努力学习，基础知识再温习一遍，然后主攻react（进阶知识，高阶组件，redux，源码等）和css，Es6也要温习（promise等）</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;纸上得来终觉浅，绝知此事要躬行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;时间过的很快 ，需要放慢脚步来丈量，两个月收获很多，也失去不少&lt;/p&gt;
&lt;h1 id=&quot;工作与收获&quot;&gt;&lt;a href=&quot;#工作与收获&quot; class=&quot;headerlink&quot; title=&quot;工作与收获&quot;&gt;&lt;/a&gt;工作与收获&lt;/h1&gt;&lt;h2 id=&quot;软文大赛&quot;&gt;&lt;a href=&quot;#软文大赛&quot; class=&quot;headerlink&quot; title=&quot;软文大赛&quot;&gt;&lt;/a&gt;软文大赛&lt;/h2&gt;&lt;p&gt;简单的H5页面展示，之前没学过react，利用这个项目，熟悉了react技术栈，能够使用react进行简单页面开发、代码简化。期间也学习了很多技术，大图片快速加载、图片预占位、scss简化代码等&lt;/p&gt;
&lt;h2 id=&quot;开通首页兼容性修复&quot;&gt;&lt;a href=&quot;#开通首页兼容性修复&quot; class=&quot;headerlink&quot; title=&quot;开通首页兼容性修复&quot;&gt;&lt;/a&gt;开通首页兼容性修复&lt;/h2&gt;&lt;p&gt;我们的页面是同时跑在app、微信、和手机浏览器的，发现页面在浏览器会存在拥挤情况，学习了flex布局和hysdk简单使用，使用flex布局使空余空间自动填充，同时考虑在浏览器环境下做专门处理，或者改用滚动布局，思考了很多方案也做了实践&lt;/p&gt;
&lt;h2 id=&quot;touchable组件和yo-公共样式&quot;&gt;&lt;a href=&quot;#touchable组件和yo-公共样式&quot; class=&quot;headerlink&quot; title=&quot;touchable组件和yo-公共样式&quot;&gt;&lt;/a&gt;touchable组件和yo-公共样式&lt;/h2&gt;&lt;p&gt;做这个项目进行项目的组件化和代码复用以及组件源码的学习，养成主动进行项目抽离和阅读源码的习惯。&lt;br&gt;我们页面中使用tuchable组件的地方很多未添加按下态或者按下态不一致，我对组件进行了优化，可进行配置。yo提供了很多封装的现成样式，但是我们代码里基本都是自己写的，没有用到yo封装的样式，通过阅读源码，能使用封装的全部使用，减少代码&lt;/p&gt;
&lt;h2 id=&quot;暂停服务公告&quot;&gt;&lt;a href=&quot;#暂停服务公告&quot; class=&quot;headerlink&quot; title=&quot;暂停服务公告&quot;&gt;&lt;/a&gt;暂停服务公告&lt;/h2&gt;&lt;p&gt;这是完全自己单独写的组件，学习接口设计，展示后端接口返回数据。&lt;br&gt;动画速度和不同字数的计算关系、动画重绘对滚动框影响、动画进入效果优化，动画播放效果优化、flex布局对offsetWidth影响、react生命周期学习，组件的可配置化&lt;br&gt;
    
    </summary>
    
      <category term="生活随笔" scheme="https://dsb123dsb.github.io/categories/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://dsb123dsb.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>携程实习小结</title>
    <link href="https://dsb123dsb.github.io/2017/07/30/%E6%90%BA%E7%A8%8B%E5%AE%9E%E4%B9%A0%E5%B0%8F%E7%BB%93/"/>
    <id>https://dsb123dsb.github.io/2017/07/30/携程实习小结/</id>
    <published>2017-07-30T05:57:48.000Z</published>
    <updated>2017-10-03T13:53:51.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>纸上得来终觉浅，绝知此事要躬行</p></blockquote><p>实习后公司学校事情都很多，好久没写点东西，不知不觉月底了，是回顾下总结然后继续去前行的时刻了。</p><h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><p>本来冲着携程性价比高，不加班来的，事情总是事与愿违，本部门加班简直了，不过还是很高兴学习到了很多哦东西。之前创业公司实习东西要能做出来，后面出问题再改，这里无论是步骤还是流程都更加规范和严格，每次师傅给我review代码都要脱一层皮，感觉自己写的是一坨屎，然后还要和测试review代码，我想象review才是提高和发现错误的契机吧，听闻其他有些部门review代码走过场和没有，更坚定自己好好珍惜这一切，累并快乐着。</p><p>也参加了携程MIT训练营，见了cto，携程能让去哪的人做cto也让人看到了不断加强自身技术导向的意愿，祝好。一起进来的同事们无论积极主动还能力见识都让人侧目。这大概是我们不断奋力向上攀登的魅力吧。</p><h1 id="后面"><a href="#后面" class="headerlink" title="后面"></a>后面</h1><p>很多公司的秋招提前批也开始了，不管未来会不会呆在这里，这是一段美好的旅程，留下一段美好的回忆。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;纸上得来终觉浅，绝知此事要躬行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;实习后公司学校事情都很多，好久没写点东西，不知不觉月底了，是回顾下总结然后继续去前行的时刻了。&lt;/p&gt;
&lt;h1 id=&quot;收获&quot;&gt;&lt;a href=&quot;#收获&quot; class=&quot;he
      
    
    </summary>
    
      <category term="生活随笔" scheme="https://dsb123dsb.github.io/categories/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://dsb123dsb.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
